<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>（二）测试驱动开发技巧--第一个示例</title>
      <link href="/2022/06/02/er-ce-shi-qu-dong-kai-fa-ji-qiao-di-yi-ge-shi-li/"/>
      <url>/2022/06/02/er-ce-shi-qu-dong-kai-fa-ji-qiao-di-yi-ge-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="测试驱动开发：第一个示例"><a href="#测试驱动开发：第一个示例" class="headerlink" title="测试驱动开发：第一个示例"></a>测试驱动开发：第一个示例</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写个测试，保证它通过，接着重构设计，这就是 TDD 的全部内容了。</p><ul><li>啊哈，我太勤快了，这么快就更新第二篇文章了，吐槽下身份证过期了导致旅游计划被搁置 😓，疫情下太久没用过身份证了，没想到还过期了。</li><li>废话少说，这篇文章篇幅有些多啊，不过都是代码片段实际看起来也还好，完整代码在<a href="https://github.com/HATTER-LONG/TDD_Learning">这里</a>，Src 目录下的对应文件夹，可以先编译试试，体会下。</li><li><a href="https://github.com/HATTER-LONG/NoteBook_ModernCppProgrammingWithTDD">笔记目录</a>，再次厚颜无耻的求下 star 或者 follow 🚩。</li></ul><h2 id="Soundex-类"><a href="#Soundex-类" class="headerlink" title="Soundex 类"></a>Soundex 类</h2><p>以 TDD 的方式开发 Soundex 类，这种类可以提升应用程序的搜索能力。这个算法是将单词编码为一个字母和三个数字，它将发音相似的单词映射到相同的编码。<a href="http://en.wikipedia.org/wiki/Soundex">Wiki 解释</a>：</p><ol><li><p>保留第一个字母。丢掉所有出现的 a、e、i、o、 u、y、h、w。</p></li><li><p>以数字来代替辅音（第一个字母除外）：</p><ul><li>b、f、p、v : 1</li><li>c、g、j、k、q、s、x、z : 2</li><li>d、t : 3</li><li>l : 4</li><li>m、n : 5</li><li>r : 6</li></ul></li><li><p>如果相邻字母编码相同，用一个数字表示它们即可。同样，如果出现两个编码相同的字母，且它们被 h 或 w 隔开，也这样处理；但如果被元音隔开，就要编码两次。这条规则同样适用于第一个字母。</p></li><li><p>当得到一个字母和三个数字时，停止处理。如果需要，补零以对齐。</p></li></ol><h2 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h2><p>TDD 并非一次将所有测试全部实现，而是每次只关注一个功能点对应的单元测试，当完成后再考虑下一个需要加入系统的功能。</p><p><strong>从宏观的角度来看，TDD 的践行步骤是：编写一个最基本单元功能的测试代码 –&gt; 测试失败 –&gt; 实现功能代码最低限度的使得测试代码通过测试 –&gt; 测试成功 –&gt; 考虑下一个基本单元功能并编写对应测试 –&gt; …。</strong></p><p>基于这一思路，以 Soundex 举例：最先需要实现的便是步骤一，保留第一个字母：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Soundex soundex<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们创建了一个 Soundex 一个对象，然后到此为止，因为现在已经编译不通过了，需要先解决这个问题：<ul><li>只在为了使失败测试通过时才编写产品代码。</li><li>当测试刚好失败时，停止继续编写。编译失败也是失败。</li><li>只编写刚好能让一个失败测试通过的产品代码。</li></ul></li></ul><p>现在编译在已经通知未定义 Soundex 的错误：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token comment" spellcheck="true">// !TODO : 当前暂时与测试代码同一个文件，当感觉代码放在同一个文件有些麻烦时，再用合适的方式迁出</span><span class="token comment" spellcheck="true">/** * @brief 实现 Soundex 类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Soundex soundex<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在继续向前添加功能，设计使 Soundex 对外提供一个 encode(string) 公共成员函数，现在代码使无法编译通过：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修复错误，使 Soundex 支持 encode 方法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在检验返回值是否符合 Soundex 算法转换后的结果：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> Catch<span class="token operator">::</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在得到了与前边编译失败不同的结果，断言失败。当然这是必然的，因为 encode 方法并没有什么实现。</p><pre class="line-numbers language-c++"><code class="language-c++">/** * @brief Soundex 算法类 * */class Soundex{public:    /**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */    std::string encode(const std::string& Word) const { return "A"; }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在断言能通过了，不过功能并没有完善，不过这里展示了一个渐进式 TDD 开发的过程。</p><h2 id="去掉不干净的代码"><a href="#去掉不干净的代码" class="headerlink" title="去掉不干净的代码"></a>去掉不干净的代码</h2><p>即使代码很短也可能存在问题，TDD 为开发提供了更好的时机去修复，即每次完成单元测试代码以及功能代码编写后都可以进行快速的增量审阅，避免小问题越积越多。</p><h3 id="命名空间的修复"><a href="#命名空间的修复" class="headerlink" title="命名空间的修复"></a>命名空间的修复</h3><p>单元测试代码中，Equals 使用 Catch 命名空间比较影响阅读连贯性，使用命名空间将断言读起来像一个句子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Catch<span class="token punctuation">;</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消除重复代码"><a href="#消除重复代码" class="headerlink" title="消除重复代码"></a>消除重复代码</h3><p>重复代码对于维护成本和风险都会提升。审阅代码是需要着重优化。</p><p>在此例中没有太明显的重复，但是 <code>"A"</code> 这个硬编码的字符串出现了很多回，可以将 encode 方法中返回的硬编码 “A” 优化掉：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何时候，一个完整的测试集合声明了系统中期望的行为。这里蕴含着一个潜台词：如果一个行为没有对应的测试来描述，那这个行为要么不存在，要么不是期望的（或者测试本身没有尽到描述行为的职责）。</p><p>当历经 TDD 的各个周期时，我们会使用重构来审阅设计，同时修复出现的所有问题。重构的主要关注点是提升表达能力，去除重复代码。就代码的可维护性来说，这两个点最有裨益。</p><h2 id="增量性"><a href="#增量性" class="headerlink" title="增量性"></a>增量性</h2><p>对于前文的硬编码可能心存疑虑，但是我们都很清楚硬编码最多存在一小会，随着对目标描述而编写更多的测试用例，逐渐就会替换掉硬编码。</p><p>继续完善 Soundex 功能，对于现在的代码并不符 Soundex 规范，以只传递单个字符为前提，并不符合第四条即如果没有三个数字，需要补零。接下来为这个功能编写新的测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Pads with zeros to ensure three digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value pads with zeros"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>失败了：</p><pre class="line-numbers language-shell"><code class="language-shell">/home/caolei/WorkSpace/TDD_Learning/test/Catch2/TestSoundex.cpp:45: FAILED:  REQUIRE_THAT( encoded, Equals("I000") )with expansion:  "I" equals: "I000"===============================================================================test cases: 2 | 1 passed | 1 failedassertions: 2 | 1 passed | 1 failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让测试通过：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 按照 Soundex 算法转换输入的字符串内容 * * @param word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word <span class="token operator">+</span> <span class="token string">"000"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时会发现第一条用例失败了，这时因为第一条用例与 Soundex 的规则不符合，修改其断言语句已适配规则：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在有两条相似的测试仅仅数据有些差异，但是没有关系，每个测试描述一种行为。<strong>我们不仅要确保系统按预期工作，还要让每个人知道所有既定的系统行为。</strong></p><p>完整这个功能周期后，考虑重构代码。可以发现 encode 的实现有些让人迷惑，尤其是不清楚条款的人看到这种魔数组合叫人心生厌恶 😢，因此需要对其封装下，提取独立的方法配以意图明确的名字。同时跑一下测试用例确保重构的修改对于已有功能无影响。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 的规则要求进行补零     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word <span class="token operator">+</span> <span class="token string">"000"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fixture-与设置"><a href="#fixture-与设置" class="headerlink" title="fixture 与设置"></a>fixture 与设置</h2><p>在重构的时候，不仅要审阅产品代码，还要审阅测试。现在测试代码中存在一些重复的地方，每个测试用例的 GIVEN 都需要创建一个 Soundex 对象。有两种方式修改：</p><ul><li>将两个测试用例合并入一个，公用一个 GIVEN。优点是比较方便修改，缺点如果用例比较多，测试代码会很长。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第二个 WHEN 执行时会重新从 GIVEN 运行，不受前一个 WHEN 影响</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one another char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value pads with zeros"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种便是使用 class fixture 方法，GIVEN 与 WHEN 存在重复，虽然本文采用的单元测试编写风格是 BDD-ScenarioGivenWhenThen 但是对于短小的测试短如果测试名称可以描述清楚其目的，那么就没有必要太啰嗦：</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FixtureSoundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Soundex MSoundex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Pads with zeros to ensure three digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Catch2 会在运行每个测试时创建 fixture 实例。现在就可以删除测试内的局部变量 soundex。现在 Soundex 代码有些长了，是时候要把 TODO 事项解决一下。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Include/Soundex.h</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment" spellcheck="true">// !TODO: 暂时将实现也都放入同一个文件中比较方便修改，后续合适的时机抽出</span><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 条款4 要求进行补零     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word <span class="token operator">+</span> <span class="token string">"000"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//test/Catch2/TestSoundex.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Soundex.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Catch<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FixtureSoundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Soundex MSoundex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Pads with zeros to ensure three digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思索与测试驱动开发"><a href="#思索与测试驱动开发" class="headerlink" title="思索与测试驱动开发"></a>思索与测试驱动开发</h2><p>简单地说，TDD 的周期就是写一个测试，先确保测试失败，然后编码让测试通过，接着审阅代码和打磨设计（包括测试的设计），最后确保所有测试依然通过。</p><p>接下来将要处理规则 2：即在第一个字母后，用数字替换辅音。替换规则表中字母 b 对应数字 1，以此编写用例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replace consonants with appropriate numbers"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ab"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不出所料的失败，接下来便是让测试通过，然后重构功能代码。在寻求解决方案时，我们并不需要找到一个通用的方法，<strong>但是也不要使用已有的处理逻辑</strong>，例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">==</span> <span class="token string">"Ab"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"A100"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编写了这个特例，但是看起来它就像对 Ab 进行特殊处理成 A1 后的补零输出，但是我们已有 zeroPad 了，虽说特例并非错误，我们也可以用其他的测试用例来修改这个特例，这里仅仅是列举出当我想要功能向前开发时的标准，因为一直添加特例也是可行的不是么 😀。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 按照 Soundex 算法转换输入的字符串内容 * * @param word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> encoded <span class="token operator">=</span> Word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> encoded <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ops，补零出现了错误：</p><pre class="line-numbers language-shell"><code class="language-shell">/home/caolei/WorkSpace/TDD_Learning/test/Catch2/TestSoundex.cpp:43: FAILED:  REQUIRE_THAT( encoded, Equals("A100") )with expansion:  "A1000" equals: "A100"===============================================================================test cases: 3 | 2 passed | 1 failedassertions: 3 | 2 passed | 1 failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 zeroPad 方法以通过测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 安装 Soundex 条款4 要求进行补零 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> zerosNeeded <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Word <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>zerosNeeded<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在看起来不错，用例也已经通过了。但是对于 encode 方法的实现还是有些不满意，其中充斥了一些编码细节和魔数，对于不熟悉功能的其他人阅读起来是灾难的，不多废话重构它 🚀：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment" spellcheck="true">// !TODO: 暂时将实现也都放入同一个文件中比较方便修改，后续合适的实际抽出</span><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">encodedDigits</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取单词的第一个字母     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">head</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 的规则要求进行补零     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> zerosNeeded <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Word <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>zerosNeeded<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以声明性的方式组织代码，使其非常易于理解。设计中非常重要的一方面是从实现（怎么做）中分离接口（做什么），这提供了迈向更高层次设计方案的跳板。</p><blockquote><p>有时也会担心一些实现的细节并不是那么好：第一，是不是应该用 stringstream，而不是直接将字符串连接起来？第二，为什么不尽可能地用单独的 char？例如，为什么用 return words.substr(0, 1); 而非 return word.front();？第三，用 return std::string(); 不是比 return “”; 更好吗？</p><p>这些替代的代码方案可能更好。但这些都是过早优化（premature optimization）。这个时候，一个好的设计（接口一致且代码可读性高）更重要。一旦以牢靠的设计实现了正确的行为后，再考虑是否优化性能。</p></blockquote><p>先不要考虑对于性能进行优化，还是要优先考虑好的代码设计，例如消除代码中的<code>魔数</code>，取而代之一个合理名字的常量。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> size_t MaxCodeLength<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/** * @brief 安装 Soundex 的规则要求进行补零 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> zerosNeeded <span class="token operator">=</span> MaxCodeLength <span class="token operator">-</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Word <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>zerosNeeded<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 encodedDigits() 中的硬编码 <code>1</code>，需要代码将字母 b 替换成 1，而写后续还要支持对其他字符的数字转换，可以通过一个合理的函数名字替代，最终的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取首字母后其他字符转化的对应数字 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试驱动"><a href="#测试驱动" class="headerlink" title="测试驱动"></a>测试驱动</h2><p>现在要继续使用 TDD 来促使开发进度继续向前，首要考虑一点以此时驱动开发更多的辅音变换逻辑，使解决方案更加具有通用性，是应该继续在 <code>Replace consonants with appropriate numbers</code> 增加更多例子的断言判断，还是新增一个测试用例呢？</p><p>TDD 的经验法则是一个测试一个断言（参考 7.3 节，获取更多信息）。我们提倡专注测试行为，而非测试功能函数。大部分时候要遵从这一个规则。</p><p>因此对于第二个辅音编码测试并不是另一个行为，我们将它加到同一个测试用例里，同时希望当一个断言失败后其他用例可以继续执行，这里使用 CHECK 来进行检查，同时可以使用 SECTION 方式编写测试代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replace consonants with appropriate numbers"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">SECTION</span><span class="token punctuation">(</span><span class="token string">"Test to replace the consonants in the entered words with appropriate numbers"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ab"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ac"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码保证测试用例通过：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取首字母后其他字符转化的对应数字 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @param Letter * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Letter <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在再添加一个测试用例体现更多的数据输入情况：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ab"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ac"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ad"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A300"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照之前一样的步骤添加这次的功能吗？不 💣，这时就会发现功能实现代码开始有重复的逻辑产生，是时候将其重构以更加通用的实现，这里使用一个 hash 集合代替简单重复的 if 分支判断：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @param Letter * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> encodings <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该继续将其余所有的辅音转换，都以测试驱动的方式开发么，是否应该覆盖所有可能出问题的地方 ❓</p><p>请注意我们是在进行<code>测试驱动开发</code>，而非测试。TDD 着力于代码设计。测试主要用于表述你要构建的行为。TDD 过程中编写的测试大都是这个流程的附属产物。有了这些测试，在接下来改动代码时，你会更有信心。而且 TDD 的一个重要方面就是够用即可，在开发新功能即行为时，编写测试覆盖，而逻辑代码不在改变时，就不用编写测试代码了。</p><p>既然如此，那么先完成转换表：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> encodings <span class="token punctuation">{</span>    <span class="token punctuation">{</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">"4"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">"6"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于对应的测试程序 <code>Replace consonants with appropriate numbers</code> 需要思考其中的三个断言是否能增加对于此功能的特性理解，或者对特殊的行为有描述。如果没有那么就可以算作重复的测试将其删除了，最终使用断言并选一个不同的辅音来进行测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replace consonants with appropriate numbers"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ax"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果出现别的情况呢"><a href="#如果出现别的情况呢" class="headerlink" title="如果出现别的情况呢"></a>如果出现别的情况呢</h2><p>现在实现的 encodedDigit 是假定能够在 encodings 映射中找到传入的字母，之前为了以最低限度通过测试所做的假设，现在需要考虑其他的情况，即有没有可能传入的字母没有在映射中找到？发生时如何解决。</p><p>Soundex 如何解决不能识别的字母？可以通过客户或者 Wiki 百科了解到，即忽略。输入 A# 得到 A000。现在为这个行为编写一些列外的情形测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignore nonrecognition characters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A#"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码以通过测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @param Letter * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// clang-format off</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> encodings <span class="token punctuation">{</span>        <span class="token punctuation">{</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token punctuation">{</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">"4"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">"6"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// clang-format on</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> it <span class="token operator">==</span> encodings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当通过 TDD 完成一个周期的功能时，往往在重构环节就可以开始考虑完善这个功能，如同此例。现在我们可以认为针对单一字符输入为前提可以正确的进行转换了。</p><h2 id="一次只做一件事"><a href="#一次只做一件事" class="headerlink" title="一次只做一件事"></a>一次只做一件事</h2><p>当完成单一字符的转换，现在需要通过测试驱动开发出用以转换一个词末尾剩下的字母了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replaces multiple consonants with digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Acdl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>简单的办法便是除第一个字母，遍历剩下的字母并转换。但是当前的代码结构并不容易支持，可以先重构下代码。</p><p>但是请注意，<strong>一次只做一件事。测试驱动开发时，要保持每一步都不同</strong>。在写测试时，不要跑去重构。同样，在尝试让测试通过时也不要去重构。并行总是容易出错，不是么 🐛。</p><p>为了便于重构，先将我们刚才的测试注释掉，<code>[.]</code> 标识会使 Catch2 跳过这个测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replaces multiple consonants with digits"</span><span class="token punctuation">,</span> <span class="token string">"[.][SoundexEncoding]"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重构下当前解决方案。不要将整个词传入 encodedDigits()，而是将词尾（除了第一个字母外的其余字母）传入 encodedDigits()，这样遍历更加简洁。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取单词除了第一个字母外的其余字母     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">tail</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行下测试确保改动不会破话其他功能。回到 TDD 周期开始，启用被暂时禁掉的测试 <code>"Replaces multiple consonants with digits"</code> ，使其失败。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>            encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 for 循环遍历每个字母，这样不在需要对 Word 进行判空了，删除之。</p><h2 id="限制长度"><a href="#限制长度" class="headerlink" title="限制长度"></a>限制长度</h2><p>规则 4 声明 Soundex 编码结果必须是 4 个字符，为此行为增加新的测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Limits length to four characters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Dcdlb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定位问题长处超出，修复问题：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>encoding<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MaxCodeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重构下代码，更好的表达含义：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 完成字符串的 Soundex 规则编码     *     * @param Encoding     * @return true     * @return false     */</span>    <span class="token keyword">bool</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MaxCodeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="丢掉元音"><a href="#丢掉元音" class="headerlink" title="丢掉元音"></a>丢掉元音</h2><p>规则 1 说要丢掉所有的元音以及 w、h 和 y。现在为此功能添加测试用例。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignores Vowel like letters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Baeiouhycdl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"B234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行下测试发现是通过的，主要是由于 encodedDigit() 对于转换表中找不到的字母会返回空字符串。</p><p>这里需要注意下：如果没有改动类定义，测试就通过了，那背后肯定另有故事（参见 3.5），如果接下来的测试也都继续通过，那么应该考虑回滚掉代码改动。测试提前通过的原因，可能是你的步伐有点大，但这样你可能不会感受到 TDD 带来的好处。</p><h2 id="让测试自我澄清"><a href="#让测试自我澄清" class="headerlink" title="让测试自我澄清"></a>让测试自我澄清</h2><p>接下来处理两个相邻字母有相同数字编码的情况。按照规则 3，将用一个数字标识这些字母，这条规则也适用于第一个字母。先用测试描述第一个情况：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Combines duplicate encodings"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Abfcgdt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>b 和 f 都编码为 1，c 和 g 编码为 2，d 和 t 编码为 3。最终 Abfcgdt –&gt; A123。可以添加一些前置条件（precondition）断言，以帮助阅读代码的人建立这种关联。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Combines duplicate encodings"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Abfcgdt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就需要将 encodedDigit 转化成 public 接口，仁者见仁、智者见智吧，个人还是认为虽然这样更加方便了后续读取，但是代码的封装性同样重要，客户不需要的接口完全没有必要暴露出来，写个注释信息不也很好么。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取 Encoding 最后一个字符     *     * @param Encoding     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">lastDigit</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// string 初始化一个字符的方法</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳出条条框框来测试"><a href="#跳出条条框框来测试" class="headerlink" title="跳出条条框框来测试"></a>跳出条条框框来测试</h2><p>考虑重复的第二种情况，第二个字母与第一个字母重复。可以发现目前所有的测试都是以一个大写字母开始，其余都是小写，但这个算法应该是大小写无关的，这里可以先把重复的测试暂停，先处理下大小写的测试。</p><p>为了能够快速、简单地比较，Soundex 算法将类似的词编码至相同的代码。字母的大小写并不影响发音。但为了简化比较 Soundex 编码，我们将自始至终使用一样的写法。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Upper cases first letter"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 encode 将首字母大写：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">upperFront</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 返回传入的字符串首字母大写     *     * @param String     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">upperFront</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> String<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">toupper</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以修改 “Ignores Vowel like letters” 用例来确认功能：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignores Vowel like letters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"BaAeEiIoOuUhHyYcdl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"B234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>encodedDigits() 中的代码有点隐晦和难以理解。我们必须深入考虑来发现以下几点：<ol><li>许多字母没有对应的编码；</li><li>encodedDigit() 对于上述字母会返回空字符串；</li><li>将一个空字符串和 encodedDigits() 中的变量 encodings 连接起来没有任何意义。</li></ol></li></ul><p>重构一下，以便代码更加明了。将删除空字符串使用一个特殊的字符传替代，显式判断无用的字符不在进行空字符串拼接。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token function">NotADigit</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> it <span class="token operator">==</span> encodings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> NotADigit <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> encoding<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string <span class="token function">lastDigit</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> NotADigit<span class="token punctuation">;</span>    <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// string 初始化一个字符的方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来处理一个辅音大小写的测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignores case when encoding consonants"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"BCDL"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Bcdl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它声明了对”BCDL”和”Bcdl”的编码结果是一样的。也就是说，我们并不关心实际的编码是什么，只要大写的输入和小写的输入得到的结果一样就行。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取一个字符对应的数字     *     * @param Letter     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">lower</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> it <span class="token operator">==</span> encodings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> NotADigit <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 将输入的 char 字符转换为小写     *     * @param C     * @return char     */</span>    <span class="token keyword">char</span> <span class="token function">lower</span><span class="token punctuation">(</span><span class="token keyword">char</span> C<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">tolower</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h2><p>现在开始处理第二个字符与第一个字符相同的情况。这个就是促使我们先将算法改写为大小写无关的，现在编写这个行为测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Combines duplicate codes when 2nd letter duplicates 1st"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Bbcd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"B230"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现方法也很简单，就是将需要编码的词从之前的之将词尾传入 encodedDigits() 改为将整个词都传入其中，使其可以先分析首字母转换完成后的数字，然后比对第二个字母是否需要丢弃：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">upperFront</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">tail</span><span class="token punctuation">(</span><span class="token function">encodedDigits</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重构至单一责任的函数"><a href="#重构至单一责任的函数" class="headerlink" title="重构至单一责任的函数"></a>重构至单一责任的函数</h2><p>是时候考虑重构了，考虑单一责任原则，函数 encodedDigits() 变得很复杂，它通过两个步骤完成算法：</p><ol><li>它首先将首字母的编码追加至变量 encoding 中；</li><li>然后遍历剩下的字母，追加结果至 encoding。</li></ol><p>可以将 encodedDigits() 中的两个步骤提取成两个单独的函数，每个函数各自包含一个抽象概念的实现细节。如此，encodedDigits() 中的代码只是声明了解决方案的策略。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token function">encodeHead</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> Word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeTail</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> Word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 对词首字母进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeHead</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 对词尾字符进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeTail</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> <span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 encodeTail() 中的 for 循环体提取出来。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 对词尾字符进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeTail</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> <span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isComplete</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">,</span> letter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 翻译单一字符 letter 并拼接到 Encoding     *     * @param Encoding     * @param Letter     */</span>    <span class="token keyword">void</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有许多优化，详情可以看看笔记配套的程序代码。</p><h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>那元音怎么办呢？规则 3 说被一个元音（不是 h 或 w ）分开的相同编码，应该编码两次。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Does not combine duplicate encodings separate by vowels"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Jbob"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"J110"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改了 encodeLetter() 中的条件表达式，在不是重复编码或最后一个字母是元音的情况下，追加一个数字。这个声明也敦促了一些其他的相应改动。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 对词尾字符进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeTail</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">1u</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isComplete</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">,</span> Word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Word<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 翻译单一字符 letter 并拼接到 Encoding     *     * @param Encoding     * @param Letter     */</span>    <span class="token keyword">void</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">char</span> Letter<span class="token punctuation">,</span> <span class="token keyword">char</span> LastLetter<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isDuplicateLetter</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">,</span> digit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isVowel</span><span class="token punctuation">(</span>LastLetter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 判断是否是元音字符     *     * @param Letter     * @return true     * @return false     */</span>    <span class="token keyword">bool</span> <span class="token function">isVowel</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"aeiouy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">lower</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="漏了什么测试码"><a href="#漏了什么测试码" class="headerlink" title="漏了什么测试码"></a>漏了什么测试码</h2><p>我们很少拥有所有的规范。很少有人会如此幸运。即便是 Soundex 的规则，看似完整，实际却不能蕴含所有情形。在编程过程中，一些测试或代码实现经常会激发我们进行其他方面的思考。一般而言，要么把这些思考结果记在脑子里，要么写到一个列表或记事本中。下面就是对 Soundex 进行思考而得到的列表。</p><ul><li>若给定的词中含有分隔符，如句点（例如，Mr.Smith），该怎么办？应该忽略它们（就像现在做的这样），抛出一个异常（假定客户应该把词合理地分好），还是做些其他操作？说到异常，怎样以测试驱动的方法在代码中加入异常处理？在 4.4.5 节中，你将学到怎样设计期望抛出异常的测试。</li><li>空字符串该怎样编码?（或者说，可以假定不会接收到一个空字符串输入吗？）</li><li>该怎样处理非英语字母中的辅音（如 ñ）？Soundex 算法依然适用吗？isVowel()函数需要支持带变音符的元音吗？</li></ul><p>如何解决这些问题应当适时的做出自己的决定，最好的方法往往时问问客户。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一个解决方案应具备的一些重要特征。</p><ul><li>它实现了客户的需求。如果没有，那么不管怎样，它都不是好的解决方案。在 TDD 中，你编写的测试能够帮助你了解你的解决方案是不是客户要的。性能可能是众多客户需求中的一项。你的一部分职责就是理解他们的性能需求，如果没必要的话，就不要花费时间去做性能优化。</li><li>它可以工作。如果一个解决方案有大量的缺陷，那么构建得再优雅，也不是好的解决方案。TDD 可以帮助确定我们交付的软件能以期望的方式工作。TDD 不是银弹。你交付的软件依然会有缺陷，所以照样需要许多其他方式的测试。但是，TDD 会让你发布的代码包含非常少的缺陷。</li><li>它易于理解。对于编写得不好的代码，每个人都需要花费大量的时间去理解。TDD 让你可以安全地重新组织代码以提高可读性。</li><li>它易于修改。通常，容易修改的代码意味着高质量的设计。TDD 使你可以持续地修改，以保持设计的高质量。</li></ul><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>至此，便完成了一个实际的 TDD 过程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>TDD 的践行步骤：<ol><li>编译一个最基本单元功能的测试代码。</li><li>测试失败。</li><li>实现功能代码<strong>最低限度</strong>使得测试代码通过。</li><li>测试成功。</li><li>goto ⬆ 第一步。</li><li>TDD 的各个周期都会使用重构来审阅设计。</li></ol></li></ul><h3 id="践行步骤解析"><a href="#践行步骤解析" class="headerlink" title="践行步骤解析"></a>践行步骤解析</h3><ul><li><p>编写最基本的单元功能测试代码：请谨记我们践行的是 TDD，而非单纯的测试工作，应该测试的是代码行为，当向测试代码添加重复的断言语句时应该自问下这个断言是否可以提升对测试含义以及功能的理解。</p></li><li><p>测试失败：每次以最小的步伐向前推进，引起问题后就去解决掉它。</p></li><li><p>实现功能代码最低限度的使得测试代码通过：</p><ul><li><code>最低限度</code> 即刚刚好满足测试用例所需要的功能，即使是通过特例来完成的。就像 Soundex 中出现过多次特例一样，经常使用特例的方法来快速通过测试代码。</li><li>但是请注意特例也不是万能的，就像文档中我所讲的 <strong>不要使用已有的处理逻辑</strong>，避免使用大量的特例浪费时间，当第二次添加的测试用例，就不可以再使用上一次一样的特例方法了，应该寻求更加通用的实现方法。这一步不仅仅是重构，也是作为我们代码开发前进的动力，是对行为的一种完善。</li></ul></li><li><p>测试成功：必然保证之前失败的用例要正确的通过，且没有影响已有的用例。</p></li><li><p>审视代码进行重构：重构不仅仅是某个单一步骤执行，而是当历经 TDD 的各个周期时，我们会使用重构来审阅设计，同时修复出现的所有问题。重构的主要关注点是提升表达能力，去除重复代码。就代码的可维护性来说，这两个点最有裨益。</p></li><li><p>一次只进行一件事：当发现一个行为的实现可能需要先重构下代码才能更方便的支持，那么就要先将这个行为失败的测试描述先注释掉。当完成重构后再打开并完成。<strong>一次只做一件事。测试驱动开发时，要保持每一步都不同</strong>。再写测试时，不要跑去重构。同样，在尝试让测试通过时也不要去重构。</p></li><li><p>如果出现并未主动实现对应行为代码，新增加的测试用例确成功了这时就要警惕：如果接下来的测试也都继续通过，那么应该考虑回滚掉代码改动。测试提前通过的原因，可能是你的步伐有点大，但这样你可能不会感受到 TDD 带来的好处。</p></li></ul><hr><ul><li>一个解决方案应具备的一些重要特征。<ul><li>它实现了客户的需求。如果没有，那么不管怎样，它都不是好的解决方案。在 TDD 中，你编写的测试能够帮助你了解你的解决方案是不是客户要的。性能可能是众多客户需求中的一项。你的一部分职责就是理解他们的性能需求，如果没必要的话，就不要花费时间去做性能优化。</li><li>它可以工作。如果一个解决方案有大量的缺陷，那么构建得再优雅，也不是好的解决方案。TDD 可以帮助确定我们交付的软件能以期望的方式工作。TDD 不是银弹。你交付的软件依然会有缺陷，所以照样需要许多其他方式的测试。但是，TDD 会让你发布的代码包含非常少的缺陷。</li><li>它易于理解。对于编写得不好的代码，每个人都需要花费大量的时间去理解。TDD 让你可以安全地重新组织代码以提高可读性。</li><li>它易于修改。通常，容易修改的代码意味着高质量的设计。TDD 使你可以持续地修改，以保持设计的高质量。</li></ul></li></ul><h3 id="TDD-Q-amp-A"><a href="#TDD-Q-amp-A" class="headerlink" title="TDD Q&amp;A"></a>TDD Q&amp;A</h3><ol><li><p>有时也会担心一些实现的细节并不是那么好，是否应该再重构是考虑优化？</p><ul><li>再未完全实现功能设计之前，这些都属于过早优化。这个时候一个好的设计更重要，一旦以牢靠的设计实现了正确的行为后，并且有完整的单元测试来给你提供勇气后再进行优化吧！</li></ul></li><li><p>没有被单元测试代码所描述的行为算正确还是错误？</p><ul><li>任何时候，一个完整的测试集合声明了系统中期望的行为。这里蕴含着一个潜台词：如果一个行为没有对应的测试来描述，那这个行为要么不存在，要么不是期望的（或者测试本身没有尽到描述行为的职责）。</li></ul></li><li><p>对于有大量的数据细节测试，例如 Soundex 中的辅音表，是否需要将所有的表信息都进行单元测试覆盖？</p><ul><li>请注意我们实在进行<code>测试驱动开发</code>，而非测试。TDD 着力于代码设计。测试主要用于表述你要构建的行为。TDD 过程中编写的测试大都是这个流程的附属产物。有了这些测试，在接下来改动代码时，你会更有信心。而且 TDD 的一个重要方面就是够用即可，在开发新功能即行为时，编写测试覆盖，而逻辑代码不在改变时，就不用编写测试代码了。</li><li>也就是说如果你读取这个表数据的行为单一，那么它就不需要全部都覆盖到。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）测试驱动开发技巧--环境设置</title>
      <link href="/2022/06/02/yi-ce-shi-qu-dong-kai-fa-ji-qiao-huan-jing-she-zhi/"/>
      <url>/2022/06/02/yi-ce-shi-qu-dong-kai-fa-ji-qiao-huan-jing-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新开个坑，本系列主要是<code>《C++程序设计实践与技巧：测试驱动开发》</code>一书的学习记录，由于笔记是在 2020 年就完成了。本次将其进行了一些细节修订、图片优化后同步到 blog 上，因此有些时间会对不上，不要在意这些细节无伤大雅 😂。</p><blockquote><p>图床我是自建在 <a href="https://github.com/HATTER-LONG/Resource">github</a> 上用的 CDN 加速，如果有图片刷不出来的情况可以邮件我，看到了我会处理的。</p></blockquote><blockquote><p>或者直接看<a href="https://github.com/HATTER-LONG/NoteBook_ModernCppProgrammingWithTDD">我的笔记</a>也可以，觉得不错的来个 star 吧 😊。</p></blockquote><h2 id="实例程序"><a href="#实例程序" class="headerlink" title="实例程序"></a>实例程序</h2><p>书中主要使用了两种测试框架 GMock 与 CppUTest，但是学习过程中希望 Catch 替换掉 CppUTest 与 GMock 并存的方式。</p><ul><li>Wait，没想到上来就有个大差异，最近 Catch2 已经发布 v3 了。一次史无前例的破坏性更新，本文还是继续使用 v2 lastest 稳定版本，如果想要尝试切换参考官方给出的<a href="https://github.com/catchorg/Catch2/blob/devel/docs/migrate-v2-to-v3.md#top">移植建议</a>。</li></ul><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/TDD/01_codeexample.png" alt="code_example"></p><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>主要在 Ubuntu20.04 system 下，使用 Clang-11 为编译器前端，Gun 的 ld 为连接器。</p><ul><li>两年过去了，我也抛弃了 Ubuntu 改用 Mac 了。你变成了你最讨厌的样子。</li><li>话说 LLVM 都更新到 14 了（此文编写日），<code>不过不用担心编译器问题</code>，本系列的代码没有需要特殊语法的地方，即使切换了 Catch2 v3 也只需要 C++14 标准即可。不过我还是要说 LLVM 永远的神。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">~/WorkSpace❯ ls /bin/ld -llrwxrwxrwx 1 root root 19 Apr  7  2020 /bin/ld -> x86_64-linux-gnu-ld~/WorkSpace❯ clang -vclang version 11.0.0 (https://github.com/llvm/llvm-project.git 0160ad802e899c2922bc9b29564080c22eb0908c)Target: x86_64-unknown-linux-gnuThread model: posixInstalledDir: /usr/binFound candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/8Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/9Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/8Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9Selected GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/9Candidate multilib: .;@m64Selected multilib: .;@m64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>使用 CMake 支持跨平台编译。</p><pre class="line-numbers language-shell"><code class="language-shell">~/WorkSpace❯ cmake -versioncmake version 3.16.3CMake suite maintained and supported by Kitware (kitware.com/cmake).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Google-Mock-amp-Catch2"><a href="#Google-Mock-amp-Catch2" class="headerlink" title="Google Mock &amp; Catch2"></a>Google Mock &amp; Catch2</h2><p>安装不在赘述，Google Mock 的版本信息如下：</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/lib/cmake/GTest❯ lsGTestConfig.cmake  GTestConfigVersion.cmake  GTestTargets-noconfig.cmake  GTestTargets.cmake/usr/local/lib/cmake/GTest❯ dpkg -l | grep googletestii  googletest                             1.10.0-2                            all          Google's C++ test framework sources<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Catch2 版本信息如下：</p><pre class="line-numbers language-cxx"><code class="language-cxx">/usr/local/lib/cmake/Catch2❯ lsCatch.cmake         Catch2ConfigVersion.cmake     Catch2Targets.cmake  ParseAndAddCatchTests.cmakeCatch2Config.cmake  Catch2Targets-noconfig.cmake  CatchAddTests.cmake/usr/local/lib/cmake/Catch2❯ vim Catch2ConfigVersion.cmake>>> set(PACKAGE_VERSION "2.13.3")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搭建运行-GMock-与-Catch2-的环境"><a href="#搭建运行-GMock-与-Catch2-的环境" class="headerlink" title="搭建运行 GMock 与 Catch2 的环境"></a>搭建运行 GMock 与 Catch2 的环境</h3><p>详见我的<a href="https://github.com/HATTER-LONG/TDD_Learning">项目</a>。</p><ul><li>快瞧瞧这个青涩的项目，README 写的一塌糊涂，给个 star 吧，让我知道有人在看有动力翻新下。</li></ul><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>不打算使用 JsonCPP 切换为开源的 <code>Json for modern c++</code>。</p><ul><li>爱用哪个都行，换成 MDJSON 纯粹是喜欢 Only Header。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">Install the project...-- Install configuration: ""-- Up-to-date: /usr/local/include-- Installing: /usr/local/include/nlohmann-- Installing: /usr/local/include/nlohmann/json.hpp-- Installing: /usr/local/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake-- Installing: /usr/local/lib/cmake/nlohmann_json/nlohmann_jsonConfigVersion.cmake-- Installing: /usr/local/lib/cmake/nlohmann_json/nlohmann_jsonTargets.cmake-- Installing: /usr/local/lib/pkgconfig/nlohmann_json.pc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libcurl"><a href="#libcurl" class="headerlink" title="libcurl"></a>libcurl</h2><p>开源代码安装</p><pre class="line-numbers language-shell"><code class="language-shell">~/Tools/curl-7.74.0/build❯ sudo make install -j32[ 73%] Built target libcurl[100%] Built target curlInstall the project...-- Install configuration: ""-- Installing: /usr/local/lib/libcurl.a-- Installing: /usr/local/bin/curl-- Installing: /usr/local/bin/curl-config-- Installing: /usr/local/lib/pkgconfig/libcurl.pc-- Up-to-date: /usr/local/include/curl-- Up-to-date: /usr/local/include/curl/curl.h-- Up-to-date: /usr/local/include/curl/curlver.h-- Up-to-date: /usr/local/include/curl/easy.h-- Up-to-date: /usr/local/include/curl/mprintf.h-- Up-to-date: /usr/local/include/curl/multi.h-- Up-to-date: /usr/local/include/curl/options.h-- Up-to-date: /usr/local/include/curl/stdcheaders.h-- Up-to-date: /usr/local/include/curl/system.h-- Up-to-date: /usr/local/include/curl/typecheck-gcc.h-- Up-to-date: /usr/local/include/curl/urlapi.h-- Old export file "/usr/local/lib/cmake/CURL/CURLTargets.cmake" will be replaced.  Removing files [/usr/local/lib/cmake/CURL/CURLTargets-noconfig.cmake].-- Installing: /usr/local/lib/cmake/CURL/CURLTargets.cmake-- Installing: /usr/local/lib/cmake/CURL/CURLTargets-noconfig.cmake-- Installing: /usr/local/lib/cmake/CURL/CURLConfigVersion.cmake-- Installing: /usr/local/lib/cmake/CURL/CURLConfig.cmake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h2><p>Boost 直接通过 apt-get 安装管理：</p><ul><li>被 apt 版本管理折磨的退坑，是我不配 😭。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">~/Tools❯ dpkg -l | grep boostii  libboost-atomic1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        atomic data types, operations, and memory ordering constraintsii  libboost-atomic1.71.0:amd64            1.71.0-6ubuntu6                     amd64        atomic data types, operations, and memory ordering constraintsii  libboost-chrono1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        C++ representation of time duration, time point, and clocksii  libboost-chrono1.71.0:amd64            1.71.0-6ubuntu6                     amd64        C++ representation of time duration, time point, and clocksii  libboost-container1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        C++ library that implements several well-known containers - dev filesii  libboost-container1.71.0:amd64         1.71.0-6ubuntu6                     amd64        C++ library that implements several well-known containersii  libboost-context1.71-dev:amd64         1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-context1.71.0:amd64           1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-coroutine1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-coroutine1.71.0:amd64         1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-date-time1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        set of date-time libraries based on generic programming conceptsii  libboost-date-time1.71.0:amd64         1.71.0-6ubuntu6                     amd64        set of date-time libraries based on generic programming conceptsii  libboost-exception1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        library to help write exceptions and handlersii  libboost-fiber1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        cooperatively-scheduled micro-/userland-threadsii  libboost-fiber1.71.0:amd64             1.71.0-6ubuntu6                     amd64        cooperatively-scheduled micro-/userland-threadsii  libboost-filesystem1.71-dev:amd64      1.71.0-6ubuntu6                     amd64        filesystem operations (portable paths, iteration over directories, etc) in C++ii  libboost-filesystem1.71.0:amd64        1.71.0-6ubuntu6                     amd64        filesystem operations (portable paths, iteration over directories, etc) in C++ii  libboost-graph-parallel1.71-dev        1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-graph-parallel1.71.0          1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-graph1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-graph1.71.0:amd64             1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-iostreams1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        Boost.Iostreams Library development filesii  libboost-iostreams1.71.0:amd64         1.71.0-6ubuntu6                     amd64        Boost.Iostreams Libraryii  libboost-locale1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        C++ facilities for localizationii  libboost-locale1.71.0:amd64            1.71.0-6ubuntu6                     amd64        C++ facilities for localizationii  libboost-log1.71-dev                   1.71.0-6ubuntu6                     amd64        C++ logging libraryii  libboost-log1.71.0                     1.71.0-6ubuntu6                     amd64        C++ logging libraryii  libboost-math1.71-dev:amd64            1.71.0-6ubuntu6                     amd64        Boost.Math Library development filesii  libboost-math1.71.0:amd64              1.71.0-6ubuntu6                     amd64        Boost.Math Libraryii  libboost-mpi-python1.71-dev            1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI), Python Bindingsii  libboost-mpi-python1.71.0              1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI), Python Bindingsii  libboost-mpi1.71-dev                   1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI)ii  libboost-mpi1.71.0                     1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI)ii  libboost-numpy1.71-dev                 1.71.0-6ubuntu6                     amd64        Boost.Python NumPy extensions development filesii  libboost-numpy1.71.0                   1.71.0-6ubuntu6                     amd64        Boost.Python NumPy extensionsii  libboost-program-options1.71-dev:amd64 1.71.0-6ubuntu6                     amd64        program options library for C++ii  libboost-program-options1.71.0:amd64   1.71.0-6ubuntu6                     amd64        program options library for C++ii  libboost-python1.71-dev                1.71.0-6ubuntu6                     amd64        Boost.Python Library development filesii  libboost-python1.71.0                  1.71.0-6ubuntu6                     amd64        Boost.Python Libraryii  libboost-random1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        Boost Random Number Libraryii  libboost-random1.71.0:amd64            1.71.0-6ubuntu6                     amd64        Boost Random Number Libraryii  libboost-regex1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        regular expression library for C++ii  libboost-regex1.71.0:amd64             1.71.0-6ubuntu6                     amd64        regular expression library for C++ii  libboost-serialization1.71-dev:amd64   1.71.0-6ubuntu6                     amd64        serialization library for C++ii  libboost-serialization1.71.0:amd64     1.71.0-6ubuntu6                     amd64        serialization library for C++ii  libboost-stacktrace1.71-dev:amd64      1.71.0-6ubuntu6                     amd64        library to capture and print stack traces - development filesii  libboost-stacktrace1.71.0:amd64        1.71.0-6ubuntu6                     amd64        library to capture and print stack tracesii  libboost-system1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        Operating system (e.g. diagnostics support) libraryii  libboost-system1.71.0:amd64            1.71.0-6ubuntu6                     amd64        Operating system (e.g. diagnostics support) libraryii  libboost-test1.71-dev:amd64            1.71.0-6ubuntu6                     amd64        components for writing and executing test suitesii  libboost-test1.71.0:amd64              1.71.0-6ubuntu6                     amd64        components for writing and executing test suitesii  libboost-thread1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        portable C++ multi-threadingii  libboost-thread1.71.0:amd64            1.71.0-6ubuntu6                     amd64        portable C++ multi-threadingii  libboost-timer1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        C++ wall clock and CPU process timersii  libboost-timer1.71.0:amd64             1.71.0-6ubuntu6                     amd64        C++ wall clock and CPU process timersii  libboost-type-erasure1.71-dev:amd64    1.71.0-6ubuntu6                     amd64        C++ runtime polymorphism based on conceptsii  libboost-type-erasure1.71.0:amd64      1.71.0-6ubuntu6                     amd64        C++ runtime polymorphism based on conceptsii  libboost-wave1.71-dev:amd64            1.71.0-6ubuntu6                     amd64        C99/C++ preprocessor libraryii  libboost-wave1.71.0:amd64              1.71.0-6ubuntu6                     amd64        C99/C++ preprocessor libraryii  libboost1.71-all-dev                   1.71.0-6ubuntu6                     amd64        Boost C++ Libraries development files (ALL)ii  libboost1.71-dev:amd64                 1.71.0-6ubuntu6                     amd64        Boost C++ Libraries development filesii  libboost1.71-doc                       1.71.0-6ubuntu6                     all          Boost.org libraries documentation placeholderii  libboost1.71-tools-dev                 1.71.0-6ubuntu6                     amd64        Boost C++ Libraries development tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要展示了后边文章中所需要的一些三方库、安装等示例，继续吐槽 C++ 没有统一的包管理器（对着 Cargo 流口水）。</p><ul><li>看到以前写的笔记还是感慨良多。有时看书实在太功利了，总想这去读对自己有用的，但是当能判断出这书有用了其实反而对于知识、眼界的扩展是有限的。</li><li>在阅读本书时，无论工作内容还是什么其他方面完全没有测试代码的意识，在钢丝上行走小心翼翼的维护者脆弱的代码。随着经验的增加越来越能体会到测试代码的重要性，已经记不得当时学习这本书的动机了，但是以现在的眼光来看当时的决定对我的帮助无疑是巨大的。</li><li>最后引用一句忘记了从那本书看到的话：你读过的每一本书，最后都会变成你的血与肉。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/05/28/di-yi-pian-bo-ke/"/>
      <url>/2022/05/28/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="博客功能测试"><a href="#博客功能测试" class="headerlink" title="博客功能测试"></a>博客功能测试</h1><h2 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h2><ol><li>C++ 代码：</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">TFactory</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">REQUIRES</span><span class="token punctuation">(</span>m_mutex<span class="token punctuation">)</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> id<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-</span><span class="token operator">></span>    <span class="token keyword">typename</span> FactoryDetails<span class="token operator">::</span>get_interface_const_ref<span class="token operator">&lt;</span>TFactory<span class="token operator">></span><span class="token operator">::</span>type<span class="token punctuation">{</span>    tComponentContItr componentPtr <span class="token operator">=</span> findComponentFactory<span class="token operator">&lt;</span>TFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>componentPtr <span class="token operator">!=</span> m_componentCont<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> factory <span class="token operator">=</span> componentPtr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">!=</span> componentPtr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">using</span> tInterface <span class="token operator">=</span>                <span class="token keyword">typename</span> FactoryDetails<span class="token operator">::</span>get_interface<span class="token operator">&lt;</span>TFactory<span class="token operator">></span><span class="token operator">::</span>type<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>tInterface<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>factory<span class="token operator">-</span><span class="token operator">></span>second<span class="token operator">-</span><span class="token operator">></span><span class="token function">getPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token function">FactoryNotRegisteredEx</span><span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span>TFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Rust 代码：</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Cacher<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token keyword">where</span>    T<span class="token punctuation">:</span> <span class="token function">Fn</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> u32<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">new</span><span class="token punctuation">(</span>calculation<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">-></span> Cacher<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        Cacher <span class="token punctuation">{</span>            calculation<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> None<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token punctuation">{</span>            <span class="token function">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">,</span>            None <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>calculation<span class="token punctuation">)</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                v            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> simulated_user_specified_value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> simulated_random_number <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token function">generate_workout</span><span class="token punctuation">(</span>simulated_user_specified_value<span class="token punctuation">,</span> simulated_random_number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">generate_workout</span><span class="token punctuation">(</span>intensity<span class="token punctuation">:</span> u32<span class="token punctuation">,</span> random_number<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客功能 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
