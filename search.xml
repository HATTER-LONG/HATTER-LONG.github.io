<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>（八）Rust_泛型与Trait</title>
      <link href="/2022/07/24/ba-rust-fan-xing-yu-trait/"/>
      <url>/2022/07/24/ba-rust-fan-xing-yu-trait/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型与-Trait"><a href="#泛型与-Trait" class="headerlink" title="泛型与 Trait"></a>泛型与 Trait</h1><h2 id="重复代码提取"><a href="#重复代码提取" class="headerlink" title="重复代码提取"></a>重复代码提取</h2><ol><li><p>重复代码危害：</p><ul><li>容易出错。</li><li>需求变更时需要在多处进行更改。</li></ul></li><li><p>消除重复：提取函数。</p><ul><li>识别重复代码。</li><li>提取重复代码到函数体中，并在函数签名汇总指定函数到输入和返回值。</li><li>将重复的代码使用函数调用进行替代。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">largest</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>i32<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> i32 <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list <span class="token punctuation">{</span>        <span class="token keyword">if</span> item <span class="token operator">></span> largest <span class="token punctuation">{</span>            largest <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    largest<span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest number is {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ol><li><p>泛型：提高代码<code>复用</code>能力：</p><ul><li>处理重复代码的问题。</li></ul></li><li><p>泛型是具体类型或其它属性的抽象代替：</p><ul><li>你编写的代码不是最终的代码，而是一种模版，里面有一些<code>占位符</code>。</li><li>编译器在编译时将占位符替换为具体的类型。</li><li><code>fn largest&lt;T&gt;(list:&amp;[T])-&gt;T{...}</code></li></ul></li><li><p>函数定义中的泛型：</p><ul><li>泛型函数包括：参数类型与返回类型。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> largest<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> T <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list <span class="token punctuation">{</span>        <span class="token keyword">if</span> item <span class="token operator">></span> largest <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 由于泛型不清楚具体类型，需要指定比较函数才可以进行比较，应用到 trait</span>            largest <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    largest<span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest number is {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> char_list <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>char_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest char is {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Struct 定义中的泛型：</p><ul><li>可以使用多个泛型类型参数：<ul><li>参数太多往往意味着需要重构为更多个更小的单元。</li></ul></li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">struct</span> Point<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义 T、U 支持不同类型传入</span>    x<span class="token punctuation">:</span> T<span class="token punctuation">,</span>    y<span class="token punctuation">:</span> U<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">test_template_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> integer <span class="token operator">=</span> Point <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> float <span class="token operator">=</span> Point <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> diff <span class="token operator">=</span> Point <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Enum 定义中的泛型：</p><ul><li>可以让枚举的编译持有泛型数据类型：<ul><li>例如 <code>Option&lt;T&gt;, Result&lt;T, E&gt;</code>。</li></ul></li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Option<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Some</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>    None<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Result<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Err</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法定义中的泛型：</p><ul><li>为 struct 或 enum 实现方法的时候，可在定义中使用泛型。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> PointI<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>T <span class="token punctuation">{</span>        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span> PointI<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 偏特化</span>    <span class="token keyword">fn</span> <span class="token function">xi32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>i32 <span class="token punctuation">{</span>        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">test_template_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> integer <span class="token operator">=</span> PointI <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"p.x = {}"</span><span class="token punctuation">,</span> integer<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>struct 里的泛型类型参数可以和方法的泛型类型参数不同。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">struct</span> Point<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> T<span class="token punctuation">,</span>    y<span class="token punctuation">:</span> U<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> Point<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> mixup<span class="token operator">&lt;</span>V<span class="token punctuation">,</span> W<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> Point<span class="token operator">&lt;</span>V<span class="token punctuation">,</span> W<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Point<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> W<span class="token operator">></span> <span class="token punctuation">{</span>        Point <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">test_template_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> Point <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> Point <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">mixup</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"p3.x = {}, p3.y = {}"</span><span class="token punctuation">,</span> p3<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p3<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//p3.x = 5, p3.y = c</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>泛型代码的性能：</p><ul><li>使用泛型的代码和使用具体类型的代码运行速度是一样的。</li><li>单态化（monomorphization）：在编译时将泛型替换成具体类型的过程。</li></ul></li></ol><h2 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h2><ol><li>Trait 告诉 Rust 编译器，某种类型具有哪些并且可以与其他类型共享的功能。<ul><li>Trait：抽象的定义共享行为。</li><li>Trait 与其他语言的接口（interface）类似，但有些区别。</li></ul></li><li>Trait bounds（约束）：泛型类型参数指定为实现了特定行为的类型。</li></ol><h3 id="定义-Trait"><a href="#定义-Trait" class="headerlink" title="定义 Trait"></a>定义 Trait</h3><ol><li><p>Trait 的定义：把方法签名放在一起，来定义实现某种目的所必须的一组行为。</p><ul><li>关键字：trait。</li><li>只有方法签名，没有具体实现。</li><li>trait 可以有多个方法：每个方法签名占一行，以 <code>;</code> 结尾。</li><li>实现该 trait 的类型必须提供具体的方法实现。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> Summary <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String<span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function">summarize1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在类型上实现 trait：</p><ul><li>与为类型实现方法类似。</li><li>不同之处：<ul><li><code>impl Xxxx for Tweet {....}</code>。</li><li>在 impl 的块里，需要对 Trait 里的方法签名进行具体的实现。</li></ul></li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token comment" spellcheck="true">// trait_demo/lib.rs</span><span class="token keyword">pub</span> <span class="token keyword">trait</span> Summary <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> NewArticle <span class="token punctuation">{</span>    <span class="token keyword">pub</span> headline<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">pub</span> location<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> String<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> Summary <span class="token keyword">for</span> NewArticle <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>        <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"{}, by {} ({})"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>location<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> Tweet <span class="token punctuation">{</span>    <span class="token keyword">pub</span> username<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">pub</span> reply<span class="token punctuation">:</span> bool<span class="token punctuation">,</span>    <span class="token keyword">pub</span> retweet<span class="token punctuation">:</span> bool<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> Summary <span class="token keyword">for</span> Tweet <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>        <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"{}: {}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// trait_demo/main.rs</span><span class="token keyword">use</span> trait_demo<span class="token punctuation">:</span><span class="token punctuation">:</span>Summary<span class="token punctuation">;</span><span class="token keyword">use</span> trait_demo<span class="token punctuation">:</span><span class="token punctuation">:</span>Tweet<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> Tweet <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"horse_ebooks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"of course, as you probably alread know, people"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        reply<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>        retweet<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"one new tweet: {}"</span><span class="token punctuation">,</span> tweet<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在某个类型上允许实现某个 trait 是有约束的：</p><ul><li>这个类型或这个 trait 是在本地 crate 里定义的。</li><li>无法为外部类型来实现外部的 trait。<ul><li>这个限制是程序属性的一部分（也就是一致性）。</li><li>更具体说属于孤儿原则：即父类型不存在。</li><li>此规则确保其他人的代码不能破外当前的代码，反之亦然。</li><li>如果没有这个规则，两个 crate 可以为同一类型实现同一 trait，Rust 就不知道应该使用哪个实现了。</li></ul></li></ul></li><li><p>默认实现：默认实现的方法可以调用 trait 中其他的方法，即使这些方法没有默认实现。</p><ul><li>注意：无法从方法的重写实现里面调用默认的实现。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> Summary <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">summarize_author</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String<span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 默认实现的 trait，并且可以调用其他的 trait</span>        <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"(Read more from {} ...)"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">summarize_author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">...</span><span class="token keyword">impl</span> Summary <span class="token keyword">for</span> NewArticle <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fn summarize(&amp;self) -> String { // 使用默认的 trait</span>    <span class="token comment" spellcheck="true">//     format!("{}, by {} ({})", self.headline, self.author, self.location)</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">fn</span> <span class="token function">summarize_author</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>        <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"@{}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trait-作为参数"><a href="#trait-作为参数" class="headerlink" title="trait 作为参数"></a>trait 作为参数</h3><ol><li><p>使用 <code>impl Trait</code> 语法：适用于简单情况。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> Summary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>Trait bound</code> 语法：可用于复杂情况。</p><ul><li><code>impl Trait</code> 语法是 <code>Trait bound</code> 的语法糖。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> notify_bound<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> Summary<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>+</code> 指定多个 <code>Trait bound</code>。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">notify_mix</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> Summary <span class="token operator">+</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Display<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> notify_bound_mix<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> Summary <span class="token operator">+</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Display<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Trait bound</code> 使用 where 子句。</p><ul><li>在方法签名的后边使用 where 子句。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> notify_bound_mulit_mix<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> Summary <span class="token operator">+</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Display<span class="token punctuation">,</span> U<span class="token punctuation">:</span> Clone <span class="token operator">+</span> core<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Debug<span class="token operator">></span><span class="token punctuation">(</span>    a<span class="token punctuation">:</span> T<span class="token punctuation">,</span>    _b<span class="token punctuation">:</span> U<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> notify_bound_mulit_mix_where<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> _b<span class="token punctuation">:</span> U<span class="token punctuation">)</span> <span class="token punctuation">-></span> String<span class="token keyword">where</span>    T<span class="token punctuation">:</span> Summary <span class="token operator">+</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Display<span class="token punctuation">,</span>    U<span class="token punctuation">:</span> Clone <span class="token operator">+</span> core<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Debug<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! {}"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="使用-Trait-作为返回类型"><a href="#使用-Trait-作为返回类型" class="headerlink" title="使用 Trait 作为返回类型"></a>使用 Trait 作为返回类型</h3><ol><li><p><code>impl Trait</code> 语法。</p><ul><li>注意：impl Trait 只能返回确定的同一种类型，返回可能不同类型的代码会报错。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">notify_return_trait</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> Summary <span class="token punctuation">{</span>    NewArticle <span class="token punctuation">{</span>        headline<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"headline str"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"content text"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        author<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"author info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        location<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"location info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 接口中只能返回一种 Trait，类似继承的派生类不会强转为父类</span>    <span class="token comment" spellcheck="true">// if(xxx)</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//     return tweetinfo will error</span>    <span class="token comment" spellcheck="true">// }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> largest<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> PartialOrd <span class="token operator">+</span> Clone<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> T <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> list <span class="token punctuation">{</span>        <span class="token keyword">if</span> item <span class="token operator">></span> <span class="token operator">&amp;</span>largest <span class="token punctuation">{</span>            largest <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    largest<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//or</span><span class="token keyword">fn</span> largest2<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> PartialOrd <span class="token operator">+</span> Clone<span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>T <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> list<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> item <span class="token operator">></span> largest <span class="token punctuation">{</span>            largest <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    largest<span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest number is {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest number is {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>使用 Trait Bound 有条件的实现方法：</p><ul><li>在使用泛型类型参数的 impl 块上使用 Trait bound，我们可以有条件的为实现了特定 Trait 的类型来实现方法。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">struct</span> Pair<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> T<span class="token punctuation">,</span>    y<span class="token punctuation">:</span> T<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Pair<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">,</span> y<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">-></span> Self <span class="token punctuation">{</span>        Self <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token punctuation">:</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fmt<span class="token punctuation">:</span><span class="token punctuation">:</span>Display <span class="token operator">+</span> PartialOrd<span class="token operator">></span> Pair<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">cmp_display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">>=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest member is x = {}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The largest member is x = {}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以为实现了其他 Trait 的任意类型有条件的实现某个 Trait。</li><li>为满足 Trait Bound 的所有类型上实现 Trait 叫做覆盖实现（blanket implementations）。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（七）Rust_错误处理</title>
      <link href="/2022/07/24/qi-rust-cuo-wu-chu-li/"/>
      <url>/2022/07/24/qi-rust-cuo-wu-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="Rust-错误处理"><a href="#Rust-错误处理" class="headerlink" title="Rust 错误处理"></a>Rust 错误处理</h2><ol><li><p>Rust 的可靠性：错误处理。</p><ul><li>大部分情况下：在编译时提示错误，并处理。</li></ul></li><li><p>错误的分类：</p><ul><li>可恢复：例如文件未找到，可以再次尝试。</li><li>不可恢复：也就是 bug，例如访问的索引超出范围。</li></ul></li><li><p>Rust 没有类似异常的机制：</p><ul><li>针对可恢复的错误：<code>Result&lt;T,E&gt;</code>。</li><li>针对不可恢复的错误：panic! 宏。</li></ul></li></ol><h2 id="不可恢复的错误"><a href="#不可恢复的错误" class="headerlink" title="不可恢复的错误"></a>不可恢复的错误</h2><ol><li><p>当 panic! 宏执行时：</p><ul><li>程序会打印一个错误信息。</li><li>展开（unwind）、清理调用栈（Stack）。</li><li>退出程序。</li></ul></li><li><p>为了应对 panic，展开或中止（abort）调用栈：</p><ul><li>默认情况下，当 panic 发生，程序会展开调用栈 （工作量大）：<ul><li>Rust 沿着调用栈往回走。</li><li>清理每个遇到的函数中的数据。</li></ul></li><li>也可以立即中止调用栈：<ul><li>不进行清理，直接停止程序。</li><li>内存需要 OS 进行清理。</li></ul></li><li>想让二进制文件更小，把设置从”展开“改为”中止“：<ul><li>在 Cargo.toml 中适当的 profile 部分设置：<ul><li>panic = ‘abort’</li></ul></li></ul></li></ul></li></ol><h3 id="使用-panic-产生的回溯信息"><a href="#使用-panic-产生的回溯信息" class="headerlink" title="使用 panic! 产生的回溯信息"></a>使用 panic! 产生的回溯信息</h3><ol><li>panic! 可能出现在：<ul><li>我们写的代码中。</li><li>我们所依赖的代码中。</li></ul></li><li>可通过调用 panic! 的函数回溯信息来定位引起问题的代码。</li><li>通过设置环境变量 <code>RUST_BACKTRACE=1</code> 可得到回溯信息。</li><li>为了获取带有调试信息的回溯，必须启用调试符号（不带 –release）。</li></ol><h2 id="Result-与可恢复的错误"><a href="#Result-与可恢复的错误" class="headerlink" title="Result 与可恢复的错误"></a>Result 与可恢复的错误</h2><h3 id="Result-枚举"><a href="#Result-枚举" class="headerlink" title="Result 枚举"></a>Result 枚举</h3><ol><li><p>Result 枚举格式。</p><ul><li>T：操作成功情况下，Ok 变体里返回的数据的类型。</li><li>E：操作失败情况下，Err 变体里返回的错误的类型。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Result<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Err</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>处理 Result 的一种方式：match 表达式。</p><ul><li>和 Option 枚举一样，Result 及其变体也是由 prelude 带入作用域。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>     <span class="token function">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> file<span class="token punctuation">,</span>     <span class="token function">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token function">panic!</span><span class="token punctuation">(</span><span class="token string">"Error open file {:?}"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>匹配不同的错误。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">;</span> <span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>ErrorKind<span class="token punctuation">;</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> _file <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>         <span class="token function">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> file<span class="token punctuation">,</span>         <span class="token function">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">match</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             ErrorKind<span class="token punctuation">:</span><span class="token punctuation">:</span>NotFound <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">match</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">Ok</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> fc<span class="token punctuation">,</span>                 <span class="token function">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">panic!</span><span class="token punctuation">(</span><span class="token string">"Error creating file: {:?}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             other_error <span class="token operator">=</span><span class="token operator">></span> <span class="token function">panic!</span><span class="token punctuation">(</span><span class="token string">"Error opening the file : {:?}"</span><span class="token punctuation">,</span> other_error<span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>闭包（closure）。<code>Result&lt;T, E&gt;</code> 有很多方法：</p><ul><li>它们接收闭包作为参数。</li><li>使用 match 实现。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>ErrorKind<span class="token punctuation">;</span> <span class="token keyword">let</span> _f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span>error<span class="token punctuation">|</span></span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ErrorKind<span class="token punctuation">:</span><span class="token punctuation">:</span>NotFound <span class="token punctuation">{</span>         File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span>error<span class="token punctuation">|</span></span> <span class="token punctuation">{</span>             <span class="token function">panic!</span><span class="token punctuation">(</span><span class="token string">"Error creating file : {:?}"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token function">panic!</span><span class="token punctuation">(</span><span class="token string">"Error opening file : {:?}"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>unwrap: match 表达式的一个快捷方法：<code>let _f = File::open("hello.txt").unwrap();</code> ，这与 match 是类似的：</p><ul><li>当 OK 时 unwrap 会自动返回 OK 的结果。</li><li>当 Err 时 unwrap 则会自动调用 panic!。</li></ul></li><li><p>expect: 与 unwrap 功能类似，但是可以指定错误信息：<code>let _f = File::open("hello.txt").expect("无法打开文件");</code></p></li></ol><h3 id="传播错误"><a href="#传播错误" class="headerlink" title="传播错误"></a>传播错误</h3><ol><li><p>一般情况都是在函数中处理错误，但有时需要调用者来决定如何处理，这时就需要向上传播错误。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>        <span class="token function">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> file<span class="token punctuation">,</span>        <span class="token function">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// return Err 其类型就是 io::Error 枚举类型</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 返回最终结果或错误</span>        <span class="token function">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"name is {}"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>?</code> 运算符：传播错误的一种快捷方式。</p><ul><li>如果 Result 是 Ok：Ok 中的值就是表达式的结果，然后继续执行程序。</li><li>如果 Result 是 Err：Err 就是<code>整个函数</code>的返回值，就像使用了 <code>return</code>。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">read_username_from_file_by_special</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span>?<span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span>?<span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 最后需要 Ok 是由于前边的 ? 会保证 Err 时有返回，不会保证成功时返回，所以要显式返回下</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>?</code> 与 from 函数：Trait std::convert::From 上的 from 函数主要用于错误之间的转换。</p><ul><li>被 <code>?</code> 所应用的错误，会隐式的被 from 函数处理。当 <code>?</code> 调用 from 函数时：<ul><li>它所接收的错误类型会被转化为当前函数返回类型所定义的错误类型。</li><li>主要用于针对不同错误原因，返回同一种错误类型。<ul><li>需要每个错误类型实现了转为所返回的错误类型的 from 函数。</li></ul></li></ul></li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token comment" spellcheck="true">// 链式调用</span> <span class="token keyword">fn</span> <span class="token function">read_username_from_file_by_special2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Error<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span>?<span class="token punctuation">;</span>     <span class="token function">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>?</code> 运算符只能返回用于 Result 的函数。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token comment" spellcheck="true">/* error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`) --> src/main.rs:5:36 | 4 | / fn main() { 5 | |     let f = File::open("hello.txt")?; | |                                    ^ cannot use the `?` operator in a function that returns ` ()` 6 | | } | |_- this function should return `Result` or `Option` to accept `?` | = help: the trait `FromResidual&lt;Result&lt;Infallible, std::io::Error>>` is not implemented for `()`*/</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span>?<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后，<code>Box&lt;dyn Error&gt;</code> 是 trait 对象：</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Box<span class="token operator">&lt;</span>dyn std<span class="token punctuation">:</span><span class="token punctuation">:</span>error<span class="token punctuation">:</span><span class="token punctuation">:</span>Error<span class="token operator">>></span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> f <span class="token operator">=</span> File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span>?<span class="token punctuation">;</span>     <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="何时进行-panic"><a href="#何时进行-panic" class="headerlink" title="何时进行 panic"></a>何时进行 panic</h2><ol><li><p>在定义一个可能失败的函数时，优先考虑返回 Result。否则当判断无法进行恢复时则进行 panic。</p></li><li><p>在编写示例、原型代码、测试时可以分别使用 panic。</p></li><li><p>错误处理的指导性建议：</p><ul><li>当代码最终可能处于损坏状态时，最好使用 panic!。</li><li>损坏状态（Bad state）：某些假设、保证、约定或不可变性被打破：<ul><li>例如传入非法值、矛盾的值或空缺的值。</li><li>这种损坏状态并不是预期能够知道是偶尔发生的事情。</li><li>在此之后，如果代码处于这种损坏就无法再运行。</li><li>使用的类型中没有一个好的方法来处理这些信息（损坏状态）。</li></ul></li></ul></li><li><p>使用自定义类型来进行检查：</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">pub</span> <span class="token keyword">struct</span> Guess <span class="token punctuation">{</span>     value<span class="token punctuation">:</span> i32<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">impl</span> Guess <span class="token punctuation">{</span>     <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> i32<span class="token punctuation">)</span> <span class="token punctuation">-></span> Guess <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">panic!</span><span class="token punctuation">(</span><span class="token string">"Guess value must be between 1 and 100, got {}"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Guess <span class="token punctuation">{</span> value <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> i32 <span class="token punctuation">{</span>         <span class="token keyword">self</span><span class="token punctuation">.</span>value     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（六）Rust_常用集合</title>
      <link href="/2022/07/24/liu-rust-chang-yong-ji-he/"/>
      <url>/2022/07/24/liu-rust-chang-yong-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的集合"><a href="#常用的集合" class="headerlink" title="常用的集合"></a>常用的集合</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Rust 笔记也做到集合部分了，强烈推荐 <a href="https://github.com/rust-lang/rustlings">rustling</a> 工具，配合官方文档或者本系列笔记作为练习题是相当不错的。</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ol><li><p>可以使用 Vector 存储多个值：</p><ul><li><code>Vec&lt;T&gt;</code>，称为 Vector。</li><li>其由标准库提供。</li><li>可以存储多个值。</li><li>只能存储相同类型的数据。</li><li>值在内存中连续存放。</li></ul></li><li><p>使用 Vec::new 创建 Vector：</p><ul><li><code>let v: Vec&lt;i32&gt; = Vec::new();</code>，由于 new 创建的 vec 是没有元素的，需要显式的指定 vec 类型。</li><li><code>let v2 = vec![1, 2, 3];</code>，使用初始值创建 Vector，通过 vec! 宏。</li></ul></li><li><p>更新 Vector：</p><ul><li>向 Vector 添加元素，使用 push 方法。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> Vec<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加完元素 编译器可以推断出当前 vector 的类型，可以不再显式声明。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除 Vector：</p><ul><li>与任何其他 struct 一样，当 Vector 离开作用域后，它就被清理掉了，其中的所包括的元素也被清理掉。</li></ul></li><li><p>读取 vector 的元素：</p><ul><li>索引方式。</li><li>get 方法。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> third<span class="token punctuation">:</span> <span class="token operator">&amp;</span>i32 <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is {}"</span><span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">match</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">Some</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is {}"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span>     None <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"There is no third element"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>索引与 get 在处理访问越界时是有区别的：</p><ul><li>索引会引起 panic。</li><li>get 则会返回 None。</li></ul></li><li><p>所有权和借用规则</p><ul><li>不能在同一作用域内同时拥有可变和不可变引用。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> third <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时存在对 v 对可变与不可变借用（third）会报错</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is {}"</span><span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时不可变应用 third 后续没有再进行使用，因此可以正常的可变借用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历 Vector：</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> v <span class="token punctuation">{</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">*</span>i <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> v <span class="token punctuation">{</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Vector-例子"><a href="#Vector-例子" class="headerlink" title="Vector 例子"></a>Vector 例子</h3><ol><li><p>使用 enum 来存储多种数据类型。</p><ul><li>enum 的变体可以附加不同类型的数据。</li><li>enum 的变体定义在同一个 enum 类型下。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> SpreadssheetCell <span class="token punctuation">{</span> <span class="token function">Int</span><span class="token punctuation">(</span>i32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Float</span><span class="token punctuation">(</span>f64<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Text</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">fn</span> <span class="token function">test_vector_enum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> _row <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span>         SpreadssheetCell<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         SpreadssheetCell<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Text</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         SpreadssheetCell<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Float</span><span class="token punctuation">(</span><span class="token number">10.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li><p>Rust 中的字符串困难点：</p><ul><li>Rust 倾向于暴露可能的错误。</li><li>字符串数据结构复杂。</li><li>默认是使用 UTF-8 编码。</li></ul></li><li><p>在 Rust 的核心语言层面，只提供来一个字符串类型：字符串切片 str（或 &amp;str）。</p><ul><li>字符串切片：对于存储在其他地方、UTF-8 编码的字符串引用。<ul><li>字符串字面值：存储在二进制文件中，也就是字符串切片。</li></ul></li></ul></li><li><p>String 类型来自标准库，不是核心语言层。其特点是可增长、可修改、可拥有的字符串数据管理结构，也采用 UTF-8 编码。</p></li></ol><h3 id="其他字符串类型"><a href="#其他字符串类型" class="headerlink" title="其他字符串类型"></a>其他字符串类型</h3><ol><li>Rust 的标准库中还包括其他的字符串类型，例如：OsString、OsStr、CString、CStr 等。<ul><li>String 或 Str 后缀是指，<code>拥有</code>或<code>借用</code>的变体。</li><li>可存储不同编码的问题或在内存中以不同的形式展现。</li></ul></li></ol><h3 id="String-使用"><a href="#String-使用" class="headerlink" title="String 使用"></a>String 使用</h3><ol><li><p>创建字符串：</p><ul><li>很多 Vec<t> 的操作都可以作用于 String。</t></li><li>String::new() 函数：<code>let mut s = String::new();</code>。</li></ul></li><li><p>使用初始值来创建 String：</p><ul><li><code>to_string()</code> 方法，可用于实现来 Display trait 的类型，包括字符串字面值。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"initial contents"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> _s <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> _s1 <span class="token operator">=</span> <span class="token string">"initial contents"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>String::from()</code> 函数从字面值创建 String。</li></ul></li><li><p>更新 String：</p><ul><li><code>push_str()</code> 方法：把一个字符串切片附加到 String。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//foobar</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">"bar2"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 仅借用 s1 不会获取其所有权，后续可继续使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>push()</code> 方法：将单个字符附加到 String。example: <code>s.push('l');</code>。</p></li><li><p><code>+</code> 运算符：拼接字符串。</p></li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">"Hello, "</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">"World!"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里 s1 需要是 String，s2 是要求字符串切片或 String 类型引用。</span> <span class="token comment" spellcheck="true">/* println!("s1 = {}", s1);  s1 已经被 moved，因此不能再使用 error[E0382]: borrow of moved value: `s1`   --> src/main.rs:25:25    | 20 |     let s1 = "Hello, ".to_string();    |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait ... 23 |     let s3 = s1 + &amp;s2; // 这里 s1 需要是 String，s2 是要求字符串切片或 String 类型引用。    |              -- value moved here 24 | 25 |     println!("s1 = {}", s1);    |                         ^^ value borrowed here after move */</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"s2 = {}"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"s3 = {}"</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>format!</code> 宏：连接多个字符串，它不会获取其他字符串的所有权，会返回一个全新的字符串：</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> s1 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"tic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"tac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> s3 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"toe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//let s3 = s1 + "-" + &amp;s2 + "-" + &amp;s3;</span> <span class="token comment" spellcheck="true">//print!("{}", s3);</span> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"{}-{}-{}"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">print!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="String-访问"><a href="#String-访问" class="headerlink" title="String 访问"></a>String 访问</h3><ol><li><p>按索引的形式对 String 进行访问是不允许的。example: <code>s[0]</code>。</p></li><li><p>String 内部表示，其实是对 Vec<u8> 的包装。又一个 len 方法可以返回 String 的长度（所占的字节数）。</u8></p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> len <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hola"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Unicode 标量值往往不是一个字节表示，对于中文或者其他文字可能两个或三个字节表示一个文字。</span><span class="token comment" spellcheck="true">// 你好。len() 可能返回 4，这时通过索引进行访问就存在问题了。</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="字节（Bytes）、标量值（Scalar-Values）、字形簇（Grapheme-Clusters）"><a href="#字节（Bytes）、标量值（Scalar-Values）、字形簇（Grapheme-Clusters）" class="headerlink" title="字节（Bytes）、标量值（Scalar Values）、字形簇（Grapheme Clusters）"></a>字节（Bytes）、标量值（Scalar Values）、字形簇（Grapheme Clusters）</h3><ol><li><p>Rust 有三种看待字符串的方式：</p><ul><li>字节：String.bytes()，最基本的字节数据。</li><li>标量值：String.Chars()</li><li>字形簇（最接近单个语言字符的）：标准库是不支持直接字形簇。</li></ul></li><li><p>Rust 不允许对 String 进行索引的最后一个原因：</p><ul><li>索引操作应消耗一个常量时间（O(1)）。</li><li>而 String 无法保证：需要遍历所有内容，来确定有多少个合法字符。</li></ul></li></ol><h3 id="切割-String"><a href="#切割-String" class="headerlink" title="切割 String"></a>切割 String</h3><ol><li><p>可以使用 <code>[]</code> 和<code>一个范围</code>来创建字符串的切片。</p><ul><li>注意需要按照字符的边界进行，如果切割在 unicode 中间则会引起 panic。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token string">"Здравствуйте"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>hello<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Зд</span> <span class="token comment" spellcheck="true">/* thread 'main' panicked at 'byte index 3 is not a char boundary; it is inside 'д' (bytes 2..4) of `Здравствуйте`' , src/main.rs:69:14 note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace */</span> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>hello<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="HashMap-lt-K-V-gt"><a href="#HashMap-lt-K-V-gt" class="headerlink" title="HashMap<K, V>"></a><code>HashMap&lt;K, V&gt;</code></h2><ol><li>键值对的形式存储数据，一个键（key）对应一个值（Value）。</li><li>其内部主要使用 Hash 函数：决定如何在内存中存放 K 和 V。</li></ol><h3 id="创建-HashMap"><a href="#创建-HashMap" class="headerlink" title="创建 HashMap"></a>创建 HashMap</h3><ol><li><p>创建空 HashMap: new() 函数。</p></li><li><p>添加数据：insert() 方法。</p></li><li><p>HashMap 不在预导入模块中，因此需要使用 use 进行导入。标准库对其支持比较少，没有内置宏来进行创建。</p></li><li><p>HashMap 数据是存储在 Heap 上的。</p></li><li><p>HashMap 是同构的：</p><ul><li>所有的 K 必须是同一种类型。</li><li>所有的 V 必须是同一种类型。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>collections<span class="token punctuation">:</span><span class="token punctuation">:</span>HashMap<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>另一种创建 HashMap 的方式：collect 方法。</p><ul><li>在元素类型为 Tuple 的 Vector 上使用 collect 方法，可以创建一个 HashMap：<ul><li>要求 Tuple 有两个值：一个作为 K，一个作为 V。</li><li>collect 方法可以把数据整合程很多种类型，包括 HashMap，因此返回值需要显式的指明类型。</li></ul></li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> teams <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> intial_scores <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用 zip （拉链）来创建一个 tuple</span> <span class="token keyword">let</span> _scores<span class="token punctuation">:</span> HashMap<span class="token operator">&lt;</span>_<span class="token punctuation">,</span> _<span class="token operator">></span> <span class="token operator">=</span> teams<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>intial_scores<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="HashMap-和所有权"><a href="#HashMap-和所有权" class="headerlink" title="HashMap 和所有权"></a>HashMap 和所有权</h3><ol><li><p>对于实现了 Copy trait 的类型（例如 i32），值会被复制到 HashMap 中。</p></li><li><p>对于拥有所有权的值（例如 String），值会被移动，所有权会转移给 HashMap。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> field_name <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Favorite color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> field_value <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>field_name<span class="token punctuation">,</span> field_value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*     error[E0382]: borrow of moved value: `field_name` --> src/main.rs:24:24 | 18 |     let field_name = String::from("Favorite color"); |         ---------- move occurs because `field_name` has type `String`, which does not implement the `Copy` trait ... 22 |     map.insert(field_name, field_value); |                ---------- value moved here 23 | 24 |     println!("{}: {}", field_name, field_value); |                        ^^^^^^^^^^ value borrowed here after move | */</span> <span class="token comment" spellcheck="true">//println!("{}: {}", field_name, field_value);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果将值的引用插入到 HashMap，值本身不会移动。</p><ul><li>在 HashMap 有效期间内，被引用的值必须保持有效。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> field_name <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Favorite color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> field_value <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>field_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>field_value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}: {}"</span><span class="token punctuation">,</span> field_name<span class="token punctuation">,</span> field_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="访问-HashMap-中的值"><a href="#访问-HashMap-中的值" class="headerlink" title="访问 HashMap 中的值"></a>访问 HashMap 中的值</h3><ol><li><p>get 方法：</p><ul><li>参数：K</li><li>返回：<code>Option&lt;&amp;V&gt;</code></li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> team_name <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> score <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>team_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">match</span> score <span class="token punctuation">{</span>     <span class="token function">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span>     None <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"team not exit"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="遍历-HashMap"><a href="#遍历-HashMap" class="headerlink" title="遍历 HashMap"></a>遍历 HashMap</h3><ol><li>for 循环：</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>scores <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}: {}"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新-HashMap-lt-K-V-gt"><a href="#更新-HashMap-lt-K-V-gt" class="headerlink" title="更新 HashMap<K, V>"></a>更新 <code>HashMap&lt;K, V&gt;</code></h3><ol><li><p>HashMap 大小可变，但是每个 K 同时只能对应一个 V。</p></li><li><p>更新 HashMap 中的数据：</p><ul><li>K 已经存在，对应一个 V：<ul><li>替换现有 V。</li><li>保留现有 V，忽略新的 V。</li><li>合并现有 V 和新的 V。</li></ul></li><li>K 不存在：<ul><li>添加一对 K，V。</li></ul></li></ul></li><li><p>覆盖现有的 V：</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{"Blue": 50}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只在 K 不对应任何值的情况下，才插入 V：</p><ul><li><p>entry 方法：检查指定的 K 是否有对应一个 V。</p><ul><li>参数为 K。</li><li>返回 enum Entry：代表值是否存在。</li></ul></li><li><p>entry 的 <code>or_insert()</code> 方法：</p><ul><li>返回：</li><li>如果 K 存在，返回到对应 V 的一个可变引用。</li><li>如果 K 不存在，将方法参数作为 K 的新值插入进去，返回到这个值的可变引用。</li></ul></li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//scores.entry(String::from("Yellow")).or_insert(50);</span> <span class="token keyword">let</span> e <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Entry(VacantEntry("Yellow"))</span> e<span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> e <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Entry(OccupiedEntry { key: "Blue", value: 10, .. })</span> e<span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{"Blue": 10, "Yellow": 50}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于现有 V 来更新 V。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"hello world wonderful world"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> HashMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> text<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果 K 存在，返回到对应 V 的一个可变引用。</span>     <span class="token operator">*</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{"wonderful": 1, "world": 2, "hello": 1}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Hash-函数"><a href="#Hash-函数" class="headerlink" title="Hash 函数"></a>Hash 函数</h3><ol><li>默认情况下，HashMap 使用加密功能强大的 Hash 函数，可以抵抗拒绝服务（DOS）攻击，所以不是可用的最快 Hash 算法。<ul><li>具有更好的安全性。</li></ul></li><li>可以指定不同的 hasher 来切换到另一个函数。<ul><li>hasher 是实现 BuildHasher trait 类型。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）Rust_Package</title>
      <link href="/2022/07/22/wu-rust-package/"/>
      <url>/2022/07/22/wu-rust-package/</url>
      
        <content type="html"><![CDATA[<h1 id="Package、Crate-and-Module"><a href="#Package、Crate-and-Module" class="headerlink" title="Package、Crate and Module"></a>Package、Crate and Module</h1><h2 id="Rust-的代码组织"><a href="#Rust-的代码组织" class="headerlink" title="Rust 的代码组织"></a>Rust 的代码组织</h2><ol><li><p>代码组织主要包括：</p><ul><li>哪些细节可以暴露，哪些细节是私有的。</li><li>作用域内哪些名称有效。</li></ul></li><li><p>这些组织被称为模块系统：</p><ul><li>Package（包）：Cargo 的特性，使用者构建、测试、共享 crate 的基础。</li><li>Crate（单元包）：一个模块树，它可产生一个 library 或可执行文件。</li><li>Module（模块）、use：让使用者控制代码的组织、作用域、私有路径。</li><li>Path（路径）：为 struct、function 或 module 等项命名的方式。</li></ul></li></ol><h2 id="Package-和-Crate"><a href="#Package-和-Crate" class="headerlink" title="Package 和 Crate"></a>Package 和 Crate</h2><ol><li>Crate 包括 binary 和 library 两种类型。</li><li>Crate Root 则表示为源代码文件，Rust 编译器是从这里开始，组成你的 Crate 的 Module。</li><li>一个 Package ：<ul><li>包括一个 Cargo.toml，它描述了如何构建这些 Crates。</li><li>只能包含 0-1 个 library crate。</li><li>可以包含任意数量的 binary crate。</li><li>但必须至少包含一个 crate（library 或 binary）。</li></ul></li></ol><h3 id="Cargo-的惯例"><a href="#Cargo-的惯例" class="headerlink" title="Cargo 的惯例"></a>Cargo 的惯例</h3><ol><li><p>src/main.rs：</p><ul><li>是 binary crate 的 crate root。</li><li>crate 名与 package 名相同。</li></ul></li><li><p>src/lib.rs:</p><ul><li>package 包含一个 library crate。</li><li>library crate 的 crate root。</li><li>crate 名与 package 名相同。</li></ul></li><li><p>Cargo 把 crate root 文件交给 rustc 来构建 library 或 binary。</p></li><li><p>一个 Package 可以同时包含 src/main.rs 和 src/lib.rs。</p><ul><li>一个 binary crate，一个 library crate。</li><li>这两个名称都与 package 名相同。</li></ul></li><li><p>一个 Package 可以有多个 binary crate。</p><ul><li>文件放在 src/bin。</li><li>每个文件都是单独的 binary crate。</li></ul></li></ol><h2 id="定义-module-来控制作用域与私有性"><a href="#定义-module-来控制作用域与私有性" class="headerlink" title="定义 module 来控制作用域与私有性"></a>定义 module 来控制作用域与私有性</h2><ol><li><p>Module 在一个 crate 内，将代码进行分组。增加代码可读性，易于服用。控制项目（item）的私有性，public、private。</p></li><li><p>建立 module 需要使用 mod 关键字，其可以嵌套。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token comment" spellcheck="true">//file: module_demo</span><span class="token keyword">mod</span> front_of_house <span class="token punctuation">{</span>     <span class="token keyword">mod</span> hosting <span class="token punctuation">{</span>         <span class="token keyword">fn</span> <span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">fn</span> <span class="token function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">mod</span> serving <span class="token punctuation">{</span>         <span class="token keyword">fn</span> <span class="token function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">fn</span> <span class="token function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">fn</span> <span class="token function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><ol><li>为了在 Rust 的模块中找到某个条目，需要使用路径。</li><li>路径又两种形式：<ul><li>绝对路径：从 crate root 开始，使用 crate 名或字面值 crate。</li><li>相对路径：从当前模块开始，使用 slef，super 或当前模块的标识符。</li></ul></li><li>路径至少由一个标识符组成，标识符之间使用 ::。</li></ol><h2 id="私有边界-privacy-boundary"><a href="#私有边界-privacy-boundary" class="headerlink" title="私有边界 privacy boundary"></a>私有边界 privacy boundary</h2><ol><li>模块不仅可以组织代码，还可以定义私有边界。</li><li>如果想要把函数或 struct 等设置为私有，可以将它放到某个模块中。</li><li>Rust 中所有的条目（函数，方法，struct，enum，模块，常量）默认是私有的。</li><li>父级模块无法访问子模块中的私有条目。</li><li>子模块里可以使用所有祖先模块中的条目。</li></ol><h3 id="pub-关键字"><a href="#pub-关键字" class="headerlink" title="pub 关键字"></a>pub 关键字</h3><ol><li>使用 pub 关键字来将某些条目标记为公共的。<ul><li><code>front_of_house</code> 是同级别的，不标记 pub 也可以直接调用。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">mod</span> front_of_house <span class="token punctuation">{</span>    <span class="token keyword">pub</span> <span class="token keyword">mod</span> hosting <span class="token punctuation">{</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mod</span> serving <span class="token punctuation">{</span>        <span class="token keyword">fn</span> <span class="token function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">crate</span><span class="token punctuation">:</span><span class="token punctuation">:</span>front_of_house<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    front_of_house<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><ol><li>super：用来访问父级模块路径中的内容，类似文件系统中的 <code>..</code> 。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">mod</span> front_of_house <span class="token punctuation">{</span>    <span class="token keyword">pub</span> <span class="token keyword">mod</span> hosting <span class="token punctuation">{</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mod</span> serving <span class="token punctuation">{</span>        <span class="token keyword">fn</span> <span class="token function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">:</span><span class="token punctuation">:</span>hosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pub-struct"><a href="#pub-struct" class="headerlink" title="pub struct"></a>pub struct</h3><ol><li>pub 放在 struct 前：<ul><li>struct 是公共的。</li><li>struct 中默认的字段都是私有的。</li><li>在 struct 中的字段需要单独设置 pub 来变成公共的。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">crate</span><span class="token punctuation">:</span><span class="token punctuation">:</span>front_of_house<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    front_of_house<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> meal <span class="token operator">=</span> back_of_house<span class="token punctuation">:</span><span class="token punctuation">:</span>Breakfast<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">summer</span><span class="token punctuation">(</span><span class="token string">"Rye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    meal<span class="token punctuation">.</span>toast <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Wheat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// error : meal.seasonal_fruit = String::from("banana");</span><span class="token punctuation">}</span><span class="token keyword">mod</span> back_of_house <span class="token punctuation">{</span>    <span class="token keyword">pub</span> <span class="token keyword">struct</span> Breakfast <span class="token punctuation">{</span>        <span class="token keyword">pub</span> toast<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        seasonal_fruit<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">impl</span> Breakfast <span class="token punctuation">{</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">summer</span><span class="token punctuation">(</span>toast<span class="token punctuation">:</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">-></span> Breakfast <span class="token punctuation">{</span>            Breakfast <span class="token punctuation">{</span>                toast<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span>toast<span class="token punctuation">)</span><span class="token punctuation">,</span>                seasonal_fruit<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"peaches"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pub-enum"><a href="#pub-enum" class="headerlink" title="pub enum"></a>pub enum</h3><ol><li>与 struct 类似将 pub 放在 enum 前即可声明为公共：<ul><li>enum 是公共的。</li><li>enum 的变体也都是公共的。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">mod</span> demo <span class="token punctuation">{</span>    <span class="token keyword">pub</span> <span class="token keyword">enum</span> Appetizer <span class="token punctuation">{</span>        Soup<span class="token punctuation">,</span>        Salad<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="use-关键字"><a href="#use-关键字" class="headerlink" title="use 关键字"></a>use 关键字</h2><ol><li><p>可以使用 use 关键字将路径导入到作用域内：</p><ul><li>仍遵循私有性规则。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">mod</span> use_demo <span class="token punctuation">{</span>    <span class="token keyword">pub</span> <span class="token keyword">mod</span> hosting <span class="token punctuation">{</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">add_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">:</span><span class="token punctuation">:</span>use_demo<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting<span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">eat_somgthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    hosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>也可以用 use 来引用相对路径。</p></li></ol><h3 id="use-的习惯用法"><a href="#use-的习惯用法" class="headerlink" title="use 的习惯用法"></a>use 的习惯用法</h3><ol><li>函数：将函数的父级模块引入作用域（指定到父级），避免模糊函数是本地定义还是外部引用进入。</li><li>struct、enum 等其他：指定完整路径（指定到本身）。</li></ol><h3 id="as-关键字"><a href="#as-关键字" class="headerlink" title="as 关键字"></a>as 关键字</h3><ol><li>as 关键字可以为引入的路径指定本地的别名。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">:</span><span class="token punctuation">:</span>use_demo<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting <span class="token keyword">as</span> demoHosting<span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">eat_somgthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    demoHosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-pub-use-重新导出名称"><a href="#使用-pub-use-重新导出名称" class="headerlink" title="使用 pub use 重新导出名称"></a>使用 pub use 重新导出名称</h3><ol><li>使用 use 将路径（名称）导入到作用域后，该名称在此作用域内是私有的。<ul><li>使用 pub 可以将 use 的暴露出来。</li><li>将条目引入到当前作用域，也可以将该条目导出被外部代码引入它们的作用域。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">:</span><span class="token punctuation">:</span>use_demo<span class="token punctuation">:</span><span class="token punctuation">:</span>hosting <span class="token keyword">as</span> demoHosting<span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">eat_somgthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    demoHosting<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">add_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ol><li>Cargo.toml 添加依赖的包（package）。</li><li>use 将特定条目引入到作用域。</li><li>标准库（std）也被当作外部包：<ul><li>不需要修改 Cargo.toml 来包含 std。</li><li>需要使用 use 将 std 中的特定条目引入当前作用域。</li></ul></li></ol><h3 id="使用嵌套路径清理大量的-use-语句"><a href="#使用嵌套路径清理大量的-use-语句" class="headerlink" title="使用嵌套路径清理大量的 use 语句"></a>使用嵌套路径清理大量的 use 语句</h3><ol><li>如果使用同一包或模块下的多个条目，可以使用嵌套路径在同一行内将上述条目进行引入：<ul><li>路径相同的部分 ::{路径差异部分}。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>cmp<span class="token punctuation">:</span><span class="token punctuation">:</span>Ordering<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>cmp<span class="token punctuation">:</span><span class="token punctuation">:</span>Ordering<span class="token punctuation">,</span> io<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Write<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> Write<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符 *"></a>通配符 *</h3><ol><li>可以使用 <code>*</code> 将路径中所有的公共条目都引用到作用域中。<ul><li>注意：谨慎使用。</li><li>应用场景：<ul><li>测试：将所有被测试代码引入到 tests 模块中。</li><li>优势被用于预导入模块。</li></ul></li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>collections<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如何将模块拆分为不同的文件"><a href="#如何将模块拆分为不同的文件" class="headerlink" title="如何将模块拆分为不同的文件"></a>如何将模块拆分为不同的文件</h2><ol><li>Rust 可以将模块内容移动到其他文件，在模块定义时，如果模块名后边是 <code>;</code>，而不是代码块：<ul><li>Rust 会从与模块同名的文件中加载内容。</li><li>模块树的结构不会发生变化。</li></ul></li><li>随着模块逐渐变大，该技术可以把模块的内容移动到其他文件中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）流媒体之FFmpeg命令行解析</title>
      <link href="/2022/07/16/san-liu-mei-ti-zhi-ffmpeg-ming-ling-xing-jie-xi/"/>
      <url>/2022/07/16/san-liu-mei-ti-zhi-ffmpeg-ming-ling-xing-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="流媒体之-FFmpeg-命令行解析"><a href="#流媒体之-FFmpeg-命令行解析" class="headerlink" title="流媒体之 FFmpeg 命令行解析"></a>流媒体之 FFmpeg 命令行解析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于流媒体的核心音视频数据的采集、处理等操作最常用的工具就是 ffmpeg。它还包括一个简单的媒体播放器 ffplay 与 ffprob 媒体流分析器，都是在处理音视频数据上常用的工具。</p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>帮助信息命令：</p><ol><li>基本信息：ffmpeg -h</li><li>高级信息：ffmpeg -h long</li><li>所有信息：ffmpeg -h full</li></ol><blockquote><p>usage: <code>ffmpeg [options] [[infile options] -i infile] [[outfile option] outfile]</code></p></blockquote><h2 id="ffmpeg-处理流程"><a href="#ffmpeg-处理流程" class="headerlink" title="ffmpeg 处理流程"></a>ffmpeg 处理流程</h2>]]></content>
      
      
      <categories>
          
          <category> 流媒体技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流媒体 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）流媒体之YUV及视频帧</title>
      <link href="/2022/07/07/er-liu-mei-ti-zhi-yuv-ji-shi-pin-zheng/"/>
      <url>/2022/07/07/er-liu-mei-ti-zhi-yuv-ji-shi-pin-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="YUV-及视频帧"><a href="#YUV-及视频帧" class="headerlink" title="YUV 及视频帧"></a>YUV 及视频帧</h1><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p>时间线，或者说播放器如何知道在正确的时间来播放每一帧。</p><p>当设计一个播放器时，在合适的时间<strong>播放每一帧</strong>很重要，否则音视频不同步会造成很严重的观看体验。</p><p>因此我们需要一些策略能平滑的播放每一帧。所以每一帧都有一个播放时间戳（PTS），PTS 是一个持续增长的数字，可以通过一个时间基数除以 <strong>帧率（fps）</strong> 来获得。</p><p>比如 <code>fps=60/1</code>，<code>timebase=1/60000</code>，<code>timescale=1/timebase</code>，每一个 PTS 的增长 <code>timescale / fps = 1000</code>，因此每一帧 PTS 的时间如下（假设开始为 0）:</p><ul><li><code>frame=0, PTS = 0, PTS_TIME = 0</code></li><li><code>frame=1, PTS = 1000, PTS_TIME = PTS * timebase = 0.016</code></li><li><code>frame=2, PTS = 2000, PTS_TIME = PTS * timebase = 0.033</code></li></ul><p>几乎相同的场景，我们把 timebase 改成了 1/60。</p><ul><li><code>frame=0, PTS = 0, PTS_TIME = 0</code></li><li><code>frame=1, PTS = 1, PTS_TIME = PTS * timebase = 0.016</code></li><li><code>frame=2, PTS = 2, PTS_TIME = PTS * timebase = 0.033</code></li><li><code>frame=3, PTS = 3, PTS_TIME = PTS * timebase = 0.050</code></li></ul><p>例如 fps=25，timebase=1/75，PTS 的增长将会是 timescale / fps = 3，如下：</p><ul><li><code>frame=0, PTS = 0, PTS_TIME = 0</code></li><li><code>frame=1, PTS = 3, PTS_TIME = PTS * timebase = 0.04</code></li><li><code>frame=2, PTS = 6, PTS_TIME = PTS * timebase = 0.08</code></li><li><code>frame=3, PTS = 9, PTS_TIME = PTS * timebase = 0.12</code></li><li>…</li><li><code>frame=24, PTS = 72, PTS_TIME = PTS * timebase = 0.96</code></li><li>…</li><li><code>frame=4064, PTS = 12192, PTS_TIME = PTS * timebase = 162.56</code></li></ul><h2 id="I、P、B-以及-DTS-、PTS-解析"><a href="#I、P、B-以及-DTS-、PTS-解析" class="headerlink" title="I、P、B 以及 DTS 、PTS 解析"></a><a href="https://www.cnblogs.com/yongdaimi/p/10676309.html">I、P、B 以及 DTS 、PTS 解析</a></h2><p>在之前的学习已经了解视频传输需要进行编码和解码操作，来降低传输的大小。就视频图像编码和解码而言，必须保证编解码的方式要一致，约定一种压缩的方式很简单：<strong>编码器将多张图像进行编码后生产成一段一段的 GOP ( Group of Pictures ) ， 解码器在播放时则是读取一段一段的 GOP 进行解码后读取画面再渲染显示</strong>。</p><ul><li><p>GOP ( Group of Pictures) 是一组连续的画面，由一张 I 帧和数张 B / P 帧组成，是视频图像编码器和解码器存取的基本单位，它的排列顺序将会一直重复到影像结束。I 帧是内部编码帧（也称为关键帧），P 帧是前向预测帧（前向参考帧），B 帧是双向内插帧（双向参考帧）。简单地讲，I 帧是一个完整的画面，而 P 帧和 B 帧记录的是相对于 I 帧的变化。如果没有 I 帧，P 帧和 B 帧就无法解码。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/GOP.png"></p></li></ul><h3 id="I-帧、P-帧、B-帧、GOP"><a href="#I-帧、P-帧、B-帧、GOP" class="headerlink" title="I 帧、P 帧、B 帧、GOP"></a>I 帧、P 帧、B 帧、GOP</h3><ol><li><p>I 帧（Intra-coded picture 帧内编码图像帧）：I 帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）。又称为内部画面 (intra picture)，I 帧通常是每个 GOP 的第一个帧，经过适度地压缩，做为随机访问的参考点，可以当成图象。</p><ul><li><p>在 MPEG 编码的过程中，部分视频帧序列压缩成为 I 帧；部分压缩成 P 帧；还有部分压缩成 B 帧。I 帧法是帧内压缩法，也称为“关键帧”压缩法。I 帧法是基于离散余弦变换 DCT（Discrete Cosine Transform）的压缩技术，这种算法与 JPEG 压缩算法类似。采用 I 帧压缩可达到 1/6 的压缩比而无明显的压缩痕迹。</p></li><li><p>I 帧特点：</p><ol><li>它是一个全帧压缩编码帧。它将全帧图像信息进行 JPEG 压缩编码及传输;</li><li>解码时仅用 I 帧的数据就可重构完整图像;</li><li>I 帧描述了图像背景和运动主体的详情;</li><li>I 帧不需要参考其他画面而生成;</li><li>I 帧是 P 帧和 B 帧的参考帧(其质量直接影响到同组中以后各帧的质量);</li><li>I 帧是帧组 GOP 的基础帧(第一帧),在一组中只有一个 I 帧;</li><li>I 帧不需要考虑运动矢量;</li><li>I 帧所占数据的信息量比较大。</li></ol></li><li><p>I 帧编码流程：</p><ol><li>进行帧内预测，决定所采用的帧内预测模式。</li><li>像素值减去预测值，得到残差。</li><li>对残差进行变换和量化。</li><li>变长编码和算术编码。</li><li>重构图像并滤波，得到的图像作为其它帧的参考帧。</li></ol></li></ul></li><li><p>P 帧（Predictive-coded Picture 前向预测编码图像帧）：P 帧表示的是这一帧跟之前的一个关键帧（或 P 帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P 帧没有完整画面数据，只有与前一帧的画面差别的数据）</p><ul><li>P 帧的预测与重构：<ul><li>P 帧是以 I 帧为参考帧，在 I 帧中找出 P 帧“某点”的预测值和运动矢量，取预测差值和运动矢量一起传送。在接收端根据运动矢量从 I 帧中找出 P 帧“某点”的预测值并与差值相加以得到 P 帧“某点”样值，从而可得到完整的 P 帧。</li></ul></li><li>P 帧特点：<ol><li>P 帧是 I 帧后面相隔 1~2 帧的编码帧;</li><li>P 帧采用运动补偿的方法传送它与前面的 I 或 P 帧的差值及运动矢量(预测误差);</li><li>解码时必须将 I 帧中的预测值与预测误差求和后才能重构完整的 P 帧图像;</li><li>P 帧属于前向预测的帧间编码。它只参考前面最靠近它的 I 帧或 P 帧;</li><li>P 帧可以是其后面 P 帧的参考帧，也可以是其前后的 B 帧的参考帧;</li><li>由于 P 帧是参考帧，它可能造成解码错误的扩散;</li><li>由于是差值传送，P 帧的压缩比较高。</li></ol></li></ul></li><li><p>B 帧（Bidirectionally predicted picture 双向预测编码图像帧）：B 帧是双向差别帧，也就是 B 帧记录的是本真与前后帧的差别。换言之，要解码 B 帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B 帧压缩率高，但是解码时 CPU 会比较累。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/B_Frame.png"></p><ul><li><p>B 帧的预测与重构：</p><ul><li>B 帧以前面的 I 或 P 帧和后面的 P 帧为参考帧，找到 B 帧某点的预测值和两个运动矢量，并取预测差值和运动矢量传送。接收端根据运动矢量在两个参考帧中“找出(算出)”预测值并与差值求和，得到 B 帧“某点”样值，从而可得到完整的 B 帧。采用运动预测的方式进行帧间双向预测编码。</li></ul></li><li><p>B 帧特点：</p><ol><li>B 帧是由前面的 I 或 P 帧和后面的 P 帧来进行预测的;</li><li>B 帧传送的是它<strong>与前面的 I 帧或 P 帧和后面的 P 帧之间的预测误差及运动矢量</strong>;</li><li>B 帧是双向预测编码帧;</li><li>B 帧压缩比最高，因为它只反映并参考帧间运动主体的变化情况，预测比较准确;</li><li>B 帧不是参考帧，不会造成解码错误的扩散。</li></ol></li><li><p>为什么需要 B 帧：</p><ul><li><p>从上面的看，我们知道 I 和 P 的解码算法比较简单，资源占用也比较少，I 只要自己完成就行了，P 呢，也只需要解码器把前一个画面缓存一下，遇到 P 时就使用之前缓存的画面就好了，如果视频流只有 I 和 P，解码器可以不管后面的数据，边读边解码，线性前进，大家很舒服。那么为什么还要引入 B 帧？</p></li><li><p>网络上的电影很多都采用了 B 帧，因为 B 帧记录的是前后帧的差别，<strong>比 P 帧能节约更多的空间</strong>。但这样一来，文件小了，解码器就麻烦了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个 I 或者 P 的画面（也就是说要预读预解码），而且， B 帧不能简单地丢掉，因为 B 帧其实也包含了画面信息，如果简单丢掉，并用之前的画面简单重复，就会造成画面卡（其实就是丢帧了），并且由于网络上的电影为了节约空间，往往使用相当多的 B 帧，B 帧用的多，对不支持 B 帧的播放器就造成更大的困扰，画面也就越卡。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/B_DEC.png"></p></li></ul></li></ul></li><li><p>GOP 序列和 IDR：</p><ul><li><p>在 H264 中图像以序列为单位进行组织，一个序列是一段图像编码后的数据流。一个序列的第一个图像叫做 IDR 图像（立即刷新图像），IDR 图像都是 I 帧图像。H.264 引入 IDR 图像是为了解码的重同步，当解码器解码到 IDR 图像时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列。这样，如果前一个序列出现重大错误，在这里可以获得重新同步的机会。IDR 图像之后的图像永远不会使用 IDR 之前的图像的数据来解码。</p></li><li><p>一个序列就是一段内容差异不太大的图像编码后生成的一串数据流。当运动变化比较少时，一个序列可以很长，因为运动变化少就代表图像画面的内容变动很小，所以就可以编一个 I 帧，然后一直 P 帧、B 帧了。当运动变化多时，可能一个序列就比较短了，比如就包含一个 I 帧和 3、4 个 P 帧。</p></li><li><p>在视频编码序列中，GOP 即 Group of picture（图像组），指两个 I 帧之间的距离，Reference（参考周期）指两个 P 帧之间的距离。两个 I 帧之间形成一组图片，就是 GOP（Group Of Picture）。</p></li></ul></li></ol><h3 id="PTS-和-DTS"><a href="#PTS-和-DTS" class="headerlink" title="PTS 和 DTS"></a>PTS 和 DTS</h3><p>P 帧需要参考前边的 I 或 P 帧才可以生成一张完整的图片，而 B 帧则需要参考前面 I 帧或 P 帧及其后面的一个 P 帧才可以生成一张完整的图片，而 B 帧则需要参考前面 I 帧或 P 帧及其后面的一个 P 帧才可以生成一张完整的图片。这样就带来了一个问题：在视频流中，先到来的 B 帧无法立即解码，需要等待它依赖的后面的 I、P 帧先解码完成，这样一来播放时间与解码时间不一致了，顺序打乱了，那这些帧该如何播放呢？这时就引入了另外两个概念：DTS 和 PTS。</p><ol><li>DTS（Decoding Time Stamp）：即解码时间戳，这个时间戳的意义在于告诉播放器该在什么时候解码这一帧的数据。</li><li>PTS（Presentation Time Stamp）：即显示时间戳，这个时间戳用来告诉播放器该在什么时候显示这一帧的数据。</li></ol><p>虽然 DTS、PTS 是用于指导播放端的行为，但它们是在编码的时候由编码器生成的。</p><p>在视频采集的时候是录制一帧就编码一帧发送一帧的，在编码的时候会生成 PTS，这里需要特别注意的是 frame（帧）的编码方式，在通常的场景中，编解码器编码一个 I 帧，然后向后跳过几个帧，用编码 I 帧作为基准帧对一个未来 P 帧进行编码，然后跳回到 I 帧之后的下一个帧。</p><p>编码的 I 帧和 P 帧之间的帧被编码为 B 帧。之后，编码器会再次跳过几个帧，使用第一个 P 帧作为基准帧编码另外一个 P 帧，然后再次跳回，用 B 帧填充显示序列中的空隙。这个过程不断继续，每 12 到 15 个 P 帧和 B 帧内插入一个新的 I 帧。P 帧由前一个 I 帧或 P 帧图像来预测，而 B 帧由前后的两个 P 帧或一个 I 帧和一个 P 帧来预测，因而编解码和帧的显示顺序有所不同，如下所示：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/DTS.png"></p><p>假设编码器采集到的帧是这个样子的：</p><p><code>I B B P B B P</code></p><p>那么它的显示顺序，也就是 PTS 应该是这样：</p><p><code>1 2 3 4 5 6 7</code></p><p>编码器的编码顺序是：</p><p><code>1 4 2 3 7 5 6</code></p><p>推流顺序也是按照编码顺序去推的，即：</p><p><code>I P B B P B B</code></p><p>那么接收断收到的视频流也就是：</p><p><code>I P B B P B B</code></p><p>这时候去解码，也是按照收到的视频流一帧一帧去解的了，接收一帧解码一帧，因为在编码的时候已经按照 I、B、P 的依赖关系编好了，接收到数据直接解码就好了。那么解码顺序是：</p><pre class="line-numbers language-text"><code class="language-text">     I P B B P B BDTS：1 2 3 4 5 6 7PTS：1 4 2 3 7 5 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到解码出来对应的 PTS 不是顺序的，为了正确显示视频流，这时候我们就必须按照 PTS 重新调整解码后的 frame(帧)，即：</p><pre class="line-numbers language-text"><code class="language-text">     I B B P B B PDTS：1 3 4 2 6 7 5PTS：1 2 3 4 5 6 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外，并不是一定要使用 B 帧。在实时互动直播系统中，很少使用 B 帧。主要的原因是压缩和解码 B 帧时，由于要双向参考，所以它需要缓冲更多的数据，且使用的 CPU 也会更高。由于实时性的要求，所以一般不使用它。不过对于播放器来说，遇到带有 B 帧的 H264 数据是常有的事儿。在没有 B 帧的情况下，存放帧的顺序和显示帧的顺序就是一样的，PTS 和 DTS 的值也是一样的。</p><h2 id="YUV"><a href="#YUV" class="headerlink" title="YUV"></a>YUV</h2><ol><li><p>YUV（也称 YCbCr）：Y 标识明亮度，UV 的作用时描述影像色彩及饱和度。</p><ul><li>主要采样格式有 YUV 4:2:0、YUV 4:2:2、YUV 4:4:4</li><li><a href="https://zhuanlan.zhihu.com/p/75735751">学习文档</a></li></ul></li><li><p>RGB 与 YUV 的关系：</p><ul><li>RGB 用于屏幕图像的展示。</li><li>YUV 用于采集与编码。</li></ul></li><li><p><a href="https://github.com/leandromoreira/digital_video_introduction/blob/master/README-cn.md#%E8%89%B2%E5%BA%A6%E5%AD%90%E9%87%87%E6%A0%B7">YUV 格式 4:2:0 标准格式</a>：4:2:0 并不意味着没有 Cr 分量，它实际指得对每行扫描线来说，只有一种色度分量，以 2:1 得抽样率存储。相邻得扫描行存储不同的色度分量，例如一行是 4:2:0 下一行就是 4:0:2 再下一行就是 4:2:0。</p></li></ol><h3 id="YUV-的存储格式"><a href="#YUV-的存储格式" class="headerlink" title="YUV 的存储格式"></a>YUV 的存储格式</h3><ul><li><p><a href="https://www.cnblogs.com/daner1257/p/10767570.html">参考文章</a></p></li><li><p>YUV 是一个比较笼统地说法，针对它的具体排列方式，可以分为很多种具体的格式：</p><ul><li>打包 (packed) 模式：将每个像素点的 Y、U、V 分量交叉排列并以像素点为单元连续的存放在同一数组中，通常几个相邻的像素组成一个宏像素 (macro-pixel)。</li><li>平面 (planar) 格式：使用三个数组分开连续的存放 Y、U、V 三个分量，即 Y、U、V 分别存放在各自的数组中。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 流媒体技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流媒体 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）Rust_枚举与模式匹配</title>
      <link href="/2022/07/06/si-rust-mei-ju-yu-mo-shi-pi-pei/"/>
      <url>/2022/07/06/si-rust-mei-ju-yu-mo-shi-pi-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举与模式匹配"><a href="#枚举与模式匹配" class="headerlink" title="枚举与模式匹配"></a>枚举与模式匹配</h1><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ol><li><p>枚举允许列举所有可能的值来定义一个类型。与 Cpp 类似。</p></li><li><p>将数据附加到枚举的变体中。</p><ul><li>不再需要额外使用 struct。</li><li>每个变体可以拥有不同的类型以及关联的数据量。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> IpAddr<span class="token punctuation">{</span>    <span class="token function">V4</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">V6</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">enum</span> IpAddr<span class="token punctuation">{</span>   <span class="token function">V4</span><span class="token punctuation">(</span>u8<span class="token punctuation">,</span> u8<span class="token punctuation">,</span> u8<span class="token punctuation">,</span> u8<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">V6</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="为枚举定义方法"><a href="#为枚举定义方法" class="headerlink" title="为枚举定义方法"></a>为枚举定义方法</h3><ol><li>可以使用 impl 为枚举定义方法。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Message <span class="token punctuation">{</span>    Quit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 未关联任何数据</span>    Move <span class="token punctuation">{</span> x<span class="token punctuation">:</span> i32<span class="token punctuation">,</span> y<span class="token punctuation">:</span> i32 <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">Write</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ChangeColor</span><span class="token punctuation">(</span>i32<span class="token punctuation">,</span> i32<span class="token punctuation">,</span> i32<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> Message <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> q <span class="token operator">=</span> Message<span class="token punctuation">:</span><span class="token punctuation">:</span>Quit<span class="token punctuation">;</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> Message<span class="token punctuation">:</span><span class="token punctuation">:</span>Move <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> w <span class="token operator">=</span> Message<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Write</span><span class="token punctuation">(</span>String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> Message<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ChangeColor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Option-枚举"><a href="#Option-枚举" class="headerlink" title="Option 枚举"></a>Option 枚举</h2><ol><li>定义于标准库中。</li><li>在 Prelude（预导入模块）中。</li><li>描述了某个值可能存在（某种类型）或不存在的情况。</li></ol><h3 id="Rust-没有-Null"><a href="#Rust-没有-Null" class="headerlink" title="Rust 没有 Null"></a>Rust 没有 Null</h3><ol><li><p>Null 的问题在于：当尝试像使用非 Null 值那样使用 Null 值的时候，就会引起某种错误。</p><ul><li>但是 Null 概念为了表示因某种原因而变为无效或缺失的值还是必须的，因此 Rust 提供了 Option。</li></ul></li><li><p>Rust 中类似 Null 概念的枚举- <code>Option&lt;T&gt;</code>。</p><ul><li>它包含在预导入模块中，可以直接使用。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">enum</span> Option<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token function">some</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>     None<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> some_number <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> some_string <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token string">"A String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> absent_number<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token operator">=</span> None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// None 类型不会自动推导需要指定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这样设计的优势在于 <code>Option&lt;T&gt;</code> 和 T 是不同的类型，不可以把 <code>Option&lt;T&gt;</code> 直接当成 T 来使用。</p><ul><li>若想使用 <code>Option&lt;T&gt;</code> 中的 T，必须将它转换为 T。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> x<span class="token punctuation">:</span> i8 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">let</span> y<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>i8<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error，必须强转后才能使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="控制流运算符-match"><a href="#控制流运算符-match" class="headerlink" title="控制流运算符 - match"></a>控制流运算符 - match</h2><ol><li><p>match 允许一个值与一系列模式进行匹配，并执行匹配的模式对应代码。</p></li><li><p>模式可以是字面值、变量名、通配符等。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Coin <span class="token punctuation">{</span>    Penny<span class="token punctuation">,</span>    Nickel<span class="token punctuation">,</span>    Dime<span class="token punctuation">,</span>    Quarter<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">test_match</span><span class="token punctuation">(</span>coin<span class="token punctuation">:</span> Coin<span class="token punctuation">)</span> <span class="token punctuation">-></span> u8 <span class="token punctuation">{</span>    <span class="token keyword">match</span> coin <span class="token punctuation">{</span>        Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Penny <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Penny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">1</span>        <span class="token punctuation">}</span>        Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Nickel <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">,</span>        Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Dime <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">,</span>        Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Quarter <span class="token operator">=</span><span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>绑定值的模式，匹配的分支可以绑定到被匹配对象的部分值。</p><ul><li>因此，可以从 enum 变体中提取值。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token attribute attr-name">#[derive(Debug)]</span> <span class="token keyword">enum</span> UsState <span class="token punctuation">{</span>     Alabama<span class="token punctuation">,</span>     Alaska<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">enum</span> Coin <span class="token punctuation">{</span>     Penny<span class="token punctuation">,</span>     Nickel<span class="token punctuation">,</span>     Dime<span class="token punctuation">,</span>     <span class="token function">Quarter</span><span class="token punctuation">(</span>UsState<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">fn</span> <span class="token function">test_match</span><span class="token punctuation">(</span>coin<span class="token punctuation">:</span> Coin<span class="token punctuation">)</span> <span class="token punctuation">-></span> u8 <span class="token punctuation">{</span>     <span class="token keyword">match</span> coin <span class="token punctuation">{</span>         Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Penny <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Penny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token number">1</span>         <span class="token punctuation">}</span>         Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Nickel <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">,</span>         Coin<span class="token punctuation">:</span><span class="token punctuation">:</span>Dime <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">,</span>         Coin<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Quarter</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 绑定 state 值进行模式匹配</span>             <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"State quarter from {:?}!"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token number">25</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模式匹配 <code>Option&lt;T&gt;</code>。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">fn</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> five <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> six <span class="token operator">=</span> <span class="token function">plus_one</span><span class="token punctuation">(</span>five<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> none <span class="token operator">=</span> <span class="token function">plus_one</span><span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">fn</span> <span class="token function">plus_one</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">match</span> x <span class="token punctuation">{</span>         None <span class="token operator">=</span><span class="token operator">></span> None<span class="token punctuation">,</span>         <span class="token function">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Some</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>match 匹配必须穷举所有的可能，不关心的分支可以用 <code>_</code> 通配符。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">0_u8</span><span class="token punctuation">;</span> <span class="token keyword">match</span> v <span class="token punctuation">{</span>     <span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token number">3</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     _ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a>if let</h2><ol><li><p>处理只关心一种匹配而忽略其他分支的情况。</p><ul><li>更少的代码，更少的缩进，更少的模版代码。</li><li>放弃了穷举的可能。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">0_u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">match</span> v <span class="token punctuation">{</span>     <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     _ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> v <span class="token punctuation">{</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>搭配 else 进行使用。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> v <span class="token punctuation">{</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）流媒体之音视频基础知识</title>
      <link href="/2022/07/05/yi-liu-mei-ti-zhi-yin-shi-pin-ji-chu-zhi-shi/"/>
      <url>/2022/07/05/yi-liu-mei-ti-zhi-yin-shi-pin-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="流媒体技术之音视频基础知识"><a href="#流媒体技术之音视频基础知识" class="headerlink" title="流媒体技术之音视频基础知识"></a>流媒体技术之音视频基础知识</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章的目的主要是为了记录学习流媒体过程中的知识，尽量成体系的总结。但是由于流媒体技术所涉及的知识点过多且个人能力有限，系列文章不免存在问题以及更新慢的情况如有问题请邮件联系，谢谢～。</p><p>本章主要是从最基础的音视频知识开始，大多是网上公开的资源在总结，如果很熟悉了也可以跳过。</p><p>话不多说，Let’s Go。</p><h2 id="什么是音视频"><a href="#什么是音视频" class="headerlink" title="什么是音视频"></a>什么是音视频</h2><h3 id="视频–你可以看得见什么"><a href="#视频–你可以看得见什么" class="headerlink" title="视频–你可以看得见什么"></a>视频–你可以看得见什么</h3><ul><li>视频的基础概念：一组图片（或者称为帧）以特定运行速率的滚动。</li></ul><h3 id="音频–你可以听到什么"><a href="#音频–你可以听到什么" class="headerlink" title="音频–你可以听到什么"></a>音频–你可以听到什么</h3><ul><li>声音是指压力波通过空气或者任何其他介质（例如气体、液体或者固体）传播的震动。<ul><li>人耳听觉范围（Hz 一秒中震动的次数）：<ul><li>次声波 |20Hz| 可听声波 |20kHz| 超声波</li></ul></li></ul></li></ul><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/CPT-Sound.png" alt="digital"></p><h2 id="编解码-压缩数据"><a href="#编解码-压缩数据" class="headerlink" title="编解码 - 压缩数据"></a>编解码 - 压缩数据</h2><blockquote><p>CODEC 是一种压缩或解压缩数字音频/视频的电子软件。 它将原始（未压缩的）数字音频/视频转换为压缩格式，反之亦然。</p><p><a href="https://en.wikipedia.org/wiki/Video_codec">Video_codec 维基百科介绍</a></p></blockquote><p>如果没有编解码会发生什么：我们打包数百万张图片到一个电影时，我们会获得一个很大的文件。</p><ul><li><p>假如我们创建一个 1080x1920 (高 x 宽)的视频，每个像素有 3 bytes，每秒 24 帧(每秒播放 24 张图片，这些图片给我们 16,777,216 种不同的颜色)，视频时长为 30 分钟。</p><pre class="line-numbers language-cpp"><code class="language-cpp">toppf <span class="token operator">=</span> <span class="token number">1080</span> <span class="token operator">*</span> <span class="token number">1920</span> <span class="token comment" spellcheck="true">//每帧所有的像素点</span>cpp <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">//每个像素的大小</span>tis <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token comment" spellcheck="true">//时长秒</span>fps <span class="token operator">=</span> <span class="token number">24</span> <span class="token comment" spellcheck="true">//每秒帧数</span>required_storage <span class="token operator">=</span> tis <span class="token operator">*</span> fps <span class="token operator">*</span> toppf <span class="token operator">*</span> cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>一个视频需要大约 250.28G 的存储空间，1.11Gbps 的带宽播放才能不卡顿。这就是我们为什么需要编解码的原因。</p><blockquote><p>具体视频编解码技术学习可参考 <a href="https://github.com/leandromoreira/digital_video_introduction/blob/master/README-cn.md">digital_video_introduction</a></p></blockquote><h3 id="音频编码基础"><a href="#音频编码基础" class="headerlink" title="音频编码基础"></a>音频编码基础</h3><h4 id="声音的采集"><a href="#声音的采集" class="headerlink" title="声音的采集"></a>声音的采集</h4><p>了解音频编码首先要知道音频是如何采集的，存在哪些参数。</p><ul><li><p>声音的三要素：</p><ol><li>音调：音频的快慢 男生 –&gt; 女生 –&gt; 儿童（快）。</li><li>音量：震动的幅度。</li><li>音色：谐波。</li></ol></li><li><p>声音的采集：</p><ol><li>量化采样：对一段模拟音频进行数字量化采样转换为数字信号。</li><li>位深（采样大小）：采样能表述的最大范围值。8bit 或 16bit。位深越大声音描述越好。</li><li>采样率：采样的频率就是采样率(1s 采样次数 8k、16K、32K、44.1K、48K)。</li><li>声道：单声道、双声道、多声道。</li><li>PCM 数据：最常见的原始数字数据存储格式。<ul><li>PCM 数据大小：<code>采样大小 * 采样率 * 声道</code>。例如：采样率为 44.1 KHz，采样大小为 16bit，双声道的 PCM 编码 WAV 文件，它的码率为 <strong>44.1K _ 16 _ 2 = 1411.2Kb/s</strong>。</li></ul></li><li>WAV 数据：既可以存储原始 PCM 数据，再 PCM 基础上加一个头信息。或者存储压缩数据。<ul><li><a href="https://www.jianshu.com/p/63d7aa88582b">WAV HEADER</a></li></ul></li></ol></li></ul><h4 id="信号遮蔽"><a href="#信号遮蔽" class="headerlink" title="信号遮蔽"></a>信号遮蔽</h4><p>信号遮蔽：现实中的声音为复合声音，例如对话中听到对方说话往往伴随着背景音，但是这些声音被对方的说话声遮蔽掉了，这就叫信号遮蔽。可以分为两种：</p><ol><li><p>频域遮蔽；</p><ul><li><p>图中静音门槛：低于这条曲线的均屏蔽忽略。</p></li><li><p>图中遮蔽源生成一条遮蔽曲线，将低于这个范围的均屏蔽。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/01.png" alt="频域遮蔽"></p></li></ul></li><li><p>时域遮蔽。</p><ul><li><p>接近主声音前后的前遮蔽与后遮蔽。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/02.png" alt="时域遮蔽"></p></li></ul></li></ol><h4 id="音频编码类型"><a href="#音频编码类型" class="headerlink" title="音频编码类型"></a>音频编码类型</h4><ul><li><p>通常音频编码类型有两种：</p><ol><li>消除冗余信息（有损压缩）：消除次声波与超声波以及被<strong>遮蔽掉的音频信号</strong>。</li><li>无损压缩：针对人可以听到的声音数据进行无损压缩。</li></ol></li><li><p>无损编码，熵编码：</p><ul><li>哈夫曼编码。</li><li>算术编码。</li><li>香农编码。</li></ul></li></ul><h4 id="音频编码过程"><a href="#音频编码过程" class="headerlink" title="音频编码过程"></a>音频编码过程</h4><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/03.png" alt="音频编码过程"></p><h4 id="常见的音频编解码器"><a href="#常见的音频编解码器" class="headerlink" title="常见的音频编解码器"></a>常见的音频编解码器</h4><p>常见的编解码格式 OPUS、AAC、Ogg、Speex、iLBC、AMR、G.711 等。</p><ul><li><p>AAC 在直播系统中应用比较广泛。</p></li><li><p>OPUS 是较新的音频编码器，WebRtc 默认使用 OPUS。</p></li><li><p>固话一般使用 G.711 系列，窄带音频。</p></li></ul><p>各音频编码格式质量比较：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/04.png"></p><p>各音频编码格式实时性：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/05.png"></p><h4 id="AAC-编码器介绍"><a href="#AAC-编码器介绍" class="headerlink" title="AAC 编码器介绍"></a>AAC 编码器介绍</h4><p>AAC 最开始基于 MPEG-2 的音频编码技术，MPEG-4 标准出现后，AAC 重新集成了其特性，加入了 SBR 技术和 PS 技术。</p><ul><li>目前常用的规格右 AAC LC、AAC HE V1、AAC HE V2。<ul><li>AAC LC（Low Complexity）：低复杂度规格，码流是 128k，音质好。</li><li>AAC HE：等于 AAC LC + SBR（Spectral Band Replication），核心思想是按音谱保存。低频编码保存主要成分，高频单独放大编码保存音质。码流在 64K 左右。</li><li>AAC HE V2：等于 AAC LC + SBR + PS（Parametric Stereo）。核心思想是双声道中的声音存在某种相似性，只需寻出一个声道的全部信息，然后花很少的字节用参数描述另一个声道与它不同的地方。</li></ul></li></ul><p>规格关系如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/06.png"></p><ul><li><p>AAC 格式：</p><ul><li>ADIF（Audio Data Interchange Format）：这种格式的特征是可以确定的找到这个音频数据的开始，只能从头开始解码，不能在音频数据流中间开始。这种格式常用在磁盘文件中。</li><li>ADTS（Audio Data Transport Stream）：这种格式的特征是每一帧都有一个同步字，所以可以在音频流的任何位置开始解码。它类似于数据流格式。</li></ul></li><li><p>ADTS 结构：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/07.png"></p></li></ul><h3 id="视频编解码基础"><a href="#视频编解码基础" class="headerlink" title="视频编解码基础"></a>视频编解码基础</h3><h4 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h4><ol><li>由一组图像组成：图像由像素组合而成，每个像素由 RGB 控制，整张图由多少像素点描述这就是分辨率。<ul><li>位深：用多少位标识一个像素。例如 RGB888(24 位）、RGBA(32 位）。</li><li>BGR：BMP 使用 BGR 格式，需要进行转换为 RGB 进行展示。</li></ul></li><li>为了传输/占用更小的空间而被压缩。</li><li>最终在显示设备上展示（未压缩）。<ul><li>PPI（pixels per inch）：一寸长的距离内放了多少像素点。PPI &gt; 300 书与视网膜级别。</li><li>DPI（Dots pen inch）：每英寸的像素点数。</li></ul></li></ol><h4 id="码流计算"><a href="#码流计算" class="headerlink" title="码流计算"></a>码流计算</h4><ol><li><p>分辨率：</p><ul><li>X 轴像素个数 * Y 轴像素个数；</li><li>常见宽高比 16:9、4:3，其他非标准宽高比需要转换。</li><li>360P/720P/1K/2K。</li></ul></li><li><p>帧率：</p><ul><li>每秒钟采集、播放图像的个数；</li><li>动画的帧率 25 帧/s；</li><li>常见的帧率 15 帧/s，30 帧/s，60 帧/s。</li></ul></li><li><p>码率：视频文件在单位时间内使用的数据流量，例如 1Mbps。</p><ul><li>未编码视频的 RGB 码流的大小：<ul><li>RGB 码流 = 分辨率（宽*高）x 3（Byte）x 帧率（25 帧）</li></ul></li></ul></li><li><p>Stride 跨距：内存中每行像素所占用的空间。为了内存对齐每行像素在内存中所占用的空间并不一定是图像的宽度。</p><ul><li><p>Stride 就是这些扩展内容的名称，Stride 也被称作 Pitch，如果图像的每一行像素末尾拥有扩展内容，Stride 的值一定大于图像的宽度值。</p><blockquote><p>比如分辨率 638x480 的 RGB24 图像，我们在内存处理的时候如果要以 16 字节对齐， 则 638<em>3/16=119.625 不能整除，因此不能 16 字节对齐，我们需要在每行尾部填充 6 个字节。就是 (638+2-&gt;640), 640</em>3/16=120。此时该图片的 stride 为 1920 字节。</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/50.png"></p></li></ul></li></ol><h4 id="图像的显示"><a href="#图像的显示" class="headerlink" title="图像的显示"></a>图像的显示</h4><ol><li>图像大小等于显示区域的大小，正常显示；<ul><li>因为往往图像大小与屏幕大小并不相等，往往与显示区域相比。</li></ul></li><li>图像小于显示区域，需要进行拉伸、留白；</li><li>图像大于显示区域，需要进行缩小、截断。</li></ol><p>由于视频帧相关信息比较多，包括存储格式 YUV、帧类型（I、P、B 等）、PTS 等各种信息，单独放到第二篇总结。</p><h2 id="容器-整合音视频的地方"><a href="#容器-整合音视频的地方" class="headerlink" title="容器 - 整合音视频的地方"></a>容器 - 整合音视频的地方</h2><blockquote><p>容器或称为封装格式描述了不同的数据元素和元数据是如何结合一起的。</p><p><a href="https://en.wikipedia.org/wiki/Digital_container_format">Wiki———Digital_container_format</a></p></blockquote><p>一个文件包含了所有的流（有音频和视频），并且也提供了<strong>音视频同步和通用元数据同步的方式</strong>，比如标题、分辨率等等。通常我们可以通过文件的后缀来判断文件格式。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/NoteBook/AVLearning/container.png" alt="container"></p>]]></content>
      
      
      <categories>
          
          <category> 流媒体技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流媒体 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）Rust_struct</title>
      <link href="/2022/07/03/san-rust-struct/"/>
      <url>/2022/07/03/san-rust-struct/</url>
      
        <content type="html"><![CDATA[<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><h2 id="定义-struct"><a href="#定义-struct" class="headerlink" title="定义 struct"></a>定义 struct</h2><ol><li><p>使用 struct 关键字，并为其命名。在花括号内，为所有字段（Field）定义名称和类型。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">struct</span> User<span class="token punctuation">{</span>    username<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    email<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    sign_in_count<span class="token punctuation">:</span> u64<span class="token punctuation">,</span>    active<span class="token punctuation">:</span> bool<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实例化 struct：</p><ul><li>为每个字段指定具体值。</li><li>无需按照声明的顺序进行指定。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> user1 <span class="token operator">=</span> User<span class="token punctuation">{</span>    email<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someone@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someusername123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    active<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    sign_in_count<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>访问 struct 里面的某个值：</p><ul><li>使用点标记法。</li><li>一旦 struct 的实例是可变的，那么实例中的所有字段都是可变的。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> user2 <span class="token operator">=</span> User <span class="token punctuation">{</span>    email<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someone@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someusername123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    active<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user2<span class="token punctuation">.</span>email <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"aaaa@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>struct 作为函数的返回值。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> _user_info<span class="token punctuation">:</span> User <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aaa@ex.com"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ccl"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> String<span class="token punctuation">,</span> username<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> User <span class="token punctuation">{</span>    User <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>        email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        active<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同名字段简写：</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">fn</span> <span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> String<span class="token punctuation">,</span> username<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> User <span class="token punctuation">{</span>     User <span class="token punctuation">{</span>         username<span class="token punctuation">,</span>         email<span class="token punctuation">,</span>         sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>         active<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>struct 更新语法：</p><ul><li>当想基于某个 struct 实例来创建一个新实例的时候，可以使用 struct 更新语法。</li><li>语法糖 <code>..user_info</code>，将其余项赋值为 <code>user_info</code> 的。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> _user_info2<span class="token punctuation">:</span> User <span class="token operator">=</span> User <span class="token punctuation">{</span>     email<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"another@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     username<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"anotherusername"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     active<span class="token punctuation">:</span> user_info<span class="token punctuation">.</span>active<span class="token punctuation">,</span>     sign_in_count<span class="token punctuation">:</span> user_info<span class="token punctuation">.</span>sign_in_count<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> _user_info3<span class="token punctuation">:</span> User <span class="token operator">=</span> User <span class="token punctuation">{</span>     email<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"another@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     username<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"anotherusername"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">..</span>user_info <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Tuple-struct"><a href="#Tuple-struct" class="headerlink" title="Tuple struct"></a>Tuple struct</h2><ol><li><p>可以定义类似 tuple 的 struct，叫做 tuple struct。</p><ul><li>Tuple struct 整体有个名称，但里面的元素没有名称。</li><li>适用：想给整个 tuple 进行命名，并让它不同于其他 tuple，而且又不需要给每个元素起名。</li></ul></li><li><p>定义 tuple struct：使用 struct 关键字，后边是名称以及里面的元素类型。</p><ul><li>下例中的 black 与 origin 是不同类型是，属于不同 tuple struct 的实例。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token function">Color</span><span class="token punctuation">(</span>i32<span class="token punctuation">,</span> i32<span class="token punctuation">,</span> i32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token function">Point</span><span class="token punctuation">(</span>i32<span class="token punctuation">,</span> i32<span class="token punctuation">,</span> i32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> black <span class="token operator">=</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> origin <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Unit-Like-Struct-没有任何字段"><a href="#Unit-Like-Struct-没有任何字段" class="headerlink" title="Unit-Like Struct 没有任何字段"></a>Unit-Like Struct 没有任何字段</h2><ol><li>可以定义没有任何字段的 struct，叫做 Unit-Like struct。</li><li>适用于需要在某个类型上实现某个 trait， 但是在里面又没有想要存储的数据。</li></ol><h2 id="struct-数据的所有权"><a href="#struct-数据的所有权" class="headerlink" title="struct 数据的所有权"></a>struct 数据的所有权</h2><ol><li>以前边的 User struct 为例，其中的字段使用 String 而不是 &amp;str，则表示 User struct 拥有全部的字段所有权。<ul><li>只要 struct 实例是有效的，那么里面的字段数据也是有效的。</li></ul></li><li>struct 里也可以存放引用，但这需要使用生命周期。</li></ol><h2 id="struct-方法"><a href="#struct-方法" class="headerlink" title="struct 方法"></a>struct 方法</h2><ol><li><p>方法和函数类似：fn 关键字、名称、参数、返回值。</p></li><li><p>方法与函数不同：</p><ul><li>方法是在 struct （或 enum、trait 对象）的上下文中定义。</li><li>第一个参数是 self，表示方法被调用的 struct 实例。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token attribute attr-name">#[derive(Debug)]</span> <span class="token keyword">struct</span> Rectangle <span class="token punctuation">{</span>     width<span class="token punctuation">:</span> u32<span class="token punctuation">,</span>     length<span class="token punctuation">:</span> u32<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">impl</span> Rectangle <span class="token punctuation">{</span>     <span class="token keyword">fn</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>         <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> rect <span class="token operator">=</span> Rectangle <span class="token punctuation">{</span>         width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>         length<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:#?}"</span><span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 impl 块里定义方法，方法的第一个参数可以是 &amp;self，也可以获得其所有权或可变借用。和其他参数一样。同样可以获得更良好的代码组织。</p></li><li><p>方法参数，与普通函数类似任意携带：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span> Rectangle <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Rectangle<span class="token punctuation">)</span> <span class="token punctuation">-></span> bool <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">></span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length <span class="token operator">></span> other<span class="token punctuation">.</span>length    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="关联函数"><a href="#关联函数" class="headerlink" title="关联函数"></a>关联函数</h3><ol><li><p>可以在 impl 块里定义不把 self 作为第一个参数的函数名，它们叫关联函数（不是方法），例如 <code>String::from()</code>。</p></li><li><p>关联函数通常用于构造器。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span> Rectangle <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Rectangle<span class="token punctuation">)</span> <span class="token punctuation">-></span> bool <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">></span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length <span class="token operator">></span> other<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">square</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> Rectangle <span class="token punctuation">{</span>        Rectangle <span class="token punctuation">{</span>            width<span class="token punctuation">:</span> size<span class="token punctuation">,</span>            length<span class="token punctuation">:</span> size<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> s <span class="token operator">=</span> Rectangle<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:#?}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="多个-impl-块"><a href="#多个-impl-块" class="headerlink" title="多个 impl 块"></a>多个 impl 块</h3><ol><li>每个 struct 允许拥有多个 impl 块。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span> Rectangle <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span> Rectangle <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Rectangle<span class="token punctuation">)</span> <span class="token punctuation">-></span> bool <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">></span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length <span class="token operator">></span> other<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">square</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> Rectangle <span class="token punctuation">{</span>        Rectangle <span class="token punctuation">{</span>            width<span class="token punctuation">:</span> size<span class="token punctuation">,</span>            length<span class="token punctuation">:</span> size<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）Rust_所有权</title>
      <link href="/2022/07/03/er-rust-suo-you-quan/"/>
      <url>/2022/07/03/er-rust-suo-you-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章节主要介绍所有权，这也是 Rust 提供安全编码所依赖的重要功能。</p><h2 id="Stack-Vs-Heap"><a href="#Stack-Vs-Heap" class="headerlink" title="Stack Vs Heap"></a>Stack Vs Heap</h2><ol><li>在 Rust/C++/C 等这样的系统级编程语言里，一个值是在 stack 上还是在 heap<br>上对语言的行为和你为什么要做某些决定是有更大的影响的。</li><li>这两者在数据存储结构上有很大的不同：<ul><li>Stack 按值的接收顺序来进行存储，按相反的顺序将其移除（后进先出，LIFO）。<ul><li>添加数据叫做压入栈，移除数据叫做弹出栈。</li><li>所有存储在 Stack<br>上的数据必须拥有已知的固定大小。编译时大小未知的数据或运行时大小可能发生变化的数据必须存放在<br>heap 上。</li></ul></li><li>Heap 内存的组织性差一些：<ul><li>当把数据存放在 heap 时，会请求一定数量的空间。</li><li>操作系统在 heap<br>里找到一块足够大的空间，并将其标记为在用，返回一个指针，也就是这个空间的地址。</li><li>这个过程叫做在 heap 上分配，有时仅仅称为<code>分配</code>。</li></ul></li></ul></li><li>访问数据：<ul><li>访问 heap 中的数据要比防伪 stack 中的慢得多，因为要通过指针才能找到 heap<br>中的数据。<ul><li>对于现代的处理器来说，由于缓存的原因如果指令在内存中跳转的次数越少，那么速度就越快。</li><li>如果数据存放的距离比较近，那么处理器的处理速度就会更快一些（Stack 上）。</li></ul></li></ul></li><li>函数调用：<ul><li>当代码调用函数时，值被传入到函数（也包括指向 heap 的指针）。函数本地的变量被压到 stack 上，当函数结束后，这些值会从 stack 上弹出。</li></ul></li><li>所有权存在的原因：<ul><li>跟踪代码中哪些部分正在使用 heap 的哪些数据。</li><li>最小化 heap 上的重复数据量。</li><li>清理 heap 上未使用的数据以避免空间不足。</li></ul></li></ol><h2 id="所有权的规则"><a href="#所有权的规则" class="headerlink" title="所有权的规则"></a>所有权的规则</h2><ol><li>每个值都有一个变量，这个变量是该值的所有制。</li><li>每个值同时只能有一个所有者。</li><li>当所有者超出作用域（scope）时，该值将被删除。</li></ol><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><ol><li><p>这里以 Sting 举例来说明所有权，String 比那些基础数据类型更复杂。</p></li><li><p>字符串字面值即程序里手写的那些字符串值，它是不可变的。</p></li><li><p>Rust 还有第二种字符串类型：String</p><ul><li>在 heap 上分配。能够存储在编译时未知数量的文本。</li></ul></li><li><p>使用 from 函数从字符串字面值创建出 String 类型。</p><ul><li><code>let s = String::from("hello);</code>。</li><li>String 字符串时可以被修改的。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">", World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Rust 中对于某个值来说，当拥有它的变量走出作用域后，内存会立即释放交换给操作系统。</p><ul><li>离开作用域后 Rust 会自动调用 drop 函数来进行释放。</li></ul></li></ol><h3 id="变量与数据交互的方式：移动-Move"><a href="#变量与数据交互的方式：移动-Move" class="headerlink" title="变量与数据交互的方式：移动 Move"></a>变量与数据交互的方式：移动 Move</h3><ol><li><p>Rust 中，以 String 为例，当进行赋值是默认是浅拷贝不会复制 heap 上的数据，这时当离开作用域释放时存在二次释放问题。因此 Rust 中的拷贝默认为 move 操作，即源失效。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">", World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"s = {}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/////////////</span>error<span class="token punctuation">[</span>E0382<span class="token punctuation">]</span><span class="token punctuation">:</span> borrow of moved value<span class="token punctuation">:</span> `s`<span class="token operator">-</span><span class="token punctuation">-></span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token operator">|</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">move</span> occurs because `s` has <span class="token keyword">type</span> `String`<span class="token punctuation">,</span> which does not implement the `Copy` <span class="token keyword">trait</span><span class="token punctuation">...</span><span class="token number">6</span> <span class="token operator">|</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token operator">|</span> <span class="token operator">-</span> value moved here<span class="token number">7</span> <span class="token operator">|</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"s = {}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token operator">^</span> value borrowed here after <span class="token keyword">move</span><span class="token operator">|</span><span class="token operator">=</span> note<span class="token punctuation">:</span> this error originates <span class="token keyword">in</span> the macro `$<span class="token keyword">crate</span><span class="token punctuation">:</span><span class="token punctuation">:</span>format_args_nl` <span class="token punctuation">(</span><span class="token keyword">in</span> Nightly builds<span class="token punctuation">,</span> run with <span class="token operator">-</span>Z macro<span class="token operator">-</span>backtrace <span class="token keyword">for</span> more info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要对 heap 上的 String 数据进行深度拷贝，可以使用 clone 方法。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"s = {}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Stack 上的数据进行复制：</p><ul><li>Copy trait，可以用于像整数这样的完全存放在 stack 上的类型，如果一个类型实现了 Copy 这个 trait，那么旧的变量在赋值后仍然可用。</li><li>如果一个类型或者该类型的一部分实现了 Drop trait，那么 Rust 就不允许它再去实现 Copy trait 了。</li></ul></li></ol><h2 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h2><ol><li><p>在语义上，将值传递给函数和把值赋给变量是类似的。</p><ul><li>将值传递给函数将要发生的移动或复制。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">take_ownership</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//println!("{}", s); err</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">make_copy</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">take_ownership</span><span class="token punctuation">(</span>some_string<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> some_string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">make_copy</span><span class="token punctuation">(</span>some_number<span class="token punctuation">:</span> i32<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> some_number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="返回值与作用域"><a href="#返回值与作用域" class="headerlink" title="返回值与作用域"></a>返回值与作用域</h3><ol><li><p>函数在返回值的过程中同样也会发生所有权的转移：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">gives_ownership</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s2 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">takes_and_gives_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">gives_ownership</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token keyword">let</span> some_string <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    some_string<span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">takes_and_gives_back</span><span class="token punctuation">(</span>a_string<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    a_string<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个变量的所有权总是遵循同样的模式：</p><ul><li>把一个值赋给其他变量时就会发生移动。</li><li>当一个包含 heap 数据的变量离开作用域时，它的值就会被 drop 函数清理，除非数据的所有权移动到了另一个变量上了。</li></ul></li></ol><h2 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h2><ol><li><p>如何能使用某个变量而不获取其所有权？</p></li><li><p>如下这种属于传递了所有权的方式比较麻烦，Rust 中用一种引用方式。</p></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The length of '{}' is {}."</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> usize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>s<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li><p>参数类型时 &amp;String 而不是 String。</p></li><li><p>&amp; 符号就表示引用：允许你引用某些值而不取得其所有权。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The length of '{}' is {}."</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">)</span> <span class="token punctuation">-></span> usize <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="借用"><a href="#借用" class="headerlink" title="借用"></a>借用</h3><ol><li>如上一节的示例代码，将引用作为函数参数的行为就叫做借用。</li><li>默认的借用是无法修改的。</li><li>使用 mut 进行修饰即可修改。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s1 <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length_and_append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The length of '{}' is {}."</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">calculate_length_and_append</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> usize <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">", world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h3><ol><li><p>可变引用有一个重要的限制：在特定作用域内，对某一块数据，只能有一个可变的引用。</p><ul><li>这样可以编译时防止数据竞争，数据竞争的条件：<ol><li>两个或多个指针同时访问同一个数据。</li><li>至少有一个指针用于写入数据。</li><li>没有使用任何机制来同步对数据的访问。</li></ol></li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// let s3 = &amp;mut s1; err</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The length of {} {}"</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>可以通过创建新的作用域，来允许非同时的创建多个可变引用。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不可以同时拥有一个可变引用和一个不可变的引用。</p><ul><li>多个不可变的引用是允许的。</li></ul></li></ol><h3 id="悬空引用-Dangling-References"><a href="#悬空引用-Dangling-References" class="headerlink" title="悬空引用 Dangling References"></a>悬空引用 Dangling References</h3><ol><li><p>悬空指针：一个指针引用来内存中的某个地址，而这块地址可能已经释放并分配给其他人使用。</p></li><li><p>在 Rust 里，编译器可以保证引用永远都不是悬空引用：</p><ul><li>如果你引用了某些数据，编译器将保证在引用离开此作用域之前数据不会离开作用域。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">dangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">dangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>String <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// err</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ol><li><p>Rust 的另外一种不支持所有权的数据类型：切片（slice）。</p></li><li><p>一道题，编写一个函数：</p><ul><li>它接收字符串作为参数。</li><li>返回它在这个字符串里找到的第一个单词。</li><li>如果函数没找到任何空格，那么整个字符串就被返回。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> word_index <span class="token operator">=</span> <span class="token function">first_world</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> word_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">first_world</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">)</span> <span class="token punctuation">-></span> usize <span class="token punctuation">{</span>    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">b' '</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上面这种是基础的实现方法，但是存在 <code>word_index</code> 与 String 不匹配的情况（例如 string 被其他函数 clear 掉了，相当于迭代器失效）。因此 Rust 提供了 切片来解决此类问题。</p></li><li><p>字符串切片是指向字符串中的一部分内容的引用。</p><ul><li>形式：[开始索引。. 结束索引]</li><li>开始索引就是切片的起始位置的索引值。</li><li>结束索引是切片中止位置的下一个索引值。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">..</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"hello = {}, world = {}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">,</span> world<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他注意，字符串切片的范围索引必须发生在有效的 UTF-8 字符边界内。如果尝试从一个多字节的字符中创建字符串切片，程序会保存并退出。</p><ul><li>语法糖：</li></ul><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> whole <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新编写一开始的问题：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">first_world_v2</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>str <span class="token punctuation">{</span>    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">b' '</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将字符串切片作为参数传递：</p><ul><li><code>fn test(s:&amp;String) -&gt; &amp;str{}</code></li><li>有经验的开发者会采用 &amp;str 作为参数类型，因为这样就可以同时接收 String 和 &amp;str 类型的参数了。</li><li><code>fn test(s:&amp;str) -&gt; &amp;str{}</code></li><li>使用字符串切片，直接调用该函数，使用 String， 可以创建一个完整的 String 切片来调用该函数。</li><li>定义函数时使用字符串切片来代替字符串引用会使 API 更加通用，且不会损失任何功能。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）Rust_通用编程概念.md</title>
      <link href="/2022/07/02/yi-rust-tong-yong-bian-cheng-gai-nian-md/"/>
      <url>/2022/07/02/yi-rust-tong-yong-bian-cheng-gai-nian-md/</url>
      
        <content type="html"><![CDATA[<h1 id="通用编程概念"><a href="#通用编程概念" class="headerlink" title="通用编程概念"></a>通用编程概念</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又开新坑了，笔记系列主要学习了 Rust 官方的<a href="https://doc.rust-lang.org/book/title-page.html">文档</a>，配合 B 站的<a href="https://www.bilibili.com/video/BV1hp4y1k7SV?spm_id_from=333.999.0.0">视频</a>效果更佳。</p><p>本章节主要介绍了一些 Rust 通用的基础概念，其实这部分对于已经有编程经验的人来说都很了解，可以快速浏览下了解 Rust 与其他语言的一些细节不同之处。</p><p>话不多说，Let’s Go.</p><h2 id="变量与可变性"><a href="#变量与可变性" class="headerlink" title="变量与可变性"></a>变量与可变性</h2><ol><li>声明变量使用 let 关键字。</li><li>默认情况下，变量是不可变的。</li><li>使用 mut 标记可变变量。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>error<span class="token punctuation">[</span>E0384<span class="token punctuation">]</span><span class="token punctuation">:</span> cannot assign twice to immutable variable `x` <span class="token operator">-</span><span class="token punctuation">-></span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">1</span>  <span class="token operator">|</span><span class="token number">4</span> <span class="token operator">|</span>     <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token operator">|</span>         <span class="token operator">-</span>  <span class="token operator">|</span>         <span class="token operator">|</span>  <span class="token operator">|</span>         first assignment to `x`  <span class="token operator">|</span>         help<span class="token punctuation">:</span> consider making this binding mutable<span class="token punctuation">:</span> `<span class="token keyword">mut</span> x`<span class="token number">5</span> <span class="token operator">|</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6</span> <span class="token operator">|</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token operator">|</span> <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> cannot assign twice to immutable variable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><ol><li>常量（constant)，常量在绑定值以后也是不可变的，但是它与不可变的变量有些区别：<ul><li>不可以使用 mut， 常量永远都是不可变的。</li><li>声明常量使用 const 关键字，它的类型必须显式的标注。</li><li>常量可以在任何作用域内声明，包括全局作用域。</li><li>常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值。</li></ul></li><li>在程序运行期间，常量在其声明的作用域内一直有效。</li><li>命名规范：Rust 里常量使用全大写字母，每个单词之间用下划线分隔开，例如：<code>const MAX_POINTS: u32 = 100_000;</code>。</li></ol><h3 id="Shadowing-隐藏"><a href="#Shadowing-隐藏" class="headerlink" title="Shadowing 隐藏"></a>Shadowing 隐藏</h3><ol><li><p>可以使用相同的名字声明新的变量，新的变量就会 shadow 之前声明的同名变量。</p><ul><li>在后续的代码中这个变量名代码的就是新的变量。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token comment" spellcheck="true">//x = 6; error</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//shadowing</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>shadow 和把变量标记为 mut 是不一样的：</p><ul><li>如果不使用 let 关键字，那么重新给非 mut 变量进行赋值时会导致编译错误。</li><li>而使用 let 声明的同名新变量，也是不可变的。</li><li>使用 let 声明的同名新变量，它的类型可以与之前不同。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> space <span class="token operator">=</span> <span class="token string">"    "</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// str</span><span class="token keyword">let</span> space <span class="token operator">=</span> space<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// usize</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"now space value is {}"</span><span class="token punctuation">,</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li><p>标量和复合类型。</p></li><li><p>Rust 是静态编译语言，在编译时必须知道所有变量的类型：</p><ul><li>基于使用的值，编译器通常能够推断出它的具体类型。</li><li>但如果可能的类型比较多（例如把 String 转为整数 parse<br>方法），就必须添加类型的显式标注，否则编译会报错。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> guess <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Not a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>error<span class="token punctuation">[</span>E0282<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">type</span> annotations needed<span class="token operator">-</span><span class="token punctuation">-></span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token operator">|</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token keyword">let</span> guess <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>"Not a number"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> consider giving `guess` a <span class="token keyword">type</span><span class="token comment" spellcheck="true">// 需要指定类型</span><span class="token keyword">let</span> guess<span class="token punctuation">:</span> u32 <span class="token operator">=</span> <span class="token string">"42"</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Not a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><ol><li><p>整数类型没有小数部分。</p></li><li><p>无符号整数类型以 u 开头。例如 u32 就是一个无符号的整数类型，占据 32 位的空间。</p></li><li><p>有符号整数类型以 i 开头。</p></li><li><p>Rust 整数类型关系：</p><table><thead><tr><th>length</th><th>Signed</th><th>unsigned</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table></li><li><p>isize 与 usize 类型的位数由程序运行的计算机架构所决定：</p><ul><li>如果是 64 位计算机，那就是 64 位。</li><li>32 位同理。</li></ul></li><li><p>整数的字面值，除了 byte 类型外，所有的数值字面类型都允许使用类型后缀：</p><ul><li>不清楚应该使用那种类型，可以使用 Rust 默认类型：</li><li>整数默认 i32 ：速度很快针对性优化。</li></ul><table><thead><tr><th>Number literals</th><th>Example</th></tr></thead><tbody><tr><td>Decimal</td><td>98_222</td></tr><tr><td>Hex</td><td>0xff</td></tr><tr><td>Octal</td><td>0077</td></tr><tr><td>Binary</td><td>0b1111_0000</td></tr><tr><td>Byte(u8 only)</td><td>b’A’</td></tr></tbody></table></li><li><p>整数溢出，在不同的编译模式下有不同效果：</p><ul><li>例如在 u8 的范围是 0-255，如果设置为 256：<ul><li>在 debug 模式下，Rust 会检测整数溢出，发生溢出后程序在运行时就会 panic。</li></ul></li><li>在 release 模式下，Rust 不会检测整数溢出，如果溢出则会进行<code>环绕</code>操作，即 256 变为 0。</li></ul></li></ol><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><ol><li><p>Rust 有两种基础的浮点类型，也就是含有小数部分的类型：</p><ul><li>f32，32 位，单精度。</li><li>f64，64 位，双精度。</li></ul></li><li><p>Rust 的浮点类型使用 IEEE-754 标准来进行描述。</p></li><li><p>f64 是默认类型，因为在现代 CPU 上 f64 和 f32 的速度出啊不多，而且精度更高。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// f64</span><span class="token keyword">let</span> y<span class="token punctuation">:</span> f32 <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// f32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>数值操作：<code>+ - * / %</code>。</p></li></ol><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><ol><li>Rust 的布尔类型也只有两个值：true 和 false。</li><li>占用一个字节大小，符号是 bool。</li></ol><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><ol><li>Rust 语言中 char 类型被用来描述语言中最基础的单个字符。</li><li>字符类型的字面值使用单引号，占用 4 字节大小。</li><li>是 Unicode 标量值，可以表示比 ASCII 多得多的字符内容：拼音、中日韩文、零长度空白字符、emoji<br>表情等。</li></ol><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><ol><li>复合类型可以将多个值放在一个类型里。</li><li>Rust 提供里两种基础的复合类型：元组（Tuple)、数组。</li></ol><h4 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h4><ol><li><p>Tuple 可以将多个类型的多个值放在一个类型里。</p></li><li><p>Tuple 的长度是固定的：一旦声明就无法改变。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> tup<span class="token punctuation">:</span> <span class="token punctuation">(</span>i32<span class="token punctuation">,</span> f64<span class="token punctuation">,</span> u8<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{},{},{}"</span><span class="token punctuation">,</span> tup<span class="token number">.0</span><span class="token punctuation">,</span> tup<span class="token number">.1</span><span class="token punctuation">,</span> tup<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取 tuple 的元素值：</p><ul><li>可以使用模式匹配来解构（destructure）一个 tuple 进而获取元素的值。</li><li>也可以像上边例子中使用元素索引号进行获取。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> tup<span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"x={},y={},z={}"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 500 6.4 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li><p>数组也可以将多个值放在一个类型里。</p></li><li><p>数组中每个元素的类型必须相同。</p></li><li><p>数组的长度也是固定的。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>数组的用处。</p><ul><li>如果想要让数据存储在 stack 上而不是 heap，或者想保证固定的元素，这时使用数组更有好处。</li><li>数组没有 Vector 灵活：Vector 与数组类似，由标准库提供而数组由预导入模块提供。</li><li>Vector 长度可变，当不确定使用哪种时，优先使用 Vector。</li></ul></li><li><p>数组的类型：</p><ul><li>数组的类型表示格式：<code>[类型；长度]</code> ==&gt; <code>let a: [i32; 5] = [1,2,3,4,5];</code></li><li>如果数组中每个元素值都相同的，那么可以使用如下初始化方法：<code>let a = [3; 5];</code> 等同 <code>let a = [3,3,3,3,3];</code>。</li></ul></li><li><p>访问数组的元素：</p><ul><li>数组是 stack 上分配的单个块的内存。</li><li>可以使用索引来访问数组的元素。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"a[0] = {}, a[2] = {}"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1、3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果访问的索引超出来数组的范围，那么：<ul><li>编译会通过。</li><li>运行时会报错（runtime 时会 panic），Rust 不允许其继续访问相应地址的内存。</li></ul></li></ul></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li>声明函数使用 <code>fn</code> 关键字。</li><li>依照惯例，针对函数和变量名，Rust 使用 snake case 命名规范：<ul><li>所有的字母都是小写的，单词之间使用下划线分隔开。</li></ul></li></ol><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ol><li><p>parameters、arguments，即形参与实参。</p></li><li><p>在函数签名里，必须声明每个参数的类型。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">another_function</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// argument</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数需要指明类型</span><span class="token comment" spellcheck="true">// parameter</span><span class="token keyword">fn</span> <span class="token function">another_function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> i32<span class="token punctuation">,</span> y<span class="token punctuation">:</span> i32<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"the value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"the value of y is: {}"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="函数体中的语句与表达式"><a href="#函数体中的语句与表达式" class="headerlink" title="函数体中的语句与表达式"></a>函数体中的语句与表达式</h3><ol><li>函数体由一系列语句组成，可选的由一个表达式结束。</li><li>Rust 是一个基于表达式的语言。</li><li>语句是执行一些动作的命令。</li><li>表达式会计算产生一个值。</li><li>函数定义也是语句。</li><li>语句不返回值，所以不可以使用 let 将一个语句赋给一个变量。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token comment" spellcheck="true">//函数声明语句</span><span class="token keyword">fn</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//y = 绑定语句 , 5 + 6 不包括分号是表达式</span>    <span class="token comment" spellcheck="true">//let x = (let z = 7); err: 语句不能被赋值</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// {} 其中包含 x + 3 是块中的最后一个表达式，相当于返回值</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        x <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">// 如果加上分号使其变为语句 x+3; 则返回的知识一个空的 tuple ()</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The value of y is : {}"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ol><li>在符号 -&gt; 后边声明函数返回值的类型，但是不可以为返回值命名。</li><li>在 Rust 里面，返回值就是函数体里面最后一个表达式的值。</li><li>若想提前返回，需要使用 return 关键字，并指定一个值。<ul><li>大多数函数都是默认使用最后一个表达式为返回值。</li></ul></li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">five</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> i32 <span class="token punctuation">{</span>    <span class="token number">5</span> <span class="token comment" spellcheck="true">// 返回最后一个表达式 5</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">plus_five</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> i32<span class="token punctuation">)</span> <span class="token punctuation">-></span> i32 <span class="token punctuation">{</span>    x <span class="token operator">+</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">// 返回表达式 x+5 的值，加上分号就变成语句了</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h3><ol><li><p>if 表达式允许根据条件来执行不同的代码分支。</p><ul><li>条件必须是 bool 类型。</li></ul></li><li><p>if 表达式中，与条件相关联的代码块叫做分支。</p></li><li><p>可选的，在后边可以加上一个 else 表达式。</p></li><li><p>使用 else if 处理多重条件。</p><ul><li>如果使用了多余一个 else if，那么最好使用 match 来重构代码。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>      <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"condition was true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"condition was false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"number is divisible by 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"number is divisible by 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>      <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"number is divisible by 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"number is not divisible by 4, 3 or 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 let 语句中使用 if：因为 if 是一个表达式，所以可以将它放在 let<br>语句中等号右边。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">ifvar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两侧的类型需要一致</span>   <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The value of number is : {}"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ol><li>Rust 提供了三种循环：loop、while 和 for。</li></ol><h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><ol><li><p>loop 关键字告诉 Rust 反复执行一块代码，直到喊停为止。或者使用 break<br>来进行中止。</p><pre class="line-numbers language-rust"><code class="language-rust"> <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>     count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"loop count : {}"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>         <span class="token keyword">break</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="while-条件循环"><a href="#while-条件循环" class="headerlink" title="while 条件循环"></a>while 条件循环</h4><ol><li><p>每次执行循环体前都要判断一次条件。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}!"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    number <span class="token operator">=</span> number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"LIFTOFF!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="for-循环遍历集合"><a href="#for-循环遍历集合" class="headerlink" title="for 循环遍历集合"></a>for 循环遍历集合</h4><ol><li>可以使用 while 或 loop 遍历集合，但是易错且低效。</li><li>使用 for 循环更加简洁紧凑，它可以针对集合中的每个元素来执行一些代码。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// iter 迭代器</span><span class="token keyword">for</span> element <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"the value is : {}"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><ol><li>标准库提供。</li><li>指定一个开始数字和一个结束数字，Range 可以生成它们之间的数字（不包含结束）。</li><li>rev 方法可以反转 Range。</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">for_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}!"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"LIFTOFF!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）LLVM编译器--Clang_ASTMatcher</title>
      <link href="/2022/06/04/si-llvm-bian-yi-qi-clang-astmatcher/"/>
      <url>/2022/06/04/si-llvm-bian-yi-qi-clang-astmatcher/</url>
      
        <content type="html"><![CDATA[<h1 id="Clang-ASTMatcher-学习"><a href="#Clang-ASTMatcher-学习" class="headerlink" title="Clang ASTMatcher 学习"></a>Clang ASTMatcher 学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一章中介绍了一个通过递归遍历整个 AST 树的方法 <code>RecursiveASTVisitor</code> ，但当我们开始使用它来实现一些功能时发现可能由于代码结构比较复杂，想要找到我们需要的目标代码节点需要编写大量的代码来实现。本章介绍一个新的功能 clang ASTMatcher ，它提供了给我们一些语法、接口可以通过类似命令行的方式来实现快速匹配我们需要的节点，并且配合 clang-query 来快速验证查询语法的正确性，大大提高效率。</p><h2 id="ASTMatcher-介绍"><a href="#ASTMatcher-介绍" class="headerlink" title="ASTMatcher 介绍"></a>ASTMatcher 介绍</h2><p>一些基础的概念，参考了这篇<a href="https://cloud.tencent.com/developer/article/1523137">文章</a>，主要的内容如下：</p><ul><li>ASTMatcher 主要时允许用户<strong>通过 matcher 提供的规则</strong>编写一个程序来匹配 AST 节点并能通过访问节点的 c++ 接口来获取该 AST 节点的属性、源位置等任何信息，其主要由宏与模板驱动，用法和函数式编程类似，其可实现简单精准高效的匹配。</li><li><a href="https://clang.llvm.org/docs/LibASTMatchersReference.html">主要的规则</a><ul><li>Note Matchers：匹配特定类型节点；<ul><li>eg: objcPropertyDecl() ：匹配 OC 属性声明节点。</li></ul></li><li>Narrowing Matchers：匹配具有相应属性的节点；<ul><li>eg: hasName()、hasAttr()：匹配具有指定名称、attribute 的节点。</li></ul></li><li>AST Traversal Matchers：允许在节点之间递归匹配；；<ul><li>eg: hasAncestor()、hasDescendant()：匹配祖、后代类节点。</li></ul></li></ul></li></ul><p>一下子一堆的概念，是不是一脸懵逼，没关系后边我会提供一个可以运行的例子，看再多概念总没有实际操作一把来的有意思，但是这些基础的知识还是要先了解下，我们可以先从官方提供的文档入手，<a href="https://clang.llvm.org/docs/LibASTMatchers.html">ASTMatcher 官方文档</a>。</p><p>看不太懂没有关系，也可以直接来看下这个例子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">recordDecl</span><span class="token punctuation">(</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isDerivedFrom</span><span class="token punctuation">(</span><span class="token string">"Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>在这段代码中，<code>recordDecl</code> 、<code>hasName</code> 、<code>isDerivedFrom</code>，都属于 clang matcher 提供给我们的功能函数，具体的功能可以在这个<a href="https://clang.llvm.org/docs/LibASTMatchersReference.html">规则</a>网站中查找到。</p><ul><li><p>以 recordDecl 为例，搜索下可以得到下图的结果，查看描述可以发现他是用来匹配<strong>类、结构体、联合体声明</strong>的节点。因此 recordDecl() 的含义就是匹配所有类、结构体、联合体声明的节点。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_1.png" alt="recordDecl"></p></li><li><p>但是有可能在一个 AST 树中有超级多的声明，因此我们需要缩小查询范围，查询 hasName 可以知道它是用来匹配具有指定名称的节点。因此 <code>recordDecl(hasName("Foo"))</code> 的含义就是匹配所有类、结构体、联合体声明的节点<strong>中名称为 Foo 的节点</strong>。</p></li><li><p><code>isDerivedFrom(xxx)</code> 是匹配从 xxx 派生的类，<code>recordDecl(hasName("Foo"), isDerivedFrom("Bar"))</code> 这么编写就是进一步缩小定位的方位，匹配所有类、结构体、联合体声明的节点中名称为 Foo 的节点<strong>且必须是从 Bar 派生出来的节点</strong>。</p></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">recordDecl</span><span class="token punctuation">(</span><span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isDerivedFrom</span><span class="token punctuation">(</span><span class="token string">"Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>让我们修改下演示的代码，可以发现 anyOf 这个关键字，它表示 <code>hasName("Foo")</code> 与 <code>isDerivedFrom("Bar")</code> 这两个条件有一个成立即可匹配（类似 |）。<ul><li>类似的还有 <code>allOf(A, B)</code> 标识 A 与 B 要同时成立才可以（类似 &amp; ），<code>unless(A)</code> 匹配 A 不成立的节点（类似 ! ）。</li><li>anyOf is like “or”, allOf can implement “and”, and unless is like “not”.</li></ul></li></ul><h3 id="使用-clang-query"><a href="#使用-clang-query" class="headerlink" title="使用 clang-query"></a>使用 clang-query</h3><p>当我们编写了匹配器想要测试怎么办，难道改一点就要重新编译链接运行，好在 clang 提供了好用的 clang-query 工具可以方便我们验证编写的匹配器语法是否正确。<strong>首先准备一些测试代码，源码见文末</strong>。</p><p>使用 clang-query 如下：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_2.png" alt="clang-query"></p><ul><li><p>这个命令的前半段没有什么好讲解的，目标文件就是 ./test/test.cxx。</p><ul><li><p>我们需要重点关注下 -p “./build/compile_commands.json”。</p><ul><li><p>-p 的解释如下图，指定 compile_commands.json 这个文件的路径所在。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_3.png" alt="help -p"></p></li><li><p>compile_commands.json 文件包含了编译过程中的宏定义、头文件路径、编译器等信息，而 clang 在解析生成 AST 树时需要预编译，所以需要这些信息防止头文件找不到等等问题。compile_commands.json 我们可以通过 cmake 来生成，<a href="https://segmentfault.com/a/1190000007015981">参考这篇文章</a>。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_5.png" alt="cmake set"></p></li><li><p>我们在之前的文章中一直使用 CmakeTools 工具，它的配置比较简单如下图设置即可。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_4.png" alt="cmaketools set"></p></li></ul></li></ul></li><li><p>接下来执行 clang-query 命令，可以看到一些源码相关的警告后我们进入到 clang-query 的命令行内：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_6.png" alt="clang-query run"></p><ul><li><p>执行 <code>m functionDecl(isExpansionInMainFile())</code> 运行我们的匹配语句，可以看到它打印出了我们 test.cxx 文件中所有的函数声明，与我们预期时相符的。默认打印的简略信息，如果想要看详细的 AST 结构信息，可以设置 output 方式：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/4_7.png" alt="run matcher"></p></li></ul></li><li><p>这样我们就可以不停的尝试当前的 matcher 语句是否正确。</p></li></ul><h2 id="在程序中使用-AST-Mathcer"><a href="#在程序中使用-AST-Mathcer" class="headerlink" title="在程序中使用 AST Mathcer"></a>在程序中使用 AST Mathcer</h2><p>使用 matcher 我这举两个简单的方法：</p><ol><li><p>可以将直接将匹配器通过使用 newFrontendActionFactory 实现一个 FrontendAction 并传递给 ClangTool 直接去运行，举例如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">FunctionToAnalyzeCodeTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> FuncDeclMatcher <span class="token operator">=</span>        <span class="token function">functionDecl</span><span class="token punctuation">(</span><span class="token function">isExpansionInMainFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"methodclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"FunctiondFeclWithCall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//bind 不了解没有关系 后边会讲到</span>    CommonOptionsParser <span class="token function">OptionsParser</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> ToolingSampleCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>    ClangTool <span class="token function">Tool</span><span class="token punctuation">(</span>OptionsParser<span class="token punctuation">.</span><span class="token function">getCompilations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OptionsParser<span class="token punctuation">.</span><span class="token function">getSourcePathList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Func_Call FuncCall<span class="token punctuation">;</span>    MatchFinder Finder<span class="token punctuation">;</span>    Finder<span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>FuncDeclMatcher<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FuncCall<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Tool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token function">newFrontendActionFactory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Finder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们也可以通过前面文章中使用的方法，自己实现一个 FrontendAction 在 CreateAstConsumer 时构建我们需要的匹配器，举例如下:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyFrontendAction</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTFrontendAction<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyFrontendAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> m <span class="token operator">=</span> <span class="token function">getCompilerInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNumWarnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} Warning\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> <span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance<span class="token operator">&amp;</span> CI<span class="token punctuation">,</span> StringRef file<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        llvm<span class="token operator">::</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"** Creating AST consumer for: "</span> <span class="token operator">&lt;&lt;</span> file <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> m <span class="token operator">=</span> CI<span class="token punctuation">.</span><span class="token function">getDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNumWarnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> FuncDeclMatcher <span class="token operator">=</span>            <span class="token function">functionDecl</span><span class="token punctuation">(</span><span class="token function">isExpansionInMainFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"methodclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"FunctiondFeclWithCall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Finder<span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>FuncDeclMatcher<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FuncCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Finder<span class="token punctuation">.</span><span class="token function">newASTConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    Func_Call FuncCall<span class="token punctuation">;</span>    MatchFinder Finder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">FunctionToAnalyzeCodeError</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    CommonOptionsParser <span class="token function">op</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> ToolingSampleCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>    ClangTool <span class="token function">Tool</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">getCompilations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> op<span class="token punctuation">.</span><span class="token function">getSourcePathList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ClangTool::run accepts a FrontendActionFactory, which is then used to</span>    <span class="token comment" spellcheck="true">// create new objects implementing the FrontendAction interface. Here we use</span>    <span class="token comment" spellcheck="true">// the helper newFrontendActionFactory to create a default factory that will</span>    <span class="token comment" spellcheck="true">// return a new MyFrontendAction object every time.</span>    <span class="token comment" spellcheck="true">// To further customize this, we could create our own factory class.</span>    <span class="token keyword">return</span> Tool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>newFrontendActionFactory<span class="token operator">&lt;</span>MyFrontendAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>你可能发现了一个特殊的类 Func_Call 这个是我自己定义的，他继承 MatchFinder::MatchCallback ，当使用 MatchFinder 的 addMatcher 方法中与匹配器一起注册进去后，每当我们的匹配器匹配到相应的节点就会调用 run 方法，我们只需要重写它的 run 方法实现需要的功能即可。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Func_Call</span> <span class="token operator">:</span> <span class="token keyword">public</span> MatchFinder<span class="token operator">::</span>MatchCallback<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">const</span> MatchFinder<span class="token operator">::</span>MatchResult<span class="token operator">&amp;</span> Result<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="解析匹配节点"><a href="#解析匹配节点" class="headerlink" title="解析匹配节点"></a>解析匹配节点</h2><ol><li><p>当有节点匹配到后会调用 MatchCallback 的 run 方法，它会传入一个 MatchResult 的参数，我们可以通过参数中包含的信息来实现一些基础的功能，本小节就通过一个查找当前源文件中所有的函数声明的例子来讲解。</p><ul><li>首先分析下匹配器：<ul><li>functionDecl() 查找所有的函数与方法的声明节点，我们可以发现它有一个 bind() 方法，作用是可以将所有匹配到的节点绑定到 bind 方法传入的字符串标识上，当我们需要使用时就可以通过这个标识拿到匹配的节点。</li><li>isExpansionInMainFile() 表示是当前目标文件中的定义，不会匹配到你 include 的头文件中去。</li><li>anyOf() 里可以发现前边是查找类中的方法定义，后边是 unless 又将范围给取消了，主要是想将查找到的类方法类名给 bind 起来方便使用，而对于匹配器的匹配范围没有什么影响。</li><li>第二个 anyOf() 也是同理，查找所有函数声明体中调用的函数节点，这么些貌似有些挫，暂时还没有找到更好的匹配器写法，有知道的同学麻烦告知下，谢谢。</li><li>其实总的来说这个匹配器就是匹配目标源文件中所有的函数声明，包括全局的函数声明，以及类方法的声明。其他的匹配项仅仅是为了将相关联的节点绑定起来方便使用。</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">functionDecl</span><span class="token punctuation">(</span><span class="token function">isExpansionInMainFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"methodclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"FunctiondFeclWithCall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>知道了匹配器的功能接下来然我们实现一个打印出函数声明相关信息的功能：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Func_Call</span> <span class="token operator">:</span> <span class="token keyword">public</span> MatchFinder<span class="token operator">::</span>MatchCallback<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">const</span> MatchFinder<span class="token operator">::</span>MatchResult<span class="token operator">&amp;</span> Result<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string classname<span class="token punctuation">;</span>        std<span class="token operator">::</span>string functionname<span class="token punctuation">;</span>        std<span class="token operator">::</span>string functionparms<span class="token punctuation">;</span>        std<span class="token operator">::</span>string callexprname<span class="token punctuation">;</span>        std<span class="token operator">::</span>string callexprparms<span class="token punctuation">;</span>        clang<span class="token operator">::</span>LangOptions LangOpts<span class="token punctuation">;</span>        LangOpts<span class="token punctuation">.</span>CPlusPlus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        clang<span class="token operator">::</span>PrintingPolicy <span class="token function">Policy</span><span class="token punctuation">(</span>LangOpts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定标志为c++ 模式，用于从expr 获取类型字符串</span>        <span class="token comment" spellcheck="true">//从 Result 参数中获得当前的函数声明节点，这里就使用到了匹配器 bind 的标识</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">*</span> functionDecl <span class="token operator">=</span> Result<span class="token punctuation">.</span>Nodes<span class="token punctuation">.</span>getNodeAs<span class="token operator">&lt;</span>FunctionDecl<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"FunctiondFeclWithCall"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断函数是否有函数体，仅有一个声明的没有实现的函数停止解析</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//以下就是获取函数的名称、参数、返回值相关信息，接口描述都很清晰，主要注意函数参数获取方式用到的 QualType 使用方法</span>            functionname <span class="token operator">=</span> functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            functionname <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | "</span><span class="token punctuation">;</span>            functionname <span class="token operator">+</span><span class="token operator">=</span> functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getQualifiedNameAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            functionparms <span class="token operator">=</span> <span class="token string">"Return: "</span><span class="token punctuation">;</span>            functionparms <span class="token operator">+</span><span class="token operator">=</span> functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                functionparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | Param: "</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">auto</span> param <span class="token operator">=</span> functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParamDecl</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    functionparms <span class="token operator">+</span><span class="token operator">=</span> QualType<span class="token operator">::</span><span class="token function">getAsString</span><span class="token punctuation">(</span>param<span class="token operator">-</span><span class="token operator">></span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Policy<span class="token punctuation">)</span><span class="token punctuation">;</span>                    functionparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"  "</span><span class="token punctuation">;</span>                    functionparms <span class="token operator">+</span><span class="token operator">=</span> functionDecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParamDecl</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    functionparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | "</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                functionparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | Param: NULL"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取当前方法函数声明所在的类，如果是一个全局函数非类方法则这个节点是没有的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">*</span> classdecl <span class="token operator">=</span> Result<span class="token punctuation">.</span>Nodes<span class="token punctuation">.</span>getNodeAs<span class="token operator">&lt;</span>CXXRecordDecl<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"methodclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            classname <span class="token operator">=</span> classdecl<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取函数体中所调用的其他函数信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">*</span> callexprtdec <span class="token operator">=</span> Result<span class="token punctuation">.</span>Nodes<span class="token punctuation">.</span>getNodeAs<span class="token operator">&lt;</span>CallExpr<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> func <span class="token operator">=</span> callexprtdec<span class="token operator">-</span><span class="token operator">></span><span class="token function">getDirectCallee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            callexprname <span class="token operator">=</span> func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callexprname<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                callexprname <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | "</span><span class="token punctuation">;</span>                callexprname <span class="token operator">+</span><span class="token operator">=</span> func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getQualifiedNameAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                callexprparms <span class="token operator">=</span> <span class="token string">"Return: "</span><span class="token punctuation">;</span>                callexprparms <span class="token operator">+</span><span class="token operator">=</span> func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    callexprparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | Param: "</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">auto</span> param <span class="token operator">=</span> func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParamDecl</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        callexprparms <span class="token operator">+</span><span class="token operator">=</span> QualType<span class="token operator">::</span><span class="token function">getAsString</span><span class="token punctuation">(</span>param<span class="token operator">-</span><span class="token operator">></span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Policy<span class="token punctuation">)</span><span class="token punctuation">;</span>                        callexprparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"  "</span><span class="token punctuation">;</span>                        callexprparms <span class="token operator">+</span><span class="token operator">=</span> func<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParamDecl</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        callexprparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | "</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    callexprparms <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" | Param: NULL"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            callexprparms <span class="token operator">=</span> <span class="token string">"NULL"</span><span class="token punctuation">;</span>            callexprname <span class="token operator">=</span> <span class="token string">"CALL NULL"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"analysis result classname[{}] function[{} type:{}]  callexpr[{} type:{}]\n"</span><span class="token punctuation">,</span> classname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    functionname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> functionparms<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callexprname<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callexprparms<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>以上，我们就将 clang ASTMathcer 基础概念、使用方法说完了。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="获取错误信息"><a href="#获取错误信息" class="headerlink" title="获取错误信息"></a>获取错误信息</h3><ol><li>想要获取到源码中的错误、警告信息，需要我们实现一个 DiagnosticConsumer 方法，并在 ASTFrontendAction 的 CreateAstConsumer 调用时，注册掉 CompilerInstance 的 Diagnostic 引擎中去作为 client ，这样当有警告、错误发生时就会回调到我们重写的 HandleDiagnostic 方法中去，下边是一个例子。<ul><li>CompilerInstance 作为类似编译器的一个实体提供各种功能，而 Diagnostic 提供了跟踪处理源代码时可能出现的错误并进行报告的功能。具体的 CompilerInstance 与 Diagnostic 的概念感觉又是一个坑，现在还没有梳理想要了解的需要自己查下相关资料。</li></ul></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BlankDiagConsumer</span> <span class="token operator">:</span> <span class="token keyword">public</span> clang<span class="token operator">::</span>DiagnosticConsumer<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BlankDiagConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">BlankDiagConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">HandleDiagnostic</span><span class="token punctuation">(</span>DiagnosticsEngine<span class="token operator">::</span>Level DiagLevel<span class="token punctuation">,</span> <span class="token keyword">const</span> Diagnostic<span class="token operator">&amp;</span> Info<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        SmallString<span class="token operator">&lt;</span><span class="token number">100</span><span class="token operator">></span> OutStr<span class="token punctuation">;</span>        Info<span class="token punctuation">.</span><span class="token function">FormatDiagnostic</span><span class="token punctuation">(</span>OutStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        llvm<span class="token operator">::</span>raw_svector_ostream <span class="token function">DiagMessageStream</span><span class="token punctuation">(</span>OutStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> aa <span class="token operator">=</span> <span class="token function">FullSourceLoc</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Info<span class="token punctuation">.</span><span class="token function">getSourceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFileLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Line <span class="token operator">=</span> aa<span class="token punctuation">.</span><span class="token function">getLineNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} DiagLevel = {} Message = {} at Line = {}"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> DiagLevel<span class="token punctuation">,</span>                     DiagMessageStream<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyFrontendAction</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTFrontendAction<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyFrontendAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token keyword">auto</span><span class="token operator">&amp;</span> DE <span class="token operator">=</span> <span class="token function">getCompilerInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} Warning\n"</span><span class="token punctuation">,</span> DE<span class="token punctuation">.</span><span class="token function">getNumWarnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> <span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance<span class="token operator">&amp;</span> CI<span class="token punctuation">,</span> StringRef file<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        llvm<span class="token operator">::</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"** Creating AST consumer for: "</span> <span class="token operator">&lt;&lt;</span> file <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> FuncDeclMatcher <span class="token operator">=</span>            <span class="token function">functionDecl</span><span class="token punctuation">(</span><span class="token function">isExpansionInMainFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"methodclass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">hasAncestor</span><span class="token punctuation">(</span><span class="token function">cxxRecordDecl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token function">unless</span><span class="token punctuation">(</span><span class="token function">forEachDescendant</span><span class="token punctuation">(</span><span class="token function">callExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"callExprFunction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"FunctiondFeclWithCall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Finder<span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>FuncDeclMatcher<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FuncCall<span class="token punctuation">)</span><span class="token punctuation">;</span>        CI<span class="token punctuation">.</span><span class="token function">getDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Finder<span class="token punctuation">.</span><span class="token function">newASTConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    Func_Call FuncCall<span class="token punctuation">;</span>    MatchFinder Finder<span class="token punctuation">;</span>    BlankDiagConsumer ctr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试代码-test-cxx"><a href="#测试代码-test-cxx" class="headerlink" title="测试代码 test.cxx"></a>测试代码 test.cxx</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//////////////////////////////////</span><span class="token comment" spellcheck="true">//test.h</span><span class="token comment" spellcheck="true">//////////////////////////////////</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __TEST__H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __TEST__H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">TestClass2</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">TestClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">TestClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string <span class="token function">TestFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TestClass3</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">TestClass3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">TestClass3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string <span class="token function">TestFunction3</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//////////////////////////////////</span><span class="token comment" spellcheck="true">//test.cxx</span><span class="token comment" spellcheck="true">//////////////////////////////////</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Cpp11Enum</span><span class="token punctuation">{</span>    RED <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    BLUE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Wowza<span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Wowza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Badabang <span class="token operator">:</span> Wowza<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Badabang<span class="token operator">&amp;</span> o<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">testif_else</span><span class="token punctuation">(</span><span class="token keyword">int</span> ww<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        h<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string <span class="token function">notcallall</span><span class="token punctuation">(</span>TestClass3 b<span class="token punctuation">)</span><span class="token punctuation">{</span>    TestClass3 tmp <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        h<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">testclassparent</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">testclassparent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} call\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parentFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">testclassparent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> adsds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> adsdsd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">parentFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> test1<span class="token punctuation">,</span> <span class="token keyword">char</span> test2<span class="token punctuation">)</span> <span class="token punctuation">{</span> spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} call {} -- {}\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> test1<span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">testclass</span> <span class="token operator">:</span> <span class="token keyword">public</span> testclassparent<span class="token punctuation">{</span>    <span class="token function">testclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} call\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parentFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestClass2 a<span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">TestFunction</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>TestClass3<span class="token operator">::</span><span class="token function">TestClass3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> adsds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} {}call\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> adsds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>TestClass3<span class="token operator">::</span><span class="token operator">~</span><span class="token function">TestClass3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> adsds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} {}call\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> adsds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token operator">::</span>string TestClass3<span class="token operator">::</span><span class="token function">TestFunction3</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sss<span class="token punctuation">;</span>    spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} {}{}call\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> test<span class="token punctuation">,</span> sss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LLVM 编译器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）LLVM编译器--Clang_AST_学习</title>
      <link href="/2022/06/03/san-llvm-bian-yi-qi-clang-ast-xue-xi/"/>
      <url>/2022/06/03/san-llvm-bian-yi-qi-clang-ast-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Clang-AST-学习"><a href="#Clang-AST-学习" class="headerlink" title="Clang AST 学习"></a>Clang AST 学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前搭建环境是就已经提到过，Clang 不仅仅可以作为一个编译器前端，同时还可以通过库的形式提供代码解析功能，将 C/C++ 程序源码转换为 abstract syntax tree （AST）语法树以及提供相应接口去操作 AST 语法树。<a href="http://swtv.kaist.ac.kr/courses/cs453-fall09">参考资料</a></p><h2 id="AST-结构基础"><a href="#AST-结构基础" class="headerlink" title="AST 结构基础"></a>AST 结构基础</h2><ul><li>AST 中的每个节点都是 Decl 或 Stmt 类的一个实例:<ul><li>Decl : 表示声明。Decl 下级还包含不同类型的子类用于标识不同的声明类型；<ul><li>例如 FunctionDecl 类用于函数声明，ParmVarDecl 类用于函数参数声明。</li></ul></li><li>Stmt : 表示语句（代码块）。同样存在 Stmt 的子类，对于不同的语句类型；<ul><li>例如 IfStmt 用于标识 if 语句, ReturnStmt 类用于标识函数返回。</li></ul></li></ul></li></ul><h3 id="Example-AST"><a href="#Example-AST" class="headerlink" title="Example AST"></a>Example AST</h3><p>先来一段演示代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Example.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> global<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"param is 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        global <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> param <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">myPrint</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Decl"><a href="#Decl" class="headerlink" title="Decl"></a>Decl</h3><ol><li><p>一个函数的根节点是一个 FunctionDecl 实例。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_1.png" alt="FunctionDecl节点"></p></li><li><p>一个 FunctionDecl 可以通过一个 ParmVarDecl 来标识参数，注意 ParmVarDecl 与 FunctionDecl 是同级的，都属于 Decl 子类。</p></li><li><p>函数体是一个 Stmt 实例，其中函数体使用 CompoundStmt 来标识，同样的它也是 Stmt 的一个子类。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_2.png" alt="Function_ParamVar_Decl_Stmt"></p></li><li><p>VarDecl 用于标识局部和全局变量的声明，注意如果变量声明时有个初始值，那么 VarDecl 就会有一个初始值的子节点。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_3.png" alt="VarDecl"></p></li><li><p>FunctionDecl、ParmVarDecl 和 VarDecl 都有一个名称和一个声明类型，在遍历节点查找我们想要的代码块是非常好用的。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_4.png" alt="Name&amp;Type"></p></li></ol><h3 id="Stmt"><a href="#Stmt" class="headerlink" title="Stmt"></a>Stmt</h3><ol><li><p>Stmt 用于标识代码语句，包含的子类：</p><ol><li>CompoundStmt 类 用来标识代码块；</li><li>DeclStmt 类 用来标识局部变量声明；</li><li>ReturnStmt 类 标识函数返回。</li></ol><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_5.png" alt="Stmt"></p></li><li><p>Expr 作为 Stmt 的子类，用于标识表达式：</p><ol><li>CallExpr 标识函数调用；</li><li>ImplicitCastExpr 用于标识隐式强转换的类型；</li><li>DeclRefExpr 标识引用声明的变量和函数；</li><li>IntegerLiteral 用于整型文字。</li></ol><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_6.png" alt="Expr"></p></li><li><p>Stmt 可能包含一些有着附加信息的子节点，例如 CompoundStmt 标识在一个大括号中代码块的语句，其中的每个语句都是一个包含其他信息的子节点。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_7.png" alt="CompoundStmt"></p></li><li><p>在包含附加信息的子节点中，例如 CallExpr 函数调用类，它的第一个子元素是函数指针，其他的子元素是函数参数，其他节点同理。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_8.png" alt="CallExpr"></p></li><li><p>Expr 类 会有一个表达式的类型，例如 CallExpr 中的节点有个 void 的类型。一些 Expr 的子类会包含一个值，例如 初始化的局部或全局变量 IntegerLiteral 子节点，就有一个 1 ‘int’ 。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_9.png" alt="Expr扩展"></p></li><li><p>现在让我们关注下更复杂一点的 myPrint 函数，可以看到在其函数体中包含了 IfStmt 和 ForStmt 两种 Stmt 子类。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_10.png" alt="ifStmt&amp;forStmt"></p></li><li><p>IfStmt 有 4 中子节点：</p><ol><li><p>可以看到一个奇怪的的条件变量（-&gt;NULL），这是因为 c++ 中可以在 if 语句的 condition 声明一个变量(而不是在 C 中);</p><ul><li><p>做个实验，这样是不是就很清晰了。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_11.png" alt="测试confdition定义"></p></li></ul></li><li><p>接下来是一个条件判断节点;</p></li><li><p>然后是该 if 判断的代码段;</p></li><li><p>最后是 Else 的代码段。</p></li></ol><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_12.png" alt="ifStmt"></p></li><li><p>ForStmt 有 5 个子节点：</p><ol><li><p>for 循环判断的初始化语句，for(<code>int i = 0</code>; i &lt; 10; i++)；</p></li><li><p>VarDecl 类标识的 for 的条件变量定义；</p><ul><li><p>说的有点难懂，做个实验</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_13.png" alt="测试for条件定义"></p></li></ul></li><li><p>for 判断条件，for(int i = 0; <code>i &lt; 10</code>; i++)；</p></li><li><p>++段，for(int i = 0; i &lt; 10; <code>i++</code>)；</p></li><li><p>Stmt 标识 for 中的循环代码块。</p></li></ol><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_14.png" alt="ForStmt"></p></li><li><p>BinaryOperator 二元操作符，存在两个子节点; UnaryOperator 一元操作符，只有一个子节点。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_15.png" alt="一元&amp;二元"></p></li></ol><h2 id="遍历-Clang-AST"><a href="#遍历-Clang-AST" class="headerlink" title="遍历 Clang AST"></a>遍历 Clang AST</h2><ul><li><p>通过<a href="http://clang.llvm.org/docs/RAVFrontendAction.html">官方的一篇教程</a>以及<a href="https://www.cnblogs.com/zhangke007/p/4714245.html">下图</a> 可以了解到构建、遍历 AST 树需要的几个功能类，分别是 <a href="http://clang.llvm.org/doxygen/classclang_1_1CompilerInstance.html#details">CompilerInstance</a>、FrontendAction、ParseAST、ASTConsumer、RecursiveASTVisitor。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_18.png" alt="parseAst"></p></li></ul><ol><li><p>CompilerInstance: 用于管理 Clang 编译器单个实例的 Helper 类。它主要有两个用处：</p><ol><li>它管理运行编译器所需的各种对象，例如预处理器，目标信息和 AST 上下文。</li><li>它提供了用于构造和操作通用 Clang 对象的实用程序例程。</li></ol></li><li><p>从 CompilerInstance 可以了解到两点用处： 第一点对我们构建 AST 用处不大，主要是第二点中是管理和操作 Clang Tool 工具实用的程序历程，这点很有启发。<a href="http://clang.llvm.org/docs/RAVFrontendAction.html">官方教程</a>是通过 ASTFrontendActions 来实现 AST 树遍历。其中我们可以了解到：</p><ul><li>在编写基于 Clang 的工具（例如 Clang 插件）或基于 LibTooling 的独立工具时，常见的入口点是 FrontendAction。其允许在编译过程中执行用户特定的操作。如果想要在 Clang AST 树上运行工具，提供了方便的接口 ASTFrontendAction，该接口负责执行操作。剩下的唯一部分是实现 CreateASTConsumer 方法，该方法为每个翻译单元返回 ASTConsumer。</li></ul></li><li><p>从 FrontendAction 可以了解到如果想运行基于 libTooling 的工具，直接实现一个 ASTFrontendAction 入口以及 ASTConsumer 即可，这样完全没有 ParseAST 什么事情了呀？？为了搞清楚我们还是一起来了解一下 clang::ParseAST() 它到底干了什么，这个方法提供了构建和遍历 AST 的功能，接口定义如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/// Parse the entire file specified, notifying the ASTConsumer as</span><span class="token comment" spellcheck="true">/// the file is parsed.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// This operation inserts the parsed decls into the translation</span><span class="token comment" spellcheck="true">/// unit held by Ctx.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// \param PrintStats Whether to print LLVM statistics related to parsing.</span><span class="token comment" spellcheck="true">/// \param TUKind The kind of translation unit being parsed.</span><span class="token comment" spellcheck="true">/// \param CompletionConsumer If given, an object to consume code completion</span><span class="token comment" spellcheck="true">/// results.</span><span class="token comment" spellcheck="true">/// \param SkipFunctionBodies Whether to skip parsing of function bodies.</span><span class="token comment" spellcheck="true">/// This option can be used, for example, to speed up searches for</span><span class="token comment" spellcheck="true">/// declarations/definitions when indexing.</span><span class="token keyword">void</span> <span class="token function">ParseAST</span><span class="token punctuation">(</span>Preprocessor <span class="token operator">&amp;</span>pp<span class="token punctuation">,</span> ASTConsumer <span class="token operator">*</span>C<span class="token punctuation">,</span>            ASTContext <span class="token operator">&amp;</span>Ctx<span class="token punctuation">,</span> <span class="token keyword">bool</span> PrintStats <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            TranslationUnitKind TUKind <span class="token operator">=</span> TU_Complete<span class="token punctuation">,</span>            CodeCompleteConsumer <span class="token operator">*</span>CompletionConsumer <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span>            <span class="token keyword">bool</span> SkipFunctionBodies <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中注意 <code>ASTConsumer *C</code> ，根据注释描述可知解析完成的源码文件会通过 ASTConsumer 来回传给我们，所以在调用这个接口时我们要实现一个 ASTConsumer 用来获取、遍历 AST 树。查看 ASTConsumer 的定义可以发现许多回调接口，包括不同类型、层级 AST 结构，这下真相大白了，ParseAST() 接口可以说是 Clang AST 树解析和构建的核心了，但是它的特性其实主要在于解析以及通过钩子 ASTConsumer 来把分析后的 AST 节点回传给我们，而我们在使用 ASTFrontendAction 时是会重写 CreateASTConsumer 方法，相当于 ASTFrontendAction 会帮我们调用 ParseAST() 接口并将我们的 ASTConsumer 实例注册进去，这样我们在使用过程中完全不用关心它 😀，下边举一个编写自己 ASTConsumer 与 ASTFrontendAction 的例子，通过继承 ASTConsumer、ASTFrontendAction 然后重写相关函数接口即可：</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//ASTConsumer.h</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">/// HandleTopLevelDecl - Handle the specified top-level declaration.  This is</span><span class="token comment" spellcheck="true">/// called by the parser to process every top-level Decl*.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// \returns true to continue parsing, or false to abort parsing.</span><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">HandleTopLevelDecl</span><span class="token punctuation">(</span>DeclGroupRef D<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//FrontendAction.h</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">/// Provide a default implementation which returns aborts;</span><span class="token comment" spellcheck="true">/// this method should never be called by FrontendAction clients.</span>std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> <span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance <span class="token operator">&amp;</span>CI<span class="token punctuation">,</span>                                                StringRef InFile<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// Callback at the end of processing a single input.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// This is guaranteed to only be called following a successful call to</span><span class="token comment" spellcheck="true">/// BeginSourceFileAction (and BeginSourceFile).</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">///////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//example.cpp</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/AST/ASTConsumer.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Parse/ParseAST.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/AST/DeclGroup.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Frontend/FrontendActions.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Rewrite/Core/Rewriter.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyASTConsumer</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTConsumer<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyASTConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">HandleTopLevelDecl</span><span class="token punctuation">(</span>DeclGroupRef DR<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//for (DeclGroupRef::iterator b = DR.begin(), e = DR.end(); b != e; ++b)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> b <span class="token operator">:</span> DR<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// variable b has each decleration in DR</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// For each source file provided to the tool, a new FrontendAction is created.</span><span class="token keyword">class</span> <span class="token class-name">MyFrontendAction</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTFrontendAction<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyFrontendAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// EndSourceFileAction</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> <span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance<span class="token operator">&amp;</span> CI<span class="token punctuation">,</span> StringRef file<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token keyword">return</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>MyASTConsumer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ASTConsumer 中有很多 HOOK 函数，我这里以 HandleTopLevelDecl 接口为例，它会返回给我们 top-level 的节点，接下来就是遍历这个节点以下所有的信息。这里需要了解一个新的类模板 RecursiveASTVisitor，我们可以通过这个类模板生成一个自己的 visitor 用来遍历某个节点所有的子节点：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//example.cpp</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/AST/ASTConsumer.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/AST/DeclGroup.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/AST/RecursiveASTVisitor.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Parse/ParseAST.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Rewrite/Core/Rewriter.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyASTVisitor</span> <span class="token operator">:</span> <span class="token keyword">public</span> RecursiveASTVisitor<span class="token operator">&lt;</span>MyASTVisitor<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token function">VisitStmt</span><span class="token punctuation">(</span>Stmt<span class="token operator">*</span> s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\t{} \n"</span><span class="token punctuation">,</span> s<span class="token operator">-</span><span class="token operator">></span><span class="token function">getStmtClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">VisitFunctionDecl</span><span class="token punctuation">(</span>FunctionDecl<span class="token operator">*</span> f<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-</span><span class="token operator">></span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Stmt<span class="token operator">*</span> FuncBody <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}\n"</span><span class="token punctuation">,</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyASTConsumer</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTConsumer<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyASTConsumer</span><span class="token punctuation">(</span>Rewriter<span class="token operator">&amp;</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">HandleTopLevelDecl</span><span class="token punctuation">(</span>DeclGroupRef DR<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> b <span class="token operator">:</span> DR<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyASTVisitor Visitor<span class="token punctuation">;</span>            Visitor<span class="token punctuation">.</span><span class="token function">TraverseDecl</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>介绍下 RecursiveASTVisitor 类模板，它会按照深度优先的搜索顺序遍历每个 Stmt 节点，并且对 AST 树中的每个 Stmt 节点调用类模板中 VisitStmt() 方法，如果 VisitStmt 返回 false 的话，则递归遍历将结束。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_16.png" alt="RecursiveASTVisitor"></p></li><li><p>最后还剩下一个疑问点就是，CompilerInstance 该怎么用起来呢？这里就要提到另一个类了 <a href="http://clang.llvm.org/doxygen/classclang_1_1tooling_1_1ClangTool.html">ClangTool</a>，这个类可以让我们编写的功能模块像 clang-tidy、clang-format 等等，变身成命令行程序。大致来说就是将我们的 MyFrontendAction 传给它，会自动的创建 CompilerInstance 来运行，详细的使用方法在下边的例子里会给出。至此编写工具来解析 AST 树的方法介绍完毕了。</p></li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><ul><li><p>接下来将通过上边的知识，分析下之前已经出场过的一个功能模块，一个遍历打印出 AST 信息，并且可以判断 if 分支的代码：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/3_17.png" alt="example"></p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//example.h</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Frontend/FrontendActions.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Rewrite/Core/Rewriter.h></span></span><span class="token keyword">namespace</span> clang<span class="token punctuation">{</span><span class="token comment" spellcheck="true">// For each source file provided to the tool, a new FrontendAction is created.</span><span class="token keyword">class</span> <span class="token class-name">MyFrontendAction</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTFrontendAction<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyFrontendAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> <span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance<span class="token operator">&amp;</span> CI<span class="token punctuation">,</span> StringRef file<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Rewriter TheRewriter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// namespace clang</span><span class="token keyword">int</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//example.cpp</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// Tooling sample. Demonstrates:</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// * How to write a simple source tool using libTooling.</span><span class="token comment" spellcheck="true">// * How to use RecursiveASTVisitor to find interesting AST nodes.</span><span class="token comment" spellcheck="true">// * How to use the Rewriter API to rewrite the source code.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Eli Bendersky (eliben@gmail.com)</span><span class="token comment" spellcheck="true">// This code is in the public domain</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/AST/AST.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/AST/ASTConsumer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/AST/RecursiveASTVisitor.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Frontend/ASTConsumers.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Frontend/CompilerInstance.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Tooling/CommonOptionsParser.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Tooling/Tooling.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"llvm/ADT/STLExtras.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"llvm/Support/raw_ostream.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Function/LoopConvert.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token operator">::</span>driver<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token operator">::</span>tooling<span class="token punctuation">;</span><span class="token keyword">static</span> llvm<span class="token operator">::</span>cl<span class="token operator">::</span>OptionCategory <span class="token function">ToolingSampleCategory</span><span class="token punctuation">(</span><span class="token string">"Tooling Sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// By implementing RecursiveASTVisitor, we can specify which AST nodes</span><span class="token comment" spellcheck="true">// we're interested in by overriding relevant methods.</span><span class="token keyword">class</span> <span class="token class-name">MyASTVisitor</span> <span class="token operator">:</span> <span class="token keyword">public</span> RecursiveASTVisitor<span class="token operator">&lt;</span>MyASTVisitor<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyASTVisitor</span><span class="token punctuation">(</span>Rewriter<span class="token operator">&amp;</span> R<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">TheRewriter</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">VisitStmt</span><span class="token punctuation">(</span>Stmt<span class="token operator">*</span> s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only care about If statements.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isa<span class="token operator">&lt;</span>IfStmt<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span><span class="token operator">*</span> IfStatement <span class="token operator">=</span> cast<span class="token operator">&lt;</span>IfStmt<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            Stmt<span class="token operator">*</span> Then <span class="token operator">=</span> IfStatement<span class="token operator">-</span><span class="token operator">></span><span class="token function">getThen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>Then<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBeginLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"// the 'if' part\n"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Stmt<span class="token operator">*</span> Else <span class="token operator">=</span> IfStatement<span class="token operator">-</span><span class="token operator">></span><span class="token function">getElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Else<span class="token punctuation">)</span>                TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>Else<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBeginLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"// the 'else' part\n"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">VisitFunctionDecl</span><span class="token punctuation">(</span>FunctionDecl<span class="token operator">*</span> f<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only function definitions (with bodies), not declarations.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-</span><span class="token operator">></span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Stmt<span class="token operator">*</span> FuncBody <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Type name as string</span>            QualType QT <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>string TypeStr <span class="token operator">=</span> QT<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Function name</span>            DeclarationName DeclName <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>string FuncName <span class="token operator">=</span> DeclName<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Add comment before</span>            std<span class="token operator">::</span>stringstream SSBefore<span class="token punctuation">;</span>            SSBefore <span class="token operator">&lt;&lt;</span> <span class="token string">"// Begin function "</span> <span class="token operator">&lt;&lt;</span> FuncName <span class="token operator">&lt;&lt;</span> <span class="token string">" returning "</span> <span class="token operator">&lt;&lt;</span> TypeStr <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>            SourceLocation ST <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getSourceRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>ST<span class="token punctuation">,</span> SSBefore<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// And after</span>            std<span class="token operator">::</span>stringstream SSAfter<span class="token punctuation">;</span>            SSAfter <span class="token operator">&lt;&lt;</span> <span class="token string">"\n// End function "</span> <span class="token operator">&lt;&lt;</span> FuncName<span class="token punctuation">;</span>            ST <span class="token operator">=</span> FuncBody<span class="token operator">-</span><span class="token operator">></span><span class="token function">getEndLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocWithOffset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>ST<span class="token punctuation">,</span> SSAfter<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    Rewriter<span class="token operator">&amp;</span> TheRewriter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Implementation of the ASTConsumer interface for reading an AST produced</span><span class="token comment" spellcheck="true">// by the Clang parser.</span><span class="token keyword">class</span> <span class="token class-name">MyASTConsumer</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTConsumer<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyASTConsumer</span><span class="token punctuation">(</span>Rewriter<span class="token operator">&amp;</span> R<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Visitor</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Override the method that gets called for each parsed top-level</span>    <span class="token comment" spellcheck="true">// declaration.</span>    <span class="token keyword">bool</span> <span class="token function">HandleTopLevelDecl</span><span class="token punctuation">(</span>DeclGroupRef DR<span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> b <span class="token operator">:</span> DR<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Traverse the declaration using our AST visitor.</span>            Visitor<span class="token punctuation">.</span><span class="token function">TraverseDecl</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token operator">-</span><span class="token operator">></span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    MyASTVisitor Visitor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> MyFrontendAction<span class="token operator">::</span><span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance<span class="token operator">&amp;</span> CI<span class="token punctuation">,</span> StringRef file<span class="token punctuation">)</span><span class="token punctuation">{</span>    llvm<span class="token operator">::</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"** Creating AST consumer for: "</span> <span class="token operator">&lt;&lt;</span> file <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">setSourceMgr</span><span class="token punctuation">(</span>CI<span class="token punctuation">.</span><span class="token function">getSourceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CI<span class="token punctuation">.</span><span class="token function">getLangOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>MyASTConsumer<span class="token operator">></span><span class="token punctuation">(</span>TheRewriter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyFrontendAction<span class="token operator">::</span><span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SourceManager<span class="token operator">&amp;</span> SM <span class="token operator">=</span> TheRewriter<span class="token punctuation">.</span><span class="token function">getSourceMgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    llvm<span class="token operator">::</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"** EndSourceFileAction for: "</span> <span class="token operator">&lt;&lt;</span> SM<span class="token punctuation">.</span><span class="token function">getFileEntryForID</span><span class="token punctuation">(</span>SM<span class="token punctuation">.</span><span class="token function">getMainFileID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Now emit the rewritten buffer.</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">getEditBuffer</span><span class="token punctuation">(</span>SM<span class="token punctuation">.</span><span class="token function">getMainFileID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span><span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    CommonOptionsParser <span class="token function">op</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> ToolingSampleCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>    ClangTool <span class="token function">Tool</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">getCompilations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> op<span class="token punctuation">.</span><span class="token function">getSourcePathList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ClangTool::run accepts a FrontendActionFactory, which is then used to</span>    <span class="token comment" spellcheck="true">// create new objects implementing the FrontendAction interface. Here we use</span>    <span class="token comment" spellcheck="true">// the helper newFrontendActionFactory to create a default factory that will</span>    <span class="token comment" spellcheck="true">// return a new MyFrontendAction object every time.</span>    <span class="token comment" spellcheck="true">// To further customize this, we could create our own factory class.</span>    <span class="token keyword">return</span> Tool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>newFrontendActionFactory<span class="token operator">&lt;</span>MyFrontendAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>使用命令行来初始化 Clang 工具，这里需要使用 CommonOptionsParser 类。查看注释可以了解到，这个类是所有命令行 clang 工具公用的命令解析器，它可以解析命令行命令参数，例如指定 <code>compilation commands database</code> 链接路径，或者用户执行时指定的其他指令。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/// A parser for options common to all command-line Clang tools.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Parses a common subset of command-line arguments, locates and loads a</span><span class="token comment" spellcheck="true">/// compilation commands database and runs a tool with user-specified action. It</span><span class="token comment" spellcheck="true">/// also contains a help message for the common command-line options.</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// An example of usage:</span><span class="token comment" spellcheck="true">/// \code</span><span class="token comment" spellcheck="true">/// #include "clang/Frontend/FrontendActions.h"</span><span class="token comment" spellcheck="true">/// #include "clang/Tooling/CommonOptionsParser.h"</span><span class="token comment" spellcheck="true">/// #include "clang/Tooling/Tooling.h"</span><span class="token comment" spellcheck="true">/// #include "llvm/Support/CommandLine.h"</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// using namespace clang::tooling;</span><span class="token comment" spellcheck="true">/// using namespace llvm;</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// static cl::OptionCategory MyToolCategory("My tool options");</span><span class="token comment" spellcheck="true">/// static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);</span><span class="token comment" spellcheck="true">/// static cl::extrahelp MoreHelp("\nMore help text...\n");</span><span class="token comment" spellcheck="true">/// static cl::opt&lt;bool> YourOwnOption(...);</span><span class="token comment" spellcheck="true">/// ...</span><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// int main(int argc, const char **argv) {</span><span class="token comment" spellcheck="true">///   CommonOptionsParser OptionsParser(argc, argv, MyToolCategory);</span><span class="token comment" spellcheck="true">///   ClangTool Tool(OptionsParser.getCompilations(),</span><span class="token comment" spellcheck="true">///                  OptionsParser.getSourcePathList());</span><span class="token comment" spellcheck="true">///   return Tool.run(newFrontendActionFactory&lt;SyntaxOnlyAction>().get());</span><span class="token comment" spellcheck="true">/// }</span><span class="token comment" spellcheck="true">/// \endcode</span><span class="token keyword">class</span> <span class="token class-name">CommonOptionsParser</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>ClangTool::run accepts a FrontendActionFactory</code> 这也就是我们想要运行自己编写的 FrontendAction 入口了，将其传入即可。</p></li><li><p>当构建 AST 树后会调用 MyFrontendAction::CreateASTConsumer 来使用我们客制化实现的 ASTConsumer，并将相关节点返回给我们。MyFrontendAction 中可以发现有一个 TheRewriter 成员，这是一个重写器，主要是用来将我们 if else 添加完注释的代码进行回写。</p></li><li><p>HandleTopLevelDecl 会回调给我们相应的节点信息，使用 MyASTVisitor 来实现我们想要的功能即可。</p></li></ol><h2 id="其他注意"><a href="#其他注意" class="headerlink" title="其他注意"></a>其他注意</h2><ul><li><p>通过重写了 <a href="https://clang.llvm.org/doxygen/classclang_1_1ASTConsumer.html#ad34fb88d1588902a847926224c8c939b">virtual bool HandleTopLevelDecl (DeclGroupRef D)</a> 来实现了遍历 top-level 的 Decl，这个接口有个特点是每次分析到一个顶层定义时就会回调，也就是说调用这个接口时文件还没有分析完成，相当于一边分析，一边调用，</p><ul><li><a href="https://clang.llvm.org/doxygen/classclang_1_1DeclGroupRef.html">DeclGroupRef</a> 一组定义的列表节点引用。</li></ul></li><li><p>还有一个 <a href="https://clang.llvm.org/doxygen/classclang_1_1ASTConsumer.html#a2bea2db1d0e8af16c60ee7847f0d46ff">virtual void HandleTranslationUnit (ASTContext &amp;Ctx)</a> 当整个翻译单元的 AST 已被解析时，将调用此方法。</p><ul><li><a href="https://clang.llvm.org/doxygen/classclang_1_1ASTContext.html">ASTContext</a> 包含在整个文件的语义分析中所查找到的长寿 AST 节点，例如类型以及定义。也就是说包含了文件分析后所有 AST 关键节点信息。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> LLVM 编译器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）LLVM编译器--构建_Clang_libTooling_工具</title>
      <link href="/2022/06/03/er-llvm-bian-yi-qi-gou-jian-clang-libtooling-gong-ju/"/>
      <url>/2022/06/03/er-llvm-bian-yi-qi-gou-jian-clang-libtooling-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="构建自己的-Clang-libTooling-工具"><a href="#构建自己的-Clang-libTooling-工具" class="headerlink" title="构建自己的 Clang libTooling 工具"></a>构建自己的 Clang libTooling 工具</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>本篇文章主要介绍就是如何通过 llvm 源码去构建属于自己的 Clang Tooling 工具，由于之前环境是搭建在 Windows 下，所以本篇主要也是在 Windows 下进行，如果你使用其他平台不必担心，差异不大。</li></ul><h2 id="什么是-Clang-libTooling-工具"><a href="#什么是-Clang-libTooling-工具" class="headerlink" title="什么是 Clang libTooling 工具"></a>什么是 Clang libTooling 工具</h2><ul><li>Clang 我想会看这篇文章的人应该都不会完全陌生，现在 Clang 不仅仅是一个编译器的前端，我们可以通过一些方法使用 Clang 强大的源码解析、检查等功能。如果想要详细了解点<a href="http://clang.llvm.org/docs/">这里的官方文档</a>和<a href="https://www.jianshu.com/p/403dd226c420">大佬的 BLOG</a>：<ol><li>libclang : 它还可以作为一个功能库提供一些用于源码解析 AST 的稳定高级 C 语言抽象接口。</li><li>clang libTooling : C++ 接口，旨在编写独立工具，以及集成到运行 clang 工具的服务中。</li><li>clang plugin : Clang 插件允许您在 AST 上添加运行其他操作作为编译的一部分。插件是由编译器在运行时加载的动态库，它们很容易集成到构建环境中。</li></ol></li></ul><h2 id="It’s-time-up"><a href="#It’s-time-up" class="headerlink" title="It’s time up"></a>It’s time up</h2><ul><li>本文主要分为三个部分：<ol><li>通过 llvm 工程构建一个可以提供自己需要的功能工具。</li><li>如何将该工具以模块的形式集成到自己的工程中。</li><li>直接通过源码在自己的工程中进行编译。</li></ol></li></ul><h3 id="构建一个代码解析工具"><a href="#构建一个代码解析工具" class="headerlink" title="构建一个代码解析工具"></a>构建一个代码解析工具</h3><p>其实<a href="https://juejin.im/post/5c3075bae51d455270151f41">参考</a>这篇文档描述的很详细了，如果你已经正确通过源码搭建了 LLVM 环境，那么操作起来是非常简单的。</p><ol><li><p>首先，在 clang/tools/ 目录下新加一个自己需要的工具目录，这里以 <code>QtPlugin</code> 为例，然后添加自己的源文件以及 CmakeLists.txt。</p><ul><li><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_1.png" alt="创建自己的工具文件夹"></li></ul></li><li><p>修改父目录下的 CMakeLists.txt 添加刚刚创建的 QtPlugin 目录。</p><ul><li><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_2.png" alt="添加自己的工具文件夹"></li></ul></li><li><p>接下来编写自己想要的功能代码，然后创建编写 QtPlugin 目录下的 CmakeLists.txt 参考着同一级目录中其他 tools 来就行。</p><pre class="line-numbers language-sh"><code class="language-sh">set(LLVM_LINK_COMPONENTS    Support)add_clang_executable(QTPluginTooling    QtPlugin.cpp)clang_target_link_libraries(QTPluginTooling    PRIVATE    clangAST    clangBasic    clangDriver    clangFormat    clangLex    clangParse    clangSema    clangFrontend    clangTooling    clangToolingCore    clangRewrite    clangRewriteFrontend)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接下来确保你的 CMakeTools 参数配置项 clang 模块处于 enable 状态(详情参见配置 LLVM 环境配置)，通过点击生成，CMakeTools 工具直接编译生成即可。最终可以在 build/bin 目录下找到你刚刚生成的工具。</p></li></ol><h3 id="将工具集成到你的工程中"><a href="#将工具集成到你的工程中" class="headerlink" title="将工具集成到你的工程中"></a>将工具集成到你的工程中</h3><p>Emmmm… 可能你觉得生成个可执行得工具并不满足，想要让 clang 强大得功能在自己项目中更加<code>紧密</code>的使用，那么你可以直接集成 clang 已经提供的 libTooling 等功能库，甚至自己生成定制的功能模块，以库得形式提供功能到你的项目中。</p><ul><li><a href="https://github.com/eliben/llvm-clang-samples">这里有一个很棒的 github 项目关于 LLVM-clang 的使用示例</a>，可惜的是由于 LLVM-clang 发展的迅速，C++ 接口并不稳定，10.0.0 版本的程序可能在下一版本编译都会失败掉，因此本小节会选取一个简单的示例，可以在 10.0.0 下编译通过，生成功能库后集成到自己的项目中。<blockquote><p>当前 LLVM 已经发布了 14，如果有编译错误的问题请邮件告诉我，谢谢～</p></blockquote></li></ul><ol><li><p>还记得上一节中的 clang 文件夹么，我们在其中编写了程序以及 CmakeLists.txt 最终生成了可以执行的小工具。而这一节我们的目的是生成一个库，这里我是将工具源码目录放到了与 clang 同级的目录下，可以找到一个 clang-tool-extra 文件夹内，可以发现这个目录下就是一些 clang 提供得扩展功能库，因此我们首先需要在这个目录下创建一个自己得工具文件夹，并如图中一样创建需要的源文件以及 CmakeLists.txt 。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_3.png" alt="新建工具目录"></p></li><li><p>为 LoopConvert.cpp 和 LoopConvert.h 添加源代码，<a href="https://github.com/eliben/llvm-clang-samples/blob/master/src_clang/tooling_sample.cpp">参考的源代码</a>，这里由于我们的目标是生成一个库，因此将 main 函数变成一个 C 接口功能函数，以及将功能类得定义抽出到 .h 头文件中，方便我们自己的项目调用相应得功能。llvm-clang-samples 项目中的源代码有一些接口兼容性的错误已经修复，下边是源码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  LoopConvert.h</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Frontend/FrontendActions.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;clang/Rewrite/Core/Rewriter.h></span></span><span class="token keyword">namespace</span> clang <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// For each source file provided to the tool, a new FrontendAction is created.</span><span class="token keyword">class</span> <span class="token class-name">MyFrontendAction</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTFrontendAction <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">MyFrontendAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span>std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span> <span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance <span class="token operator">&amp;</span>CI<span class="token punctuation">,</span>                                                StringRef file<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>Rewriter TheRewriter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// namespace clang</span><span class="token keyword">int</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  LoopConvert.cpp</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// Tooling sample. Demonstrates:</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// * How to write a simple source tool using libTooling.</span><span class="token comment" spellcheck="true">// * How to use RecursiveASTVisitor to find interesting AST nodes.</span><span class="token comment" spellcheck="true">// * How to use the Rewriter API to rewrite the source code.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Eli Bendersky (eliben@gmail.com)</span><span class="token comment" spellcheck="true">// This code is in the public domain</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/AST/AST.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/AST/ASTConsumer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/AST/RecursiveASTVisitor.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Frontend/ASTConsumers.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Frontend/CompilerInstance.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Tooling/CommonOptionsParser.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"clang/Tooling/Tooling.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"llvm/Support/raw_ostream.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;llvm\ADT\STLExtras.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LoopConvert.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token operator">::</span>driver<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> clang<span class="token operator">::</span>tooling<span class="token punctuation">;</span><span class="token keyword">static</span> llvm<span class="token operator">::</span>cl<span class="token operator">::</span>OptionCategory <span class="token function">ToolingSampleCategory</span><span class="token punctuation">(</span><span class="token string">"Tooling Sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// By implementing RecursiveASTVisitor, we can specify which AST nodes</span><span class="token comment" spellcheck="true">// we're interested in by overriding relevant methods.</span><span class="token keyword">class</span> <span class="token class-name">MyASTVisitor</span> <span class="token operator">:</span> <span class="token keyword">public</span> RecursiveASTVisitor<span class="token operator">&lt;</span>MyASTVisitor<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">MyASTVisitor</span><span class="token punctuation">(</span>Rewriter <span class="token operator">&amp;</span>R<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">TheRewriter</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">VisitStmt</span><span class="token punctuation">(</span>Stmt <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Only care about If statements.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isa<span class="token operator">&lt;</span>IfStmt<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IfStmt <span class="token operator">*</span>IfStatement <span class="token operator">=</span> cast<span class="token operator">&lt;</span>IfStmt<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    Stmt <span class="token operator">*</span>Then <span class="token operator">=</span> IfStatement<span class="token operator">-</span><span class="token operator">></span><span class="token function">getThen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>Then<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBeginLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"// the 'if' part\n"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stmt <span class="token operator">*</span>Else <span class="token operator">=</span> IfStatement<span class="token operator">-</span><span class="token operator">></span><span class="token function">getElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Else<span class="token punctuation">)</span>        TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>Else<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBeginLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"// the 'else' part\n"</span><span class="token punctuation">,</span>                            <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">VisitFunctionDecl</span><span class="token punctuation">(</span>FunctionDecl <span class="token operator">*</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Only function definitions (with bodies), not declarations.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-</span><span class="token operator">></span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stmt <span class="token operator">*</span>FuncBody <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Type name as string</span>    QualType QT <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string TypeStr <span class="token operator">=</span> QT<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Function name</span>    DeclarationName DeclName <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string FuncName <span class="token operator">=</span> DeclName<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Add comment before</span>    std<span class="token operator">::</span>stringstream SSBefore<span class="token punctuation">;</span>    SSBefore <span class="token operator">&lt;&lt;</span> <span class="token string">"// Begin function "</span> <span class="token operator">&lt;&lt;</span> FuncName <span class="token operator">&lt;&lt;</span> <span class="token string">" returning "</span> <span class="token operator">&lt;&lt;</span> TypeStr            <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    SourceLocation ST <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getSourceRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>ST<span class="token punctuation">,</span> SSBefore<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// And after</span>    std<span class="token operator">::</span>stringstream SSAfter<span class="token punctuation">;</span>    SSAfter <span class="token operator">&lt;&lt;</span> <span class="token string">"\n// End function "</span> <span class="token operator">&lt;&lt;</span> FuncName<span class="token punctuation">;</span>    ST <span class="token operator">=</span> FuncBody<span class="token operator">-</span><span class="token operator">></span><span class="token function">getEndLoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocWithOffset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">InsertText</span><span class="token punctuation">(</span>ST<span class="token punctuation">,</span> SSAfter<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>Rewriter <span class="token operator">&amp;</span>TheRewriter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Implementation of the ASTConsumer interface for reading an AST produced</span><span class="token comment" spellcheck="true">// by the Clang parser.</span><span class="token keyword">class</span> <span class="token class-name">MyASTConsumer</span> <span class="token operator">:</span> <span class="token keyword">public</span> ASTConsumer <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">MyASTConsumer</span><span class="token punctuation">(</span>Rewriter <span class="token operator">&amp;</span>R<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Visitor</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Override the method that gets called for each parsed top-level</span><span class="token comment" spellcheck="true">// declaration.</span><span class="token keyword">bool</span> <span class="token function">HandleTopLevelDecl</span><span class="token punctuation">(</span>DeclGroupRef DR<span class="token punctuation">)</span> override <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>DeclGroupRef<span class="token operator">::</span>iterator b <span class="token operator">=</span> DR<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e <span class="token operator">=</span> DR<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> b <span class="token operator">!=</span> e<span class="token punctuation">;</span> <span class="token operator">++</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Traverse the declaration using our AST visitor.</span>    Visitor<span class="token punctuation">.</span><span class="token function">TraverseDecl</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>MyASTVisitor Visitor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ASTConsumer<span class="token operator">></span>MyFrontendAction<span class="token operator">::</span><span class="token function">CreateASTConsumer</span><span class="token punctuation">(</span>CompilerInstance <span class="token operator">&amp;</span>CI<span class="token punctuation">,</span> StringRef file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    llvm<span class="token operator">::</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"** Creating AST consumer for: "</span> <span class="token operator">&lt;&lt;</span> file <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">setSourceMgr</span><span class="token punctuation">(</span>CI<span class="token punctuation">.</span><span class="token function">getSourceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CI<span class="token punctuation">.</span><span class="token function">getLangOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>MyASTConsumer<span class="token operator">></span><span class="token punctuation">(</span>TheRewriter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyFrontendAction<span class="token operator">::</span><span class="token function">EndSourceFileAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SourceManager <span class="token operator">&amp;</span>SM <span class="token operator">=</span> TheRewriter<span class="token punctuation">.</span><span class="token function">getSourceMgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    llvm<span class="token operator">::</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"** EndSourceFileAction for: "</span>                <span class="token operator">&lt;&lt;</span> SM<span class="token punctuation">.</span><span class="token function">getFileEntryForID</span><span class="token punctuation">(</span>SM<span class="token punctuation">.</span><span class="token function">getMainFileID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Now emit the rewritten buffer.</span>    TheRewriter<span class="token punctuation">.</span><span class="token function">getEditBuffer</span><span class="token punctuation">(</span>SM<span class="token punctuation">.</span><span class="token function">getMainFileID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span><span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CommonOptionsParser <span class="token function">op</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> ToolingSampleCategory<span class="token punctuation">)</span><span class="token punctuation">;</span>    ClangTool <span class="token function">Tool</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">getCompilations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> op<span class="token punctuation">.</span><span class="token function">getSourcePathList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ClangTool::run accepts a FrontendActionFactory, which is then used to</span>    <span class="token comment" spellcheck="true">// create new objects implementing the FrontendAction interface. Here we use</span>    <span class="token comment" spellcheck="true">// the helper newFrontendActionFactory to create a default factory that will</span>    <span class="token comment" spellcheck="true">// return a new MyFrontendAction object every time.</span>    <span class="token comment" spellcheck="true">// To further customize this, we could create our own factory class.</span>    <span class="token keyword">return</span> Tool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>newFrontendActionFactory<span class="token operator">&lt;</span>MyFrontendAction<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写 CmakeLists.txt ，这部分参考其他目录下的工具编写即可：</p><pre class="line-numbers language-sh"><code class="language-sh">set(LLVM_LINK_COMPONENTS    Support)add_clang_library(LoopConvertTooling    LoopConvert.cpp    LINK_LIBS    clangAST    clangBasic    clangDriver    clangFormat    clangLex    clangParse    clangSema    clangFrontend    clangTooling    clangToolingCore    clangRewrite    clangRewriteFrontend)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 clang-tools-extra 目录下的 CmakeLists.txt 下添加我们新增工具的目录。<code>add_subdirectory(LoopConvert)</code>。</p></li><li><p>一切准备就绪，确保 clang-tools-extra 编译指令是 enable ，点击 CmakeTools 的生成按钮即可，最终即可在 build/lib 目录下生成我们定制的的功能库，即 LoopConvertTooling.lib：</p><pre class="line-numbers language-sh"><code class="language-sh">[main] 正在生成文件夹: llvm-project-10.0.0[build] 正在启动生成[proc] 执行命令: "F:\Visual Studio\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.EXE" --build f:/LLVM10/llvm-project-10.0.0/build --config Release --target all -- -j 14[build] [1/2  50% :: 16.844] Building CXX object tools\clang\tools\extra\LoopConvert\CMakeFiles\obj.LoopConvertTooling.dir\LoopConvert.cpp.obj[build] [2/2 100% :: 17.265] Linking CXX static library lib\LoopConvertTooling.lib[build] 生成已完成，退出代码为 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="使用编译出的-libTooling"><a href="#使用编译出的-libTooling" class="headerlink" title="使用编译出的 libTooling"></a>使用编译出的 libTooling</h3><ol><li><p>接下来就是如何将我们生成的 LoopConvertTooling 库集成到我们自己的项目中去玩耍了，首先举个栗子，下边是我的测试代码，简单的调用了测试用的 C 接口：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  main.cpp</span><span class="token comment" spellcheck="true">//------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LoopConvert.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"You input wrong number arguments!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    FILE <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        spdlog<span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Can't open the file: {}.\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Function</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>首先要确保有环境变量或者指定路径可以找到我们刚才生成的 LoopConvertTooling 库和 LoopConvert.h 头文件。如图我将其拷到了我的工程目录下。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_4.png" alt="相关文件"></p></li><li><p>接下来是编写用于编译&amp;链接相关功能库的 CMakeLists.txt 文件。find_package 用于会在 CMAKE_PREFIX_PATH 环境变量路径中查找相应的库文件。link_directories 与 include_directories 会自动在指定的路径中查找头文件和库。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_5.png" alt="环境变量"></p><pre class="line-numbers language-sh"><code class="language-sh">find_package(LLVM REQUIRED CONFIG)find_package(Clang REQUIRED CONFIG)#指定连结库的路径link_directories(${CLANG_LIB_PATH} ./Lib)#指定头文件查找路径include_directories(Include ${CLANG_INCLUDE_PATH})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最终在 target_link_libraries 中链接如下的库。 <code>${LLVMSupport}</code> 与 <code>${clangxxx}</code> 这些都要在成功 find_package 后才能正确使用：</p><pre class="line-numbers language-sh"><code class="language-sh">target_link_libraries(${PROJECT_NAME} PRIVATE${linkLib}LoopConvertTooling${clangAST}${clangBasic}${clangDriver}${clangFormat}${clangLex}${clangParse}${clangSema}${clangFrontend}${clangTooling}${clangToolingCore}${clangRewrite}${clangRewriteFrontend}${LLVMSupport})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最终编译我们的项目，注意这里使用的时 clang-cl 为前端，如果直接使用 cl.exe 编译的话会有大量 warning 警告，原因是 clang 与 msvc-cl 有一些基础变量定义不同造成：</p><pre class="line-numbers language-sh"><code class="language-sh">[cms-client] 正在使用“Ninja”CMake 生成器进行配置[cms-client] 正在使用“Ninja”CMake 生成器进行配置[cmake] The CXX compiler identification is Clang 10.0.0[cmake] Check for working CXX compiler: F:/LLVM10/Lib/bin/clang-cl.exe[cmake] Check for working CXX compiler: F:/LLVM10/Lib/bin/clang-cl.exe -- works[cmake] Detecting CXX compiler ABI info[cmake] Detecting CXX compiler ABI info - done[cmake] Detecting CXX compile features[cmake] Detecting CXX compile features - done[cmake] Looking for C++ include pthread.h[cmake] Looking for C++ include pthread.h - not found[cmake] Found Threads: TRUE[cmake] Configuring done[cmake] Generating done[build] 正在启动生成[proc] 执行命令: "F:\Visual Studio\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.EXE" --build f:/WorkSpace/AutoTestProject/AUTestTools/build --config Release --target all -- -j 14[build] [2/15   6% :: 0.103] Automatic MOC and UIC for target ProjectUnitTest[build] [2/13  15% :: 0.275] Automatic MOC and UIC for target Automated_UnitTest[build] [12/13  23% :: 0.377] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\test.cpp.obj[build] [12/13  30% :: 0.401] Building CXX object CMakeFiles\Automated_UnitTest.dir\qrc_image.cpp.obj[build] [12/13  38% :: 2.254] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\window\DiagramWindow\Arrow.cpp.obj[build] [12/13  46% :: 2.352] Building CXX object CMakeFiles\Automated_UnitTest.dir\Automated_UnitTest_autogen\mocs_compilation.cpp.obj[build] [12/13  53% :: 4.049] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\window\DiagramWindow\DiagramTextItem.cpp.obj[build] [12/13  61% :: 4.158] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\main.cpp.obj[build] [12/13  69% :: 4.235] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\window\DiagramWindow\DiagramScene.cpp.obj[build] [12/13  76% :: 4.295] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\window\DiagramWindow\DiagramItem.cpp.obj[build] [12/13  84% :: 5.678] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\window\mainwindow.cpp.obj[build] [12/13  92% :: 6.419] Building CXX object CMakeFiles\Automated_UnitTest.dir\Src\window\DiagramWindow\DiagramSceneWindow.cpp.obj[build] [13/13 100% :: 6.760] Linking CXX executable Automated_UnitTest.exe[build] 生成已完成，退出代码为 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行一下生成的 .exe 程序：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//测试用的输入文件 test.cpp</span><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">Cpp11Enum</span><span class="token punctuation">{</span>    RED <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    BLUE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Wowza<span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Wowza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Badabang <span class="token operator">:</span> Wowza<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Badabang <span class="token operator">&amp;</span>o<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">testif_else</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span>T <span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh"><code class="language-sh">F:\WorkSpace\AutoTestProject\AUTestTools>"F:\WorkSpace\AutoTestProject\AUTestTools\build\test\ProjectUnitTest.exe" ./Src/test.cppError while trying to load a compilation database:Could not auto-detect compilation database for file "./Src/test.cpp"No compilation database found in F:\WorkSpace\AutoTestProject\AUTestTools\Src or any parent directoryfixed-compilation-database: Error while opening fixed database: no such file or directoryjson-compilation-database: Error while opening JSON database: no such file or directoryRunning without flags.** Creating AST consumer for: F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cppEnumDecl 0x1a5b6119e60 <F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cpp:1:1, line:5:1> line:1:12 class Cpp11Enum 'int'|-EnumConstantDecl 0x1a5b6119f68 <line:3:5, col:11> col:5 RED 'Cpp11Enum'| `-ConstantExpr 0x1a5b6119f48 <col:11> 'int' Int: 10|   `-IntegerLiteral 0x1a5b6119f20 <col:11> 'int' 10`-EnumConstantDecl 0x1a5b611a008 <line:4:5, col:12> col:5 BLUE 'Cpp11Enum'`-ConstantExpr 0x1a5b6119fe8 <col:12> 'int' Int: 20    `-IntegerLiteral 0x1a5b6119fc0 <col:12> 'int' 20CXXRecordDecl 0x1a5b611a060 <F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cpp:7:1, line:11:1> line:7:8 struct Wowza definition|-DefinitionData polymorphic abstract has_constexpr_non_copy_move_ctor can_const_default_init| |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param| |-MoveConstructor| |-CopyAssignment non_trivial has_const_param implicit_has_const_param| |-MoveAssignment| `-Destructor non_trivial user_declared|-CXXRecordDecl 0x1a5b611a178 <col:1, col:8> col:8 implicit referenced struct Wowza|-CXXDestructorDecl 0x1a5b611a2a8 <line:9:5, col:30> col:13 ~Wowza 'void ()' virtual default noexcept-unevaluated 0x1a5b611a2a8|-CXXMethodDecl 0x1a5b611a468 <line:10:5, col:35> col:18 foo 'void (int)' virtual pure| `-ParmVarDecl 0x1a5b611a3a8 <col:22, col:30> col:26 i 'int' cinit|   `-IntegerLiteral 0x1a5b611ad40 <col:30> 'int' 0`-CXXMethodDecl 0x1a5b611a568 <line:7:8> col:8 implicit operator= 'Wowza &(const Wowza &)' inline default noexcept-unevaluated 0x1a5b611a568`-ParmVarDecl 0x1a5b611a678 <col:8> col:8 'const Wowza &'CXXRecordDecl 0x1a5b611ad68 <F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cpp:13:1, line:18:1> line:13:8 struct Badabang definition|-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init| |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param| |-MoveConstructor exists simple non_trivial needs_overload_resolution| |-CopyAssignment non_trivial has_const_param implicit_has_const_param| |-MoveAssignment exists simple non_trivial needs_overload_resolution| `-Destructor simple non_trivial needs_overload_resolution|-public 'Wowza'|-CXXRecordDecl 0x1a5b611af18 <col:1, col:8> col:8 implicit referenced struct Badabang|-CXXMethodDecl 0x1a5b611b080 <line:15:5, col:19> col:10 foo 'void (int)'| |-Overrides: [ 0x1a5b611a468 Wowza::foo 'void (int)' ]| |-ParmVarDecl 0x1a5b611afc0 <col:14> col:17 'int'| `-OverrideAttr 0x1a5b611b128 <col:19>|-CXXMethodDecl 0x1a5b611b2a8 <line:17:5, col:40> col:10 operator== 'bool (const Badabang &) const'| `-ParmVarDecl 0x1a5b611b1b8 <col:21, col:37> col:37 o 'const Badabang &'|-CXXConstructorDecl 0x1a5b611b500 <line:13:8> col:8 implicit constexpr Badabang 'void (const Badabang &)' inline default noexcept-unevaluated 0x1a5b611b500| `-ParmVarDecl 0x1a5b611b618 <col:8> col:8 'const Badabang &'|-CXXConstructorDecl 0x1a5b611b6b8 <col:8> col:8 implicit constexpr Badabang 'void (Badabang &&)' inline default noexcept-unevaluated 0x1a5b611b6b8| `-ParmVarDecl 0x1a5b611b7c8 <col:8> col:8 'Badabang &&'|-CXXMethodDecl 0x1a5b611b868 <col:8> col:8 implicit operator= 'Badabang &(const Badabang &)' inline default noexcept-unevaluated 0x1a5b611b868| `-ParmVarDecl 0x1a5b611b978 <col:8> col:8 'const Badabang &'|-CXXMethodDecl 0x1a5b611b9e8 <col:8> col:8 implicit operator= 'Badabang &(Badabang &&)' inline default noexcept-unevaluated 0x1a5b611b9e8| `-ParmVarDecl 0x1a5b611baf8 <col:8> col:8 'Badabang &&'`-CXXDestructorDecl 0x1a5b611bb80 <col:8> col:8 implicit ~Badabang 'void () noexcept' inline default`-Overrides: [ 0x1a5b611a2a8 Wowza::~Wowza 'void () noexcept' ]FunctionDecl 0x1a5b611bca8 <F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cpp:20:1, line:34:1> line:20:6 testif_else 'void ()'`-CompoundStmt 0x1a5b611d128 <line:21:1, line:34:1>`-IfStmt 0x1a5b611d100 <line:22:5, line:33:5> has_else    |-ImplicitCastExpr 0x1a5b611bdb8 <line:22:9> 'bool' <IntegralToBoolean>    | `-IntegerLiteral 0x1a5b611bd90 <col:9> 'int' 1    |-CompoundStmt 0x1a5b611ced0 <line:23:5, line:25:5>    | `-DeclStmt 0x1a5b611ceb8 <line:24:9, col:19>    |   `-VarDecl 0x1a5b611bde8 <col:9, col:17> col:13 a 'int' cinit    |     `-IntegerLiteral 0x1a5b611ce90 <col:17> 'int' 10    `-IfStmt 0x1a5b611d0d8 <line:26:10, line:33:5> has_else    |-ImplicitCastExpr 0x1a5b611cf10 <line:26:14> 'bool' <IntegralToBoolean>    | `-IntegerLiteral 0x1a5b611cee8 <col:14> 'int' 2    |-CompoundStmt 0x1a5b611cfe8 <line:27:5, line:29:5>    | `-DeclStmt 0x1a5b611cfd0 <line:28:9, col:19>    |   `-VarDecl 0x1a5b611cf40 <col:9, col:17> col:13 b 'int' cinit    |     `-IntegerLiteral 0x1a5b611cfa8 <col:17> 'int' 20    `-CompoundStmt 0x1a5b611d0c0 <line:31:5, line:33:5>        `-DeclStmt 0x1a5b611d0a8 <line:32:9, col:19>        `-VarDecl 0x1a5b611d018 <col:9, col:17> col:13 c 'int' cinit            `-IntegerLiteral 0x1a5b611d080 <col:17> 'int' 20FunctionTemplateDecl 0x1a5b611d408 <F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cpp:35:1, line:36:15> col:6 bar|-TemplateTypeParmDecl 0x1a5b611d140 <line:35:11, col:20> col:20 referenced typename depth 0 index 0 T`-FunctionDecl 0x1a5b611d368 <line:36:1, col:15> col:6 bar 'void (T &&)'`-ParmVarDecl 0x1a5b611d278 <col:10, col:14> col:14 t 'T &&'** EndSourceFileAction for: F:\WorkSpace\AutoTestProject\AUTestTools\Src\test.cppenum class Cpp11Enum{    RED = 10,    BLUE = 20};struct Wowza{    virtual ~Wowza() = default;    virtual void foo(int i = 0) = 0;};struct Badabang : Wowza{    void foo(int) override;    bool operator==(const Badabang &o) const;};// Begin function testif_else returning voidvoid testif_else(){    if (1)    // the 'if' part    {        int a = 10;    }    else // the 'else' part    if (2)    // the 'if' part    {        int b = 20;    }    else    // the 'else' part    {        int c = 20;    }}// End function testif_else<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="使用-clang-cl-为前端"><a href="#使用-clang-cl-为前端" class="headerlink" title="使用 clang-cl 为前端"></a>使用 clang-cl 为前端</h3><ul><li><p>使用 clang-cl 主要需要注意一点，就是需要在环境变量中配置 include 与 lib，指向你的 msvc-cl 的 include 与 lib 路径，LLVM 和 clang 的 include 与 lib 路径。在 windows 下的话 还需要添加 windows sdk 相关的 include 与 lib 路径。以防头文件找不到编译失败。如下图：</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_6.png"><br><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/2_7.png"></p></li></ul><h2 id="以源码的方式集成到项目中"><a href="#以源码的方式集成到项目中" class="headerlink" title="以源码的方式集成到项目中"></a>以源码的方式集成到项目中</h2><ul><li><p>可能你遇到了和我一样的困扰，就是想要调试一个关于源码 AST 树相关的功能，需要先在 llvm-project 项目中将你的功能模块编译成库，然后在链接到你的项目中去，不说 llvm-project 体积巨大，打开项目浪费时间，单单这操作也是够繁琐了。因此，这里我整理了下如何使用源码在你的项目中去编译。</p><ul><li><p>首先，确保你项目中可以通过 <code>find_package</code> 查找到 Clang 与 LLVM，以及可以使用库的方式链接通过。</p></li><li><p>然后，需要编写基于 libTooling 工具的源码，这里我将之前使用过的 loopConvert.cpp 拷贝过来直接用。接下来就是修改 CMakeLists.txt 了。参考如下：</p><pre class="line-numbers language-sh"><code class="language-sh">find_package(LLVM REQUIRED CONFIG)find_package(Clang REQUIRED CONFIG)set(AUTESTSRCmain.cppLoopConvert.cpp)set(CLANG_LINK_LIBRARIESlibclangclangToolingclangARCMigrateclangASTclangASTMatchersclangAnalysisclangBasicclangCodeGenclangDriverclangEditclangFrontendclangFrontendToolclangLexclangParseclangRewriteclangRewriteFrontendclangSemaclangSerializationclangCodeGen)function(clang_target_link target type)if (CLANG_LINK_CLANG_DYLIB)    target_link_libraries(${target} ${type} clang_shared)else()    target_link_libraries(${target} ${type} ${ARGN})endif()endfunction()add_executable(${PROJECT_NAME} ${HEAD_FILES} ${AUTESTSRC})clang_target_link(${PROJECT_NAME} PRIVATE ${CLANG_LINK_LIBRARIES})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>这样我们就成功的生成了定制工具、定制的 libTooling 工具以及通过源码的方式集成到自己的项目中了。</p>]]></content>
      
      
      <categories>
          
          <category> LLVM 编译器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）LLVM编译器--环境配置</title>
      <link href="/2022/06/02/yi-llvm-bian-yi-qi-huan-jing-pei-zhi/"/>
      <url>/2022/06/02/yi-llvm-bian-yi-qi-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-下通过-CMAKE-搭建-LLVM-环境"><a href="#Windows-下通过-CMAKE-搭建-LLVM-环境" class="headerlink" title="Windows 下通过 CMAKE 搭建 LLVM 环境"></a>Windows 下通过 CMAKE 搭建 LLVM 环境</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>hello，又开了一个新系列的坑，不写 BLOG 真是不知道，以前我记了这么多乱七八糟奇怪的笔记 😅。就像本文标题主要写着 Windows 下搭建环境一样诡异，不过反过来想想 Macos、Linux 下安装 LLVM 确实太简单了，包管理很好的完成了工作，Windows 更能体现技术不是。So 本文不会再我使用的 Macos 上重新修订啦！！希望能对有和我相同奇怪需求的你有所帮助。</li><li><a href="https://github.com/HATTER-LONG/AUTestTools">源笔记项目</a>，觉得不错来个 star 吧。</li></ul><blockquote><p>本文记录于 2020 年，因此版本有些老了，不过编译方式与使用接口并没有太大变化，亲测在本文发出时 LLVM 14 上是可以正常编译的使用的。</p></blockquote><blockquote><p>本系列文章我在 CSDN 上也传过，不过 CSDN 吃香太难看了，后续也不会在上边更新维护了，就这样。</p></blockquote><blockquote><p>以下正文。</p></blockquote><p>本文主要介绍如何在 Windows 下通过 vscode 使用 Cmake+Ninja 来编译 LLVM 源码，从而搭建 LLVM 环境以及生成 clang 的 Tools 相关库。</p><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><ol><li><p>为啥要编译源码，预编译包它不香么？</p><ul><li>确实 LLVM 官方已经提供了 Win32 版本的预编译包，但是我尝试安装了 9.0.1 版本与 10.0.0 版本，它居然都没有 clang 的 libTooling 相关的库，这就很难受了所以为了能使用 clang Tools 只好从头做起，如果哪位同学知道为啥不提供 libtooling 这些库的原因请告诉下，谢谢~😂。<blockquote><p>就是因为 Windows 上使用 LLVM 就是鸡肋，没人用呗 😓。</p></blockquote></li></ul></li><li><p>为啥非得在 Windows 下，Linux 不是更方便？</p><ul><li>我在 Linux 下也搭建了一下 9.0.1 版本，直接在 LLVM 官网上下载对应版本与系统的预编译包，解压及用、库又全又好用 😀。</li><li>但是由于我使用的 Ubuntu WSL 子系统，通过 Vscode 的 WSL 插件连接上后发现对 c++ 插件支持貌似有问题，代码颜色渲染信息不全，不清楚是 GCC 编译器问题还是啥原因，导致强迫症患者不想在 WSL 系统直接开发，知道原因的大佬求告知，反正当前的项目是通过 CMake 管理，所以决定在 windows 下开发完成后在移植到 Linux 下。<blockquote><p>这个问题已经解决了，是 vscode cpp 插件的问题，github 项目上有 issue 描述了此问题，最新版本已经修复。所以说非得在 Windows 上编译纯粹就是个伪需求，想必没谁有类似的需求了。</p></blockquote></li></ul></li><li><p>废话就说这么多现在开始。</p></li></ol><hr><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ol><li><p>Win10 操作系统，已经安装了 VS2017 全家桶。包括最最重要的 msvc2017_64 工具包、Vscode、以及 camke(version 3.12.18081601-MSVC_2) 工具。当然如果你不想装那么巨大的 IDE，也可以单独安装 mingw + cmake 网上的教程也很多。</p></li><li><p>环境变量正确配置，例如在 powershell 或 cmd 中敲 cmake.exe -version 可以打印出安装的工具版本，确保你的编译器相关工具也可以正常工作。</p></li></ol><h2 id="Let’s-Begin"><a href="#Let’s-Begin" class="headerlink" title="Let’s Begin"></a>Let’s Begin</h2><h3 id="获取-LLVM-Project-源码"><a href="#获取-LLVM-Project-源码" class="headerlink" title="获取 LLVM Project 源码"></a>获取 LLVM Project 源码</h3><p>查找了一些网上的资料发现下载源码超级麻烦，要么是需要安装 svn 、要么去官网下载，并且需要下载这个源码然后在下那个源码，一眼看过去就迷失在了未知的海洋里嘞。因此在这里推荐直接下载 llvm-project 源码合集大礼包，可以避免很多问题。</p><ol><li><p>如果你是在担忧源码编译出来过大以及多余你不需要的模块，那么不用担心，llvm 的贴心的准备了裁剪编译命令，帮助你只构建需要的模块。</p><ul><li>考虑到当时我下载时艰辛的网速，<a href="https://pan.baidu.com/s/1xxCf43Gg-S3idpyCZ1WbQA">你也可以通过这里下载 10.0.0 版本的源码</a>，提取码：u0sf。<blockquote><p>看看当时青涩的我，代理网站和镜像网站下载不香么 😓。这里推荐个<a href="https://hub.fastgit.xyz/">代理站</a>，下载速度还是很快的，上边这个网盘我也懒得去修改了，真有需求邮件我好了，我再更新。</p></blockquote></li></ul></li><li><p>此时你已经拿到了源码包，开开心心的右键 -&gt; 解压到当前文件夹 -&gt; 等待 -&gt; ….. -&gt; 错误：无法创建文件。 What???</p><ul><li><p>我遇到的问题主要是由于压缩包中包含软连接，当前 Windows 下文件系统不支持创建，导致错误。最终我是直接通过 WSL 子系统，使用命令 tar 解压的。所以如果在 Windows 下解压失败的话可以尝试在 Linux 中解压然后在拷贝出来。</p><blockquote><p>So，不要在 Windows 上编译源码，就是个坑。直接预编译包不香么。</p></blockquote></li></ul><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/1_1.png" alt="命令"></p></li></ol><h3 id="使用-Vscode-打开-amp-编译-LLVM-Project"><a href="#使用-Vscode-打开-amp-编译-LLVM-Project" class="headerlink" title="使用 Vscode 打开&amp;编译 LLVM Project"></a>使用 Vscode 打开&amp;编译 LLVM Project</h3><p>在打开之前，需要介绍一个很重要的工具，它就是 CmakeTools，作为 Vscode 的插件，在管理使用 cmake 构建的工程非常好用，可以方便的配置使用的编译器、编译模式、使用 GDB、<strong>控制生成模块</strong>。因此如果你不想耗费精力去管理工程或者输入编译命令，那么我强烈建议你安装一个。</p><ol><li><p>安装好 CmakeTools 工具后，通过 vscode 打开 llvm-project 的源码文件夹。如果你的环境变量正确，编译器、cmake 工具能正确搜索到，那么 CmakeTools 会自动使用 cmake 工具配置当前项目，但是由于 llvm-project 的源码根目录中并没有 CMakeLists.txt，因此 CmakeTools 工具会提示一个错误。</p><ul><li><p>解决的办法就在根目录中的 <code>README.md</code> 中，可以看到几个步骤，其中 mkdir build 的步骤其实 CmakeTools 默认就会在当前文件夹根目录创建 build 用于保存编译中间文件因此略过。主要看到其中 cmake 命令对应的 ../llvm 目录，可知作为入口的 CMakeLists.txt 就在 llvm 目录中。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/1_2.png" alt="编译"></p></li><li><p>因此配置 cmaketools 的根目录为 llvm 目录。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/1_3.png" alt="设置 cmaketools"></p></li></ul></li><li><p>这时你的 CmakeTools 应该就可以正确的工作了。以下就是我当前环境中的 CmakeTools 在配置 CMakeLists.txt 时的输出信息，可以看到最终是配置成功的。</p><pre class="line-numbers language-sh"><code class="language-sh">[variant] 已加载一组新变量[kit] 已成功从 C:\Users\Administrator\AppData\Local\CMakeTools\cmake-tools-kits.json 加载 14 工具包[main] 正在配置文件夹: llvm-project-10.0.0[cmake] clang project is enabled[cmake] clang-tools-extra project is enabled[cmake] compiler-rt project is disabled[cmake] debuginfo-tests project is disabled[cmake] libc project is disabled[cmake] libclc project is disabled[cmake] libcxx project is disabled[cmake] libcxxabi project is disabled[cmake] libunwind project is disabled[cmake] lld project is disabled[cmake] lldb project is disabled[cmake] llgo project is disabled[cmake] mlir project is disabled[cmake] openmp project is disabled[cmake] parallel-libs project is disabled[cmake] polly project is disabled[cmake] pstl project is disabled[cmake] Could NOT find Z3: Found unsuitable version "0.0.0", but required is at least "4.7.1" (found Z3_LIBRARIES-NOTFOUND)[cmake] Could NOT find Backtrace (missing: Backtrace_LIBRARY Backtrace_INCLUDE_DIR)[cmake] Native target architecture is X86[cmake] Threads enabled.[cmake] Doxygen disabled.[cmake] Go bindings disabled.[cmake] Ninja version: 1.8.2[cmake] Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH)[cmake] OCaml bindings disabled.[cmake] LLVM host triple: x86_64-pc-windows-msvc[cmake] LLVM default target triple: x86_64-pc-windows-msvc[cmake] Using Release VC++ CRT: MD[cmake] Constructing LLVMBuild project information[cmake] LLVMHello ignored -- Loadable modules not supported on this platform.[cmake] Targeting AArch64[cmake] Targeting AMDGPU[cmake] Targeting ARM[cmake] Targeting BPF[cmake] Targeting Hexagon[cmake] Targeting Lanai[cmake] Targeting Mips[cmake] Targeting MSP430[cmake] Targeting NVPTX[cmake] Targeting PowerPC[cmake] Targeting RISCV[cmake] Targeting Sparc[cmake] Targeting SystemZ[cmake] Targeting WebAssembly[cmake] Targeting X86[cmake] Targeting XCore[cmake] Clang version: 10.0.0[cmake] PrintFunctionNames ignored -- Loadable modules not supported on this platform.[cmake] AnnotateFunctions ignored -- Loadable modules not supported on this platform.[cmake] BugpointPasses ignored -- Loadable modules not supported on this platform.[cmake] Bye ignored -- Loadable modules not supported on this platform.[cmake] TestPlugin ignored -- Loadable modules not supported on this platform.[cmake] -- Version: 0.0.0[cmake] -- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile[cmake] -- Performing Test HAVE_POSIX_REGEX -- failed to compile[cmake] CMake Warning at utils/benchmark/CMakeLists.txt:244 (message):[cmake]   Using std::regex with exceptions disabled is not fully supported[cmake][cmake][cmake] -- Performing Test HAVE_STEADY_CLOCK -- success[cmake] Configuring done[cmake] Generating done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里如果想要编译其他模块例如 <code>[cmake] clang project is enabled</code>，还需要在 CmakeTools 配置的时候传入一些参数，如图。参数的含义可以看根目录中 README.md 中有详细的解释。这里有个问题就是像我配置的第一项 <code>compiler-rt</code> 其实依旧是 <code>disabled</code> 的，怀疑是 LLVM 的 CMakeLists.txt 解析有 BUG 或者我哪里配置的还是不对，请了解的大佬告知。</p><ul><li><p>这里有一点需要注意，CMakeTools 默认也是编译 Debug 模式，但是这对电脑内存要求较高，耗时同样很长，因此我这里配置参数编译的是 Release 版本。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/1_4.png" alt="设置 cmaketools"></p></li></ul></li><li><p>最终当这一切配置完成，点击 CmakeTools 中的 <code>生成</code> 按钮，就可以开始编译了。</p><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/LLVM/1_5.png" alt="cmaketools 编译"></p></li></ol><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>最终编译完成后，会在根目录的 build 文件夹中生成许多文件，其中 <code>lib</code> 就包括所有生成的库文件。<br>注意 LLVM 中有一些头文件时在编译过程中针对平台生成，也在 build 目录中，当使用库时发现头文件找不到的情况，可以去 build 中搜索下查找。</p><p>至此，LLVM 就成功编译完成，接下来就可以开心的搞事情了。</p>]]></content>
      
      
      <categories>
          
          <category> LLVM 编译器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（六）测试驱动开发技巧--增量设计</title>
      <link href="/2022/06/02/liu-ce-shi-qu-dong-kai-fa-ji-qiao-zeng-liang-she-ji/"/>
      <url>/2022/06/02/liu-ce-shi-qu-dong-kai-fa-ji-qiao-zeng-liang-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="增量设计"><a href="#增量设计" class="headerlink" title="增量设计"></a>增量设计</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 TDD 的主要原因是，能够以可承受的、稳定的维护成本来添加或修改功能特性。在本章中，你将学到重构过程中需要做的事情。我们将主要讨论 Kent Beck 提出的简单设计理念（参见《解析极限编程：拥抱变化》），以及可以保持代码整洁的一系列重要规则。</p><h2 id="简单设计"><a href="#简单设计" class="headerlink" title="简单设计"></a>简单设计</h2><ul><li>在使用 TDD 时需要考虑三条规则：<ol><li>确保代码具备很强的可读性和表达力。</li><li>在和第一条规则不冲突的情况下，消除所有的重复。</li><li>不要向系统引入不必要的复杂性。避免猜测行的结构关系和不能增加系统表达力的抽象。</li></ol></li></ul><h3 id="重复代码的代价"><a href="#重复代码的代价" class="headerlink" title="重复代码的代价"></a>重复代码的代价</h3><p>随着时间的推移，重复代码或许是维护代码库的最大开销。大多数开发者懒于创建新的成员函数，因为怀疑这会降低性能，所以他们有时甚至会拒绝这样做。最终，他们只是为自己创造了更多的未来工作量。</p><p>由于对重复的自然倾向，大部分大型系统的代码远远多于实际需要的代码。这些额外的代码大大地增加了维护成本和风险。</p><p><strong>将增量重构作为 TDD 环节的一部分可以避免系统级的退化。</strong></p><h3 id="投资管理器"><a href="#投资管理器" class="headerlink" title="投资管理器"></a>投资管理器</h3><p>以开发一个小型子系统举例:</p><ul><li>场景：投资管理器<ul><li>投资人想要跟踪股票买卖记录，并将此作为金融分析的基础。</li></ul></li></ul><p>本篇示例代码大部分编写过程不在详细赘述，如果需要可以在<a href="https://github.com/HATTER-LONG/TDD_Learning">源码工程</a>中查找到。</p><p>经过初步编写，获得了如下的测试代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// test/Catch2/PortfolioTest/PortfolioTest.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Portfolio/Portfolio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Catch<span class="token punctuation">;</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Create portfolio example"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Portfolio portfolio<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">APortfolio</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Portfolio m_portfolio<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Is empty whe created"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Is not empty after purchase"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    m_portfolio<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token string">"IBM"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_FALSE</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers zero for share count of no purchased symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token string">"AAPL"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers share count for purchased symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    m_portfolio<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token string">"IBM"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token string">"IBM"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Src/Portfolio/Portfolio.h</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Portfolio</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Portfolio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> m_isEmpty<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> m_shareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Src/Portfolio/Portfolio.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Portfolio.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>Portfolio<span class="token operator">::</span><span class="token function">Portfolio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">:</span> m_isEmpty <span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>        <span class="token punctuation">,</span> m_shareCount <span class="token punctuation">{</span> <span class="token number">0u</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Portfolio<span class="token operator">::</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_isEmpty<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    m_shareCount <span class="token operator">=</span> ShareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Portfolio<span class="token operator">::</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_shareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码就是阅读代码首要的理解途径。</p><h3 id="投资管理器中的简单重复"><a href="#投资管理器中的简单重复" class="headerlink" title="投资管理器中的简单重复"></a>投资管理器中的简单重复</h3><p><strong>参考代码版本：Git SHA (18fdb0404fcec58c117f776cadb40d4909c50243)；</strong></p><p>首先要知道一点，<strong>不仅仅是生产代码，测试代码中避免重复也是很重要的</strong>。例如字符串 “IBM” 在两个测试中就重复了 3 次。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">APortfolio</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string IBM<span class="token punctuation">;</span>    Portfolio m_portfolio<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> string APortfolio<span class="token operator">::</span><span class="token function">IBM</span><span class="token punctuation">(</span><span class="token string">"IBM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 IBM 成员替换掉 “IBM” 字符串。</p><p>如下代码中也存在重复：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Portfolio.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>Portfolio<span class="token operator">::</span><span class="token function">Portfolio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">:</span> m_isEmpty <span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>        <span class="token punctuation">,</span> m_shareCount <span class="token punctuation">{</span> <span class="token number">0u</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Portfolio<span class="token operator">::</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_isEmpty<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    m_shareCount <span class="token operator">=</span> ShareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Portfolio<span class="token operator">::</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_shareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从视觉角度来看，代码并没有明显的行与行（或表达式与表达式）的重复。但其中存在算法级的重复。成员函数 IsEmpty() 返回一个布尔量，这个布尔量会在 Purchase() 被调用时更改。但是，空的概念却直接绑定了股票数目，股票数目会在调用 Purchase() 时被赋值。通过去除 m_isEmpty 变量，让 IsEmpty() 查询股票的数量，我们可以消除这一概念重复。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Portfolio.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>Portfolio<span class="token operator">::</span><span class="token function">Portfolio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">:</span> m_shareCount <span class="token punctuation">{</span> <span class="token number">0u</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Portfolio<span class="token operator">::</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">==</span> m_shareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_shareCount <span class="token operator">=</span> ShareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Portfolio<span class="token operator">::</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_shareCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过查询股票数量来决定是不是空有些啰嗦，但是目前是正确的。而且随证增量编写代码，往往会有一些更有趣的想发进而促进新测试的产生。例如，有人购买了 0 股某股票，Portfolio::isEmpty() 会返回空。但是我们对于空的定义是是否包含任何股票，所以这是否为空？或者不应该允许这笔买入？确定好前进的方向，并增加一个测试吧。</p><p><strong>算法的重复（解决同一问题的不同方法或问题的不同部分）会随系统增长演变为重大问题。通常来说，随着对一个实现的改动未能编写进其他实现，重复代码会演化为不经意的变体。</strong></p><h3 id="如何坚持增量的方法"><a href="#如何坚持增量的方法" class="headerlink" title="如何坚持增量的方法"></a>如何坚持增量的方法</h3><p><strong>参考代码版本：Git SHA (76f547915f27e85a2078d92c70eac8144da2e336)；</strong></p><p>经过一段时间的编码后，我们得到了如下的一些测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Is empty whe created"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Is not empty after purchase"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers zero for share count of no purchased symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers share count for purchased symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Throw on purchase of zero shares"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers share count for appropriate symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"share count reflects accumulated for purchases same symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Reduces share count of symbol on sell"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Throw when selling more shares than purchased"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增的需求来了：</p><ul><li><strong>场景：显示买入历史记录</strong><ul><li>投资者想看一下特定股票的购买记录，每个记录要显示购买的日期及数量。</li></ul></li></ul><p>就当前实现来说，这个场景开发很困难，因为我们没有跟踪每一笔的交易，更没有记录购买日期。这也是许多开发者对 TDD 质疑的地方。但是如果多花一些时间进行前期的需求分析，那么我们就会知道需要跟踪买日日期，这样在最初的设计就可能纳入这个需求。</p><p>但现在已经开发一般，马后炮是没有用的。这个需求场景需要重构，设定好 10 分钟的闹钟，开始。</p><blockquote><p>参考代码版本：Git SHA (d4516419538f4adfd5d8f252c10a9e8f37b528ec)</p></blockquote><ul><li>先理顺以下需要做的工作：<ul><li>首先必须定义好表示买入的数据结构、改变方法的参数列表、从客户端代码提供日期、正确地填写数据结构并储存数据。</li><li>不过先不要开始，至少不要一口气做完。时刻谨记是否可以增量的进行，每几分钟就寻求一下正面的反馈。例如，让我们先创建一个做出一笔买入的测试，然后验证相应的买入是否在购买记录中。假设买入总是在一个指定的日期做出，因为可以不给 Purchase() 传递日期，这使得目前的任务更简单。</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers the purchase record for a single purchase"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token punctuation">;</span>    m_portfolio<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> purchases <span class="token operator">=</span> m_portfolio<span class="token punctuation">.</span><span class="token function">purchases</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> purchase <span class="token operator">=</span> purchases<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>purchase<span class="token punctuation">.</span>m_shareCount <span class="token operator">==</span> <span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>purchase<span class="token punctuation">.</span>m_date <span class="token operator">==</span> Portfolio<span class="token operator">::</span>FIXED_PURCHASE_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了使测试通过，可以先不需要将买入记录于 holding 数据结构关联。因为目前的假设只考虑单次买入，所以可以定义一个“全局的”买入记录集合：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> PurchaseRecord<span class="token punctuation">{</span>    <span class="token function">PurchaseRecord</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> Date<span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">m_shareCount</span><span class="token punctuation">(</span>ShareCount<span class="token punctuation">)</span>            <span class="token punctuation">,</span> <span class="token function">m_date</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> m_shareCount<span class="token punctuation">;</span>    boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date m_date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Portfolio</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date FIXED_PURCHASE_DATE<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> <span class="token function">purchases</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span> m_holdings<span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> m_purchases<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考代码版本：Git SHA (34253c6cd9326d82aa508e8e82bd52061b26508f)</p></blockquote><p>在继续之前，获得对敲入代码的正面反馈是一件很好的事情。我们定义了一个常量 FIXED_PURCHASE_DATE，以便取得快速的、可以展示的进步。我们知道这是假设的，现在去掉这个假设，然后增加一个新的测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers the purchase record for a single purchase"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token punctuation">;</span>    date <span class="token function">dateOfPurchase</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> boost<span class="token operator">::</span>date_time<span class="token operator">::</span>Mar<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_portfolio<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> dateOfPurchase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> purchases <span class="token operator">=</span> m_portfolio<span class="token punctuation">.</span><span class="token function">purchases</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> purchase <span class="token operator">=</span> purchases<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>purchase<span class="token punctuation">.</span>m_shareCount <span class="token operator">==</span> <span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>purchase<span class="token punctuation">.</span>m_date <span class="token operator">==</span> dateOfPurchase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 purchase 接口支持传入日期参数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Src/Portfolio/Portfolio.h</span>    <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span>        <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> TransactionDate <span class="token operator">=</span> Portfolio<span class="token operator">::</span>FIXED_PURCHASE_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Src/Portfolio/Portfolio.cpp</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ShareCount<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">InvalidPurchaseException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> ShareCount <span class="token operator">+</span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span>ShareCount<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到接口使用了默认参数，但是这个参数并没有什么作用，还容易引起错误，现在想要去除 purchase 的默认时间但是还有许多测试没有传入日期，可以提供一个 fixture 辅助方法，由它来处理对 Purchase() 的调用并提供一个默认日期。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">APortfolio</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date ARBITRARY_DATE<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string IBM<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string SAMSUNG<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span>        <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate <span class="token operator">=</span> APortfolio<span class="token operator">::</span>ARBITRARY_DATE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_portfolio<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">,</span> ShareCount<span class="token punctuation">,</span> ARBITRARY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Portfolio m_portfolio<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Reduces share count of symbol on sell"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">purchase</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_portfolio<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">shareCount</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">30u</span> <span class="token operator">-</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个可能引起争议的点是，辅助函数 Purchase() 从测试中移除了一些信息，第一次阅读测试的人必须查看辅助函数以便了解其作用。但这是一个简单函数，没有隐藏对阅读者来说难以记忆的关键信息。<strong>因此在专门测试 Purchase() 行为时，我们应该直接调用它。</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers share count for purchased symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    m_portfolio<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span>IBM<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> ARBITRARY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以接受一个默认的测试时间传入</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">shareCount</span><span class="token punctuation">(</span>IBM<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更多的重复"><a href="#更多的重复" class="headerlink" title="更多的重复"></a>更多的重复</h3><p><strong>参考代码版本：Git SHA (336879ab8d12cd3aeed071004ff61aa642c3d953)；</strong></p><p>为了支持负数的买入记录，将 ShareCount 改为有符号整数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> PurchaseRecord<span class="token punctuation">{</span>    <span class="token function">PurchaseRecord</span><span class="token punctuation">(</span><span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> Date<span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">m_shareCount</span><span class="token punctuation">(</span>ShareCount<span class="token punctuation">)</span>            <span class="token punctuation">,</span> <span class="token function">m_date</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_shareCount<span class="token punctuation">;</span>    boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date m_date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际的交易代码，其中三行看起来有些重复：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ShareCount<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">InvalidPurchaseException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> ShareCount <span class="token operator">+</span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span>ShareCount<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ShareCount <span class="token operator">></span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">InvalidSellException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span> <span class="token operator">-</span> ShareCount<span class="token punctuation">;</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span><span class="token operator">-</span>ShareCount<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他们本质上很相似：</p><ol><li><p>第一行的保护语句都是用来约束操作，即不能买入 0，和不能卖出的大于持有的数量，但是卖出统一也不应卖出 0，同时 sell() 接口中的 InvalidSellException 异常类型的名称可以具体化公用。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Throws on sell of zero shares"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THROWS_AS</span><span class="token punctuation">(</span><span class="token function">sell</span><span class="token punctuation">(</span>IBM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShareCountCannotBeZeroException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Src/Portfolio/Portfolio.cpp</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ShareCount <span class="token operator">></span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">InvalidSellException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这样 sell 与 purchase 就有相同的判断条件了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ShareCount<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">ShareCountCannotBeZeroException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span> <span class="token operator">-</span> ShareCount<span class="token punctuation">;</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span><span class="token operator">-</span>ShareCount<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过加或减已持有的股票数，可以更新相应股票名称的持有量。这样 sell 与 purchase 公用的语句可以抽出：</p></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">transact</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">,</span> ShareCount<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ShareCount <span class="token operator">></span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">InvalidSellException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">transact</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">,</span> <span class="token operator">-</span>ShareCount<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">transact</span><span class="token punctuation">(</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> ShareChange<span class="token punctuation">,</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ShareChange<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">ShareCountCannotBeZeroException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span> <span class="token operator">+</span> ShareChange<span class="token punctuation">;</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个和表达力相关的事情，异常类型 InvalidSellException 的名称不是很好。我们将其改成 InsufficientSharesException。</p><h3 id="小方法的好处"><a href="#小方法的好处" class="headerlink" title="小方法的好处"></a>小方法的好处</h3><p>Transact() 函数只包含三行简单的代码，但是想要了解整个系统确有些困难，不具备表达力对此进行修改。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">transact</span><span class="token punctuation">(</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> ShareChange<span class="token punctuation">,</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">throwIfShareCountIsZero</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateShareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">,</span> ShareChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPurchaseRecord</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">throwIfShareCountIsZero</span><span class="token punctuation">(</span><span class="token keyword">int</span> ShareChange<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ShareChange<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">ShareCountCannotBeZeroException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">updateShareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> ShareChange<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">shareCount</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span> <span class="token operator">+</span> ShareChange<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">addPurchaseRecord</span><span class="token punctuation">(</span><span class="token keyword">int</span> ShareChange<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> Date<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">,</span> Date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>下面可能是你会提出不这么做的一些理由：</p><ul><li>这是额外功。创建新函数很费力。</li><li>为只在一个地方用到的单行代码创建一个函数似乎很荒唐。</li><li>额外的函数调用会加重性能开销。</li><li>很难在所有代码中遵循完整的控制流。</li><li>你会得到成千上万个小方法，且每个方法都有着巨长的名称。</li></ul></li><li><p>期望这么做的原因：</p><ul><li>这遵守了内聚和单一责任的设计原则。同一函数中的所有代码处于同一层次的抽象。修改每个函数的原因只有一个。</li><li>这为以后的设计改动铺平了道路。我们仍然需要将买入记录和对应的股票名称联系起来，但现在可以在一处完成改动，而非两处。</li><li>忽略具体的实现细节会更容易理解代码控制流。回忆一下接口和实现或抽象和具体的分离理念。</li><li>小方法是真正重用的开始。随着越来越多的相似函数被提取出来，识别出重复的概念和结构会变得更加容易。</li></ul></li></ul><h3 id="完成功能"><a href="#完成功能" class="headerlink" title="完成功能"></a>完成功能</h3><p><strong>参考代码版本：Git SHA (8e75460501b0ef4c3dd3689f549eff60f1e575e4)；</strong></p><p>目前的投资管理器能够返回一个买入列表，但只能返回一支股票的列表。下一个测试要求投资管理器能返回多支已购股票的买入记录。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> PurchaseRecord<span class="token operator">&amp;</span> Lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> PurchaseRecord<span class="token operator">&amp;</span> Rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Lhs<span class="token punctuation">.</span>m_shareCount <span class="token operator">==</span> Rhs<span class="token punctuation">.</span>m_shareCount <span class="token operator">&amp;&amp;</span> Lhs<span class="token punctuation">.</span>m_date <span class="token operator">==</span> Rhs<span class="token punctuation">.</span>m_date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TODO: 使用新式方法实现一个 Matcher 匹配器</span><span class="token comment" spellcheck="true">// https://github.com/catchorg/Catch2/blob/devel/docs/matchers.md</span><span class="token keyword">class</span> <span class="token class-name">ElementsAre</span> <span class="token operator">:</span> <span class="token keyword">public</span> Catch<span class="token operator">::</span>MatcherBase<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">>></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ElementsAre</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span><span class="token operator">&amp;</span> Param<span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">m_purchaseRecord</span><span class="token punctuation">(</span>Param<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">match</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> Arg<span class="token punctuation">)</span> <span class="token keyword">const</span> override    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> varL <span class="token operator">:</span> Arg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">bool</span> retFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> varR <span class="token operator">:</span> m_purchaseRecord<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>varL <span class="token operator">==</span> varR<span class="token punctuation">)</span> <span class="token punctuation">{</span> retFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retFlag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"None Match"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> m_purchaseRecord<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Separates purchase records by symbol"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">purchase</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> ARBITRARY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">purchase</span><span class="token punctuation">(</span>IBM<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ARBITRARY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> sales <span class="token operator">=</span> m_portfolio<span class="token punctuation">.</span><span class="token function">purchases</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> checkArray <span class="token punctuation">{</span> <span class="token function">PurchaseRecord</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ARBITRARY_DATE<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>sales<span class="token punctuation">,</span> <span class="token function">ElementsAre</span><span class="token punctuation">(</span>checkArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Catch2 没有提供类似 gmock 的 ElementAre 匹配器，这里先自己实现一个，用来验证指定的元素是否在集合中。测试一开始失败了，因为名为 m_portfolio 的向量容器只包含两个买入记录——一个是 Samsung，另一个是 IBM。<br>现在修改代码，为每只股票保存包含了此股票买卖的记录。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Portfolio</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//......</span>    <span class="token keyword">void</span> <span class="token function">addPurchaseRecord</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> ShareCount<span class="token punctuation">,</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">throwIfShareCountIsZero</span><span class="token punctuation">(</span><span class="token keyword">int</span> ShareChange<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span> m_holdings<span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> m_purchases<span class="token punctuation">;</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">>></span> m_purchaseRecords<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加一个 map 用于存储交易信息，同时 addPurchaseRecord 接口增加 Symbol 参数。修改具体实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">addPurchaseRecord</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> ShareChange<span class="token punctuation">,</span> <span class="token keyword">const</span> date<span class="token operator">&amp;</span> Date<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_purchases<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">,</span> Date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> m_purchaseRecords<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> m_purchaseRecords<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> m_purchaseRecords<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    m_purchaseRecords<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">PurchaseRecord</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">,</span> Date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//......</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> Portfolio<span class="token operator">::</span><span class="token function">purchases</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_purchaseRecords<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来在测试列表中加入一个条目（“处理在买入记录中找不到特定股票的情况”）。同时在测试通过后可以移除掉 m_purchases 相关的代码。从重复代码角度来看，ShareCount() 和 Purchases() 中都包含了在映射容器中查找元素的代码。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//test.cpp</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> PurchaseRecord<span class="token operator">&amp;</span> Lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> PurchaseRecord<span class="token operator">&amp;</span> Rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>Lhs <span class="token operator">==</span> Rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> <span class="token string">"Answers empty purchase record vector when symbol not found"</span><span class="token punctuation">,</span> <span class="token string">"[Portfolio]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>m_portfolio<span class="token punctuation">.</span><span class="token function">purchases</span><span class="token punctuation">(</span>SAMSUNG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//.h</span><span class="token keyword">class</span> <span class="token class-name">Portfolio</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//.....</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    T <span class="token function">mapFind</span><span class="token punctuation">(</span>std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> T<span class="token operator">></span> Map<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Key<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> it <span class="token operator">==</span> Map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> T <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span> m_holdings<span class="token punctuation">;</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">>></span> m_purchaseRecords<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cpp</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Portfolio<span class="token operator">::</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> mapFind<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>m_holdings<span class="token punctuation">,</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> Portfolio<span class="token operator">::</span><span class="token function">purchases</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> mapFind<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">>></span><span class="token punctuation">(</span>m_purchaseRecords<span class="token punctuation">,</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时进行一点点小小优化，主要针对 addPurchaseRecord ：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">bool</span> <span class="token function">containsSymbol</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">initializePurchaseRecords</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> PurchaseRecord<span class="token operator">&amp;&amp;</span> Record<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们再一次做了大量的小函数重构。现在 AddPurchaseRecord() 声明了高层次的策略，其中的三个函数代表了策略中封装了实现细节的每个步骤。</p><p>要说明的是，我们并没有提前思考设计。相反，我们先得到了一个可以运行的代码，然后再优化现有方案的设计。这样做的副作用是，以后的改动会更加容易。</p><h3 id="增量设计让事情变得更简单"><a href="#增量设计让事情变得更简单" class="headerlink" title="增量设计让事情变得更简单"></a>增量设计让事情变得更简单</h3><p><strong>参考代码版本：Git SHA (687b674d83cd1eb25182666c53e130e12a15881e)；</strong></p><p>在 Portfolio 中两个相似的集合：m_holdings 和 m_purchaseRecords，前者将股票和总股数相<br>联系，后者将股票和购买记录相联系。可以去除 m_holdings，转而按照需要来计算一个特定股票<br>的股数。</p><p>其实如果不去除 m_holdings 其实对性能是有益处的，但是这也会导致代码稍显复杂，这一切取决于开发人员的取舍。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> Portfolio<span class="token operator">::</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">==</span> m_purchaseRecords<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">transact</span><span class="token punctuation">(</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> <span class="token keyword">int</span> ShareChange<span class="token punctuation">,</span> <span class="token keyword">const</span> boost<span class="token operator">::</span>gregorian<span class="token operator">::</span>date<span class="token operator">&amp;</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">throwIfShareCountIsZero</span><span class="token punctuation">(</span>ShareChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addPurchaseRecord</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">,</span> ShareChange<span class="token punctuation">,</span> TransactionDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Portfolio<span class="token operator">::</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> records <span class="token operator">=</span> mapFind<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">>></span><span class="token punctuation">(</span>m_purchaseRecords<span class="token punctuation">,</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> records<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> Total<span class="token punctuation">,</span> PurchaseRecord Record<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Total <span class="token operator">+</span> Record<span class="token punctuation">.</span>m_shareCount<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来需要将所有和买入记录相关的代码抽到单独的类中，因为 Portfolio 违反了单一责任原则，修改 Portfolio 类的主要原因应该和操作股票的方式有关。但还有一个需要修改的原因——针对买入记录的特定实现细节。</p><p>通过增量的方式进行修改，首先引入一个新的成员变量，将股票和持有量联系起来：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Portfolio</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//.....</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">>></span> m_purchaseRecords<span class="token punctuation">;</span>    std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> Holding<span class="token operator">></span> m_holdings<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Holding 就是后续需要将买入实现细节迁出的地方，接下来逐步将 m_holdings 替换掉 m_purchaseRecords。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">initializePurchaseRecords</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_purchaseRecords<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Holding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Portfolio<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">,</span> PurchaseRecord<span class="token operator">&amp;&amp;</span> Record<span class="token punctuation">)</span><span class="token punctuation">{</span>    m_purchaseRecords<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Record<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_holdings<span class="token punctuation">[</span>Symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来将 Portfolio 中买入记录细节的代码迁出到 Holding.h 中，并将使用的 m_purchaseRecords 实现的功能替换成 Holding ：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> Portfolio<span class="token operator">::</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return 0 == m_purchaseRecords.size();</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">==</span> m_holdings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// .....</span><span class="token keyword">bool</span> Portfolio<span class="token operator">::</span><span class="token function">containsSymbol</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return m_purchaseRecords.find(Symbol) != m_purchaseRecords.end();</span>    <span class="token keyword">return</span> m_holdings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span> <span class="token operator">!=</span> m_holdings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Portfolio<span class="token operator">::</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// auto records = mapFind&lt;vector&lt;PurchaseRecord>>(m_purchaseRecords, Symbol);</span>    <span class="token comment" spellcheck="true">// return accumulate(records.begin(), records.end(), 0,</span>    <span class="token comment" spellcheck="true">// [](int Total, PurchaseRecord Record) { return Total + Record.m_shareCount; });</span>    <span class="token keyword">return</span> mapFind<span class="token operator">&lt;</span>Holding<span class="token operator">></span><span class="token punctuation">(</span>m_holdings<span class="token punctuation">,</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shareCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>PurchaseRecord<span class="token operator">></span> Portfolio<span class="token operator">::</span><span class="token function">purchases</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return mapFind&lt;vector&lt;PurchaseRecord>>(m_purchaseRecords, Symbol);</span>    <span class="token keyword">return</span> mapFind<span class="token operator">&lt;</span>Holding<span class="token operator">></span><span class="token punctuation">(</span>m_holdings<span class="token punctuation">,</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">purchases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终删除 m_purchaseRecords 相关实例即可。</p><h2 id="预先设计在哪"><a href="#预先设计在哪" class="headerlink" title="预先设计在哪"></a>预先设计在哪</h2><p>预先设计是一个很好的起始路线图。围绕此设计的讨论有助于发现软件中必须要做的东西，以及最初该怎样设计软件。但是，打造系统所需要的大量细节会发生变化。例如，类图是一个需要创建的好东西，但不要过度执着于底层细节：私有还是公开，属性细节，聚合还是组合，等等。这些东西来源于测试驱动的过程。相反，应致力于类名、依赖关系，或一些关键的公共行为。<br>TDD 允许你基于当前的业务需求，保持一个可能的最简设计。如果一直保持设计尽量简洁，那么就可以最大可能地引入新的、从未被考虑过的功能。相反，如果任由系统退化（并有大量的重复代码和晦涩难懂的代码），未来有任何新的需求时，你将痛苦万分。</p><h3 id="哪里才会讨论真正的设计呢"><a href="#哪里才会讨论真正的设计呢" class="headerlink" title="哪里才会讨论真正的设计呢"></a>哪里才会讨论真正的设计呢</h3><p>当处于 TDD 的重构阶段，你要尽可能地了解与优秀设计构成相关的所有知识。同时，也要尽可能地了解团队的想法。你是在一个共享的代码库中工作，需要与团队就哪些可接受、哪些与设计无关等方面达成共识。<br>大多数时候，经典设计理念和简单设计原则相一致。举个例子，设计模式主要与解决方案的表达力相关。像模板方法这样的模式主要用于消除重复。</p><h3 id="简单设计原则和经典设计理念冲突"><a href="#简单设计原则和经典设计理念冲突" class="headerlink" title="简单设计原则和经典设计理念冲突"></a>简单设计原则和经典设计理念冲突</h3><ol><li><p>访问性：仍然应当尽量保持成员私有化。这会使得有些改动变得更容易些。虽然不太可能，但暴露不必要的成员会使得系统受到恶意或糊涂客户的破坏。</p><ul><li>但是，如果你需要放松访问控制来让测试验证一些功能是否可以如期工作，那大多数时间就不要为此担心了。如果每样东西都被测试，那么测试就会保护系统免受糊涂客户的破坏。<strong>知道系统可以如期工作远比对未来滥用的杞人忧天更让人向往。</strong></li><li>在测试中，绝对要避免不必要的设计，例如，用私有还是公有控制。没有人会调用你的测试，测试中的访问指示符只会影响可读性。</li></ul></li><li><p>及时性：老派的设计希望你能尝试获得尽可能完美的设计。在简单设计中，这是不正确的。实际上，越是绞尽脑汁想出应对未来每种可能功能的设计，就越会付出更多时间，同时，当功能需求真的出现时，你依然需要做大量的修改。最好的方式是，学习怎样通过简单、增量的设计来持续地应对变化。</p></li></ol><h2 id="阻碍重构的因素"><a href="#阻碍重构的因素" class="headerlink" title="阻碍重构的因素"></a>阻碍重构的因素</h2><ol><li>测试不足：使用 TDD 的话，构建进系统的每一小块逻辑都有对应的快速测试。这些测试可以给予你充足的信心来构建更好的代码。相反，如果你只有少量的快速单元测试，随之而来的是更低的测试覆盖率，重构的热情和重构的能力会大大缩减。</li><li>生存周期长的分支：：如果曾经合并过包含大量改动的其他分支中的代码，那么你应该知道大量的重构会使合并代码异常困难。在一个分支上工作的开发者或许会被要求最小化改动范围。这样做可能会使代码合并更简单些，但也会使代码库从此深受煎熬。</li><li>与实现相关的测试：在测试驱动开发中，类的行为是通过其公有接口来展现的。按定义来说，重构是在不改变其外在公有行为的前提下改变设计的。如果测试知道内部私有实现细节的话，那么在这些私有细节改变时，测试就有失败的可能。大量的模拟或协作者存根会向测试暴露一些本该私有的细节。使用得当的话，使用测试替身不会导致问题。但如果随意使用，你可能会在重构时发现许多测试失败。这也是很多开发者不愿意重构的好借口。</li><li>大量的技术债务：大量晦涩难懂的代码足以让许多开发者放弃重构。“我该从哪下手呢？”越是任由代码退化，越是难以对它做出改变。</li><li>缺乏知识：任何你不知道的事情都能够且终将绊倒你。</li><li>着迷于提前的性能优化：本书中所提倡的许多观点都是基于小的类和函数，它们会带来创建额外对象、调用额外函数的开销。确保先创建一个整洁、可维护的设计。得到一个适合设计的性能数据来判断它是否有性能缺陷。仅对必须优化的代码进行优化。大多数优化会增加理解和维护代码的难度。</li><li>绩效考核：HAHAHA。</li><li>一味的追求速度：：“发布吧！不要花时间重构了！”你可以责怪工程经理不理解保持系统设计整洁的重要性吗？当然，可能看上去你的进度在一段时间内是快了些，但任由系统质量变差终会将你推入深渊。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>在使用 TDD 时需要考虑三条规则：</p><ol><li>确保代码具备很强的可读性和表达力。</li><li>在和第一条规则不冲突的情况下，消除所有的重复。</li><li>不要向系统引入不必要的复杂性。避免猜测行的结构关系和不能增加系统表达力的抽象。</li></ol></li><li><p>重复代码或许使维护代码库最大的开销，因此时刻谨记将增量重构作为 TDD 环节的一部分，可以避免系统级的退化，文中以设计一个股票交易系统为例。</p><ol><li>不仅仅是生产代码，测试代码中避免重复同样重要。</li><li>获取在代码层面没有明显重复，但是在逻辑上是有多余的点，例如例子中判断是否持仓为空与查询股票数量的关系，通过去除 m_isEmpty 变量，让 IsEmpty() 查询股票的数量，我们可以消除这一概念重复。<ul><li>算法的重复（解决同一问题的不同方法或问题的不同部分）会随系统增长演变为重大问题。通常来说，随着对一个实现的改动未能编写进其他实现，重复代码会演化为不经意的变体。</li></ul></li><li>抽离出公用的代码，避免重复。</li><li>提取短小的方法有许多好处，职责单一，功能逻辑清晰，表达力强，同时也是避免重复的强力工具，只有将这些子功能提取出才有复用的可能。</li></ol></li><li><p>何时探讨设计：</p><ul><li>预先设计是一个很好的起始路线图。围绕此设计的讨论有助于发现软件中必须要做的东西，以及最初该怎样设计软件。但是，打造系统所需要的大量细节会发生变化。</li><li>TDD 允许你基于当前的业务需求，保持一个可能的最简设计。如果一直保持设计尽量简洁，那么就可以最大可能地引入新的、从未被考虑过的功能。相反，如果任由系统退化（并有大量的重复代码和晦涩难懂的代码），未来有任何新的需求时，你将痛苦万分。</li></ul></li><li><p>简单设计原则与经典设计原则的冲突：</p><ol><li>访问性：如何抉择应不应该为测试方便，放松对于成员私有化的标准。</li><li>及时性：老派的设计希望你能尝试获得尽可能完美的设计。在简单设计中，更应该考虑如何通过简单、增量的设计应对持续的变化。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）测试驱动开发技巧--测试替身</title>
      <link href="/2022/06/02/wu-ce-shi-qu-dong-kai-fa-ji-qiao-ce-shi-ti-shen/"/>
      <url>/2022/06/02/wu-ce-shi-qu-dong-kai-fa-ji-qiao-ce-shi-ti-shen/</url>
      
        <content type="html"><![CDATA[<h1 id="测试替身"><a href="#测试替身" class="headerlink" title="测试替身"></a>测试替身</h1><p>在前面的章节中了解了 TDD 的基础内容，但是在真实的生产环境中对象必须协同工作，有时依赖合作对象使得 TDD 变得举步维艰，本章将会介绍如何使用测试替身来解决。</p><ul><li>测试替身解答了一个困惑我好久的问题，就是代码耦合的情况下我该如何测试这个函数会按照要求调用其他关联组件。测试替身即可以让你编写代码来感知到调用以及调用次数，还会倒逼你去尝试注入依赖组件从而进行解藕，相信看完这一章会有所感受。</li><li>本章会有一些代码标注了 git hash 值，标识我是那次修改对应的代码，方便对比。这不得夸下当时我可太有耐心了 😄。</li></ul><h2 id="依赖问题"><a href="#依赖问题" class="headerlink" title="依赖问题"></a>依赖问题</h2><ul><li>Story：位置描述服务<ul><li>作为一个地图应用开发人员，我需要这样的服务，即它能基于给定的位置（经纬度）返回一行信息来描述离它最近的地方。</li></ul></li></ul><p>构建位置描述服务中一个重要的工作就是去调用一个外部 API，这个 API 能接受一个位置信息，并返回位置数据。书中举例 REST 服务，给定一个 GET URL，它会以 JSON 格式返回位置数据。测试驱动开发位置描述服务会遇到一个难题。至少出于以下几点原因，对 REST 调用的依赖会成为一个问题。</p><ol><li>通过一个 HTTP 来调用 REST 服务非常缓慢，这也导致测试的运行速度变慢。</li><li>REST 服务可能不是一直处于可用状态。</li><li>REST 服务返回的结果得不到保证。</li></ol><p>为什么这些依赖会使得测试变得困难呢？</p><ol><li>依赖一个慢速的协作对象会让测试慢得难以忍受。</li><li>依赖一个不稳定的服务（要么不可用，要么每次返回不同的结果）会导致测试间断性地失败。</li></ol><p>而且如果当前没有发起 HTTP 调用的代码，可能是被人还没有设计实现完成，同时你也没有时间自己去实现一个 HTTP 类怎么办？如果自己就是负责 HTTP 类实现的人怎么办？或许可以先了解下位置描述服务整体设计与使用方法后在考虑 HTTP 工具类的具体实现细节。</p><h2 id="测试替身原理"><a href="#测试替身原理" class="headerlink" title="测试替身原理"></a>测试替身原理</h2><p>在上述提到的问题，可以利用<code>测试替身</code>来避免被这类问题阻塞。测试替身起到代替的作用：它代替了实际产品代码中的类。</p><p>如上文 HTTP 类带来了困难，可以为其创建测试替身！当客户提交一个 GET 请求至 HTTP 对象时，测试替身能够返回预先准备的响应。测试替身应该返回什么是由测试自己决定的。</p><ul><li>假设需要构建一个服务，有以下几个功能类可以复用（当前还未实现）：<ul><li>CurlHttp，它使用 cURL 发起 HTTP 请求。这个类派生自纯虚基类 Http，这个基类定义两个函数：get() 和 initialize()。客户端代码在调用 get() 前必须先调用 initialize()。</li><li>Address，一个包含几个字段的结构。</li><li>AddressExtractor，它借助 JsonCpp 库从一个 JSON 字符串中提取地址 (本文将 Catch2 实现版本从书中的 JsonCpp 切换成 nlohmann/json.hpp)，并填写 Address 结构。</li></ul></li></ul><p>可能的代码流程：</p><pre class="line-numbers language-cpp"><code class="language-cpp">CurlHttp http<span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> jsonResponse <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">createGetRequestUrl</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AddressExtractor extractor<span class="token punctuation">;</span><span class="token keyword">auto</span> address <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">addressFrom</span><span class="token punctuation">(</span>jsonResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">summaryDescription</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手动打造的测试替身"><a href="#手动打造的测试替身" class="headerlink" title="手动打造的测试替身"></a>手动打造的测试替身</h2><p><a href="https://github.com/HATTER-LONG/TDD_Learning">配套工程</a>参考代码版本：Git SHA (92c0b746c3b862199597c6a9eb2da93abca8a5aa)；</p><p>如果想要使用替身，首先必须使其取代 CurlHttp 类的行为。C++提供了许多不同的方法，其中多态的使用频率最高。我们先来看一下 CurlHttp 类所实现的基类 <a href="https://github.com/HATTER-LONG/TDD_Learning/tree/master/Include/Http.h">Http 接口</a>。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>利用多态只需要在派生类中覆写虚函数，并在这个覆写中提供特别的行为来支持测试，然后将基类指针传递给地名描述服务。现在来进行一些<a href="https://github.com/HATTER-LONG/TDD_Learning/tree/master/test/Gmock/PlaceDescriptionServiceTest/PlaceDescriptionServiceTest.cpp">测试</a>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">APlaceDescriptionService</span> <span class="token operator">:</span> <span class="token keyword">public</span> Test<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLatitude<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLongitude<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> description <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"Drury Ln, Fountain, CO, US"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们所需的替身 HttpStub 还没有实现，在测试代码文件中先定义一个。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span> <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"???"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回问号字符串没有什么作用，可以尝试会返回一个搜索服务真实的 Json 响应，<a href="https://nominatim.org/release-docs/develop/api/Search/#parameters">内容可以尝试向 Nominatim 提交 Get 请求获取</a>，这里保持书中的示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span> <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> override    <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token string">"({ "</span>address"<span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token string">"road"</span><span class="token operator">:</span><span class="token string">"Drury Ln"</span><span class="token punctuation">,</span>         <span class="token string">"city"</span><span class="token operator">:</span><span class="token string">"Fountain"</span><span class="token punctuation">,</span>         <span class="token string">"state"</span><span class="token operator">:</span><span class="token string">"CO"</span><span class="token punctuation">,</span>         <span class="token string">"country"</span><span class="token operator">:</span><span class="token string">"US"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来将 HttpStub 实例传递给了 PlaceDescriptionService 的构造函数。和原先的预想相比，我们正在改变设计。<strong>服务对象本身不创建私有的 Http 实例，相反，使用该服务对象的客户端需要自己创建一个 Http 实例，并把它传给服务对象</strong>。<a href="https://github.com/HATTER-LONG/TDD_Learning/tree/master/Src/PlaceDescriptionService/PlaceDescriptionService.cpp">服务对象</a>通过一个基类指针持有这个 Http 实例。</p><pre class="line-numbers language-cpp"><code class="language-cpp">PlaceDescriptionService<span class="token operator">::</span><span class="token function">PlaceDescriptionService</span><span class="token punctuation">(</span>Http<span class="token operator">*</span> IHttp<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">MHttp</span><span class="token punctuation">(</span>IHttp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>利用多态实现了灵活的测试替身，功能类 <code>PlaceDescriptionService</code> 不清楚它持有的 Http 实例时一个真实的还是一个测试用的实例。</p><p><strong>参考代码版本：Git SHA (05f37b1b63764fdd54fe4d9555b3b9d276136d6d)；</strong></p><p>继续向下 summaryDescription 接口调用的参数是需要传入两个坐标，这里为 ValidLatitude、ValidLongitude 进行初始化：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">APlaceDescriptionService</span> <span class="token operator">:</span> <span class="token keyword">public</span> Test<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLatitude<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLongitude<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> string APlaceDescriptionService<span class="token operator">::</span><span class="token function">ValidLatitude</span><span class="token punctuation">(</span><span class="token string">"38.005"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> string APlaceDescriptionService<span class="token operator">::</span><span class="token function">ValidLongitude</span><span class="token punctuation">(</span><span class="token string">"-104.44"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时编译成功可以运行一下哎，不出意外失败了这时由于还没有具体实现 summaryDescription 接口的功能。</p><p>至此，可以编写 summaryDescription() 了。但是首先还需要一个 AddressExtractor。它能解析 JSON 响应，并填写 Address 结构体。详细的过程略过，可以查阅<a href="https://github.com/HATTER-LONG/TDD_Learning/tree/master/Src/PlaceDescriptionService/AddressExtractor.cpp">源码</a>。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>AnAddressExtractor<span class="token punctuation">,</span> ReturnsPopulatedAddressForValidJsonResult<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">*</span> json <span class="token operator">=</span> R"<span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token string">"place_id"</span><span class="token operator">:</span><span class="token string">"15331615"</span><span class="token punctuation">,</span>         <span class="token string">"address"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token string">"road"</span><span class="token operator">:</span><span class="token string">"War Eagle Court"</span><span class="token punctuation">,</span>            <span class="token string">"city"</span><span class="token operator">:</span><span class="token string">"Colorado Springs"</span><span class="token punctuation">,</span>            <span class="token string">"state"</span><span class="token operator">:</span><span class="token string">"Colorado"</span><span class="token punctuation">,</span>            <span class="token string">"country"</span><span class="token operator">:</span><span class="token string">"United States of America"</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span>    <span class="token keyword">auto</span> address <span class="token operator">=</span> Extractor<span class="token punctuation">.</span><span class="token function">addressFrom</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>Road<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"War Eagle Court"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>City<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"Colorado Springs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>State<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"Colorado"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>Country<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"United States of America"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们实现 summaryDescription()：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">*</span> getRequestUrl <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> jsonResponse <span class="token operator">=</span> MHttp<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>getRequestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    AddressExtractor extractor<span class="token punctuation">;</span>    <span class="token keyword">auto</span> address <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">addressFrom</span><span class="token punctuation">(</span>jsonResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> address<span class="token punctuation">.</span>Road <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>City <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>State <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>Country<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>下边参考代码版本：Git SHA (432dedc2c1589fe7a8bfb3487879fec56997e6fa)；</strong></p><p>当测试调用 summaryDescription() 时，对 get() 的调用作用到 HttpStub 实例上，返回我们预先硬编码的 Json 字符串。但是请求的 URL 应该是什么，当正在接受测试的代码和一个协同对象交互时，需要保证给它传递一个正确的值。返回硬编码值的测试替身叫作存根（stub）。类似地，我们也可以称 get() 为存根方法。</p><p>实际上，当传给 get() 一个空的字符串时就可以进行增量的开发了，接下来编写能够正确给 getRequestUrl 赋值的代码。<strong>利用三角法，并为第二个位置添加一个断言</strong>。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span> <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> override    <span class="token punctuation">{</span>        <span class="token function">verify</span><span class="token punctuation">(</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token string">"({ "</span>address"<span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token string">"road"</span><span class="token operator">:</span><span class="token string">"Drury Ln"</span><span class="token punctuation">,</span>         <span class="token string">"city"</span><span class="token operator">:</span><span class="token string">"Fountain"</span><span class="token punctuation">,</span>         <span class="token string">"state"</span><span class="token operator">:</span><span class="token string">"CO"</span><span class="token punctuation">,</span>         <span class="token string">"country"</span><span class="token operator">:</span><span class="token string">"US"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> <span class="token function">expectedArgs</span><span class="token punctuation">(</span><span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                          <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span> <span class="token function">EndsWith</span><span class="token punctuation">(</span>expectedArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用 get() 时，存根实现可以确保参数符合预期，接下来修改代码通过测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> getRequestUrl <span class="token operator">=</span> <span class="token string">"lat="</span> <span class="token operator">+</span> Latitude <span class="token operator">+</span> <span class="token string">"&amp;lon="</span> <span class="token operator">+</span> Longitude<span class="token punctuation">;</span>    <span class="token keyword">auto</span> jsonResponse <span class="token operator">=</span> MHttp<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>getRequestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    AddressExtractor extractor<span class="token punctuation">;</span>    <span class="token keyword">auto</span> address <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">addressFrom</span><span class="token punctuation">(</span>jsonResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> address<span class="token punctuation">.</span>Road <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>City <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>State <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>Country<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于当前 URL 没有指定服务器路径，修改 verify() 函数，让它传给 get() 一个完整的 URL:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    string <span class="token function">urlStart</span><span class="token punctuation">(</span><span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> <span class="token function">expectedArgs</span><span class="token punctuation">(</span>urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                        <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span>expectedArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终实现 summaryDescription() 方法后：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> request <span class="token operator">=</span> <span class="token function">createGetRequestUrl</span><span class="token punctuation">(</span>Latitude<span class="token punctuation">,</span> Longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> response <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">summaryDescription</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Response<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    AddressExtractor extractor<span class="token punctuation">;</span>    <span class="token keyword">auto</span> address <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">addressFrom</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> address<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string PlaceDescriptionService<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> RequestUrl<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> MHttp<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>RequestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string PlaceDescriptionService<span class="token operator">::</span><span class="token function">createGetRequestUrl</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    string server <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    string document <span class="token punctuation">{</span> <span class="token string">"nominatim/v1/reverse"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> server <span class="token operator">+</span> document <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> <span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span> <span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string">"lat"</span><span class="token punctuation">,</span> Latitude<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>           <span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string">"lon"</span><span class="token punctuation">,</span> Longitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string PlaceDescriptionService<span class="token operator">::</span><span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Key<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Value<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> Value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>现在代码中还欠缺的地方：<ol><li>重复代码：测试中的文本和产品代码中的文本完全一样。第七章会讲解如何去除这种重复。</li><li>PlaceDescriptionService 中的一些结构是可以复用的。可以考虑如何设计更加方便支持第二个服务。</li></ol></li></ul><h2 id="在使用测试替身时提升测试的抽象程度"><a href="#在使用测试替身时提升测试的抽象程度" class="headerlink" title="在使用测试替身时提升测试的抽象程度"></a>在使用测试替身时提升测试的抽象程度</h2><p><strong>参考代码版本：Git SHA (71f934b009b744e4fd3d66d1a8d21792ad88471a)；</strong></p><p>在使用测试替身时，由于测试中模糊的信息增加了许多理解的难度，例如 ReturnsDescriptionForValidLocation 测试中隐藏了许多相关信息，为什么最终断言的比对目标是 Drury Ln, Fountain, CO, US 这些都会给阅读测试的人查看 HttpStub 中与之相关的实现细节才能理解。</p><p>因此我们需要重构测试，使它可以自包含。可以修改 HttpStub 的实现，让测试负责设定 get() 方法的返回值。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string ReturnResponse<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span> <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> override    <span class="token punctuation">{</span>        <span class="token function">verify</span><span class="token punctuation">(</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ReturnResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    httpStub<span class="token punctuation">.</span>ReturnResponse <span class="token operator">=</span> R<span class="token string">"({"</span>address"<span class="token operator">:</span> <span class="token punctuation">{</span>                                    <span class="token string">"road"</span><span class="token operator">:</span><span class="token string">"Drury Ln"</span><span class="token punctuation">,</span>                                    <span class="token string">"city"</span><span class="token operator">:</span><span class="token string">"Fountain"</span><span class="token punctuation">,</span>                                    <span class="token string">"state"</span><span class="token operator">:</span><span class="token string">"CO"</span><span class="token punctuation">,</span>                                    <span class="token string">"country"</span><span class="token operator">:</span><span class="token string">"US"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> description <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"Drury Ln, Fountain, CO, US"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样阅读的人可以将摘要描述和 HttpStub 返回的 JSON 对象对应起来，类似的，也可以将 URL 验证以到测试中。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string ReturnResponse<span class="token punctuation">;</span>    string ExpectedURL<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span> <span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> override    <span class="token punctuation">{</span>        <span class="token function">verify</span><span class="token punctuation">(</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ReturnResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span>ExpectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    httpStub<span class="token punctuation">.</span>ReturnResponse <span class="token operator">=</span> <span class="token comment" spellcheck="true">//....</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    httpStub<span class="token punctuation">.</span>ExpectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                           <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//.....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，在测试代码中可以清晰的表达出意图，同时 HttpStub 消减至一个小类，返回需要的存根同时验证期望的信息。，一个 HttpStub 对象验证了这样的事实：会有一个期望的 URL 传给 HttpStub。</p><h2 id="使用模拟对象工具"><a href="#使用模拟对象工具" class="headerlink" title="使用模拟对象工具"></a>使用模拟对象工具</h2><p>本结学习如何使用 Google Mock 来实现对多个相似的模拟对象辅助生成 Mock 对象的方法。</p><h3 id="定义一个派生类"><a href="#定义一个派生类" class="headerlink" title="定义一个派生类"></a>定义一个派生类</h3><p><strong>参考代码版本：Git SHA (74290eccd1b383da76082716ac070f7b06609a28)；</strong></p><p>现在已重新开发 summaryDescription() 举例，我们需要模拟 HTTP 的方法：get() 和 initialize()。</p><p>为了使用 Google Mock 自身的模拟对象，我们首先需要创建一个派生类用来声明所模拟的方法。Google Mock 允许我们简洁地定义名为 HttpStub 的派生类。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MOCK_METHOD0</span><span class="token punctuation">(</span>initialize<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用宏来声明模拟的方法</span>    <span class="token function">MOCK_CONST_METHOD1</span><span class="token punctuation">(</span>get<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 标识一个参数，第一个参数成员函数名称，第二个宏参数给出方法其他信息(返回值和参数声明)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GoogleTest 1.10.x Release 版本支持了一个新宏定义，舍去了繁琐的方法，使用如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MOCK_METHOD</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> initialize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>override<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MOCK_METHOD</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> get<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> override<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CmakeLists<span class="token punctuation">.</span>txt<span class="token comment" spellcheck="true">//当前使用的 googletest 版本为 1.10.x MOCK_METHOD 宏在编译器下会有错误信息，依据 gmock issues 无用报错 关闭相关警告</span><span class="token function">add_definitions</span><span class="token punctuation">(</span><span class="token operator">-</span>Wno<span class="token operator">-</span>gnu<span class="token operator">-</span>zero<span class="token operator">-</span>variadic<span class="token operator">-</span>macro<span class="token operator">-</span>arguments<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Google Mock 把一个 mock 声明转为派生类中的一个成员函数。Google Mock 还在幕后实现了这个函数。</p><h3 id="设立期望"><a href="#设立期望" class="headerlink" title="设立期望"></a>设立期望</h3><p><strong>参考代码版本：Git SHA (8e49b0b7091856f6308584b40d1d8bdc2114c621)；</strong></p><p>首先屏蔽掉 summaryDescription() 的具体实现重新开发一次。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 EXPECT_CALL 宏设立期望，这个宏配置 Google Mock 去验证给定的 expectedURL 参数去调用 httpStub 对象的 get() 逻辑是否吻合。其断言生效在模拟对象跳出作用域后开始验证，断言步骤被隐式的执行了。</p><p>如果需要，也可以强制 Google Mock 在模拟对象跳出作用域前做验证: <code>Mock::VerifyAndClearExpectations(&amp;httpStub);</code></p><p>首先空实现 summaryDescription()，让测试可以编译运行：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行后，测试出现失败信息，直到测试结束为止，httpStub 对象的 get() 也没有被调用。：</p><pre class="line-numbers language-shell"><code class="language-shell">[----------] 1 test from APlaceDescriptionService[ RUN      ] APlaceDescriptionService.ReturnsDescriptionForValidLocation/home/caolei/WorkSpace/TDD_Learning/test/Gmock/PlaceDescriptionServiceTestByGMock/PlaceDescriptionServiceTest.cpp:36: FailureActual function call count doesn't match EXPECT_CALL(httpStub, get(expectedURL))...         Expected: to be called once           Actual: never called - unsatisfied and active[  FAILED  ] APlaceDescriptionService.ReturnsDescriptionForValidLocation (0 ms)[----------] 1 test from APlaceDescriptionService (0 ms total)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码使之通过测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    string server <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    string document <span class="token punctuation">{</span> <span class="token string">"nominatim/v1/reverse"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// clang-format off</span>    string url <span class="token operator">=</span> server <span class="token operator">+</span> document <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span>                    <span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                    <span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string">"lat"</span><span class="token punctuation">,</span> Latitude<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                    <span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string">"lon"</span><span class="token punctuation">,</span> Longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// clang-format on</span>    <span class="token keyword">auto</span> response <span class="token operator">=</span> MHttp<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    AddressExtractor extractor<span class="token punctuation">;</span>    <span class="token keyword">auto</span> address <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">addressFrom</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> address<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="松模拟和严模拟"><a href="#松模拟和严模拟" class="headerlink" title="松模拟和严模拟"></a>松模拟和严模拟</h3><p><strong>参考代码版本：Git SHA (46639a97cb73d0cd34071e70e1cc0bd05560fc94)；</strong></p><p>summaryDescription() 的视线中并没有遵顼 CurlHttp 接口规则，即在使用 get() 前没有进行 initialize 初始化。可以在测试中新增一个期望来确保初始化被调用：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来保持 summaryDescription() 中策略不变，单独抽离 get() 接口成为单独的方法：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    MHttp<span class="token operator">-</span><span class="token operator">></span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> MHttp<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟对象中的顺序"><a href="#模拟对象中的顺序" class="headerlink" title="模拟对象中的顺序"></a>模拟对象中的顺序</h3><p><strong>参考代码版本：Git SHA (e1a51df6b0e5af65d328017b1e9c9ebb1b46b0ea)；</strong></p><p>initialize() 和 get() 的调用是有先后顺序的，默认情况下 GMOCK 不会验证满足调用期望的顺序，如果想要验证，可以定义 InSequence 实例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    InSequence forceExpectationOrder<span class="token punctuation">;</span>    HttpStub httpStub<span class="token punctuation">;</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以更加精细控制，具体使用可以参见 <a href="https://github.com/google/googletest/blob/master/docs/gmock_cheat_sheet.md">GoogleMock DOC</a>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    Expectation Expectations <span class="token operator">=</span> <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>Expectations<span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="巧妙的模拟工具特性"><a href="#巧妙的模拟工具特性" class="headerlink" title="巧妙的模拟工具特性"></a>巧妙的模拟工具特性</h3><p><strong>参考代码版本：Git SHA (8478946c5e86720daeec8eba54ef1dd5438899a1)；</strong></p><p>EXPECT_CALL 宏支持许多修饰符。它的语法如下（?和<em>代表每个修饰符的基数：?表示可以选用修饰符一次；</em>表示可以多次使用修饰符。）：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>mock<span class="token operator">-</span>object<span class="token punctuation">,</span> <span class="token function">method</span> <span class="token punctuation">(</span>matchers<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>multi<span class="token operator">-</span>argument<span class="token operator">-</span>matcher<span class="token punctuation">)</span>  <span class="token operator">?</span>     <span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span>cardinality<span class="token punctuation">)</span>            <span class="token operator">?</span>     <span class="token punctuation">.</span><span class="token function">InSequence</span><span class="token punctuation">(</span>sequences<span class="token punctuation">)</span>         <span class="token operator">*</span>     <span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>expectations<span class="token punctuation">)</span>           <span class="token operator">*</span>     <span class="token punctuation">.</span><span class="token function">WillOnce</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>              <span class="token operator">*</span>     <span class="token punctuation">.</span><span class="token function">WillRepeatedly</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>        <span class="token operator">?</span>     <span class="token punctuation">.</span><span class="token function">RetiresOnSaturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GMOCK 工具可以支持几乎所有的模拟方式，如下例模拟输入参数的函数并指定一个返回值：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DifficultCollaborator</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> Result<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">TEST</span><span class="token punctuation">(</span>ATarget<span class="token punctuation">,</span> ReturnsAnAmountWhenCalculatePasses<span class="token punctuation">)</span><span class="token punctuation">{</span>    DifficultCollaboratorMock difficult<span class="token punctuation">;</span>    Target calc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//SetArgPointee&lt;0>(3) 表示 第 0 个参数值为 3。</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>difficult<span class="token punctuation">,</span> <span class="token function">calculate</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillOnce</span><span class="token punctuation">(</span><span class="token function">DoAll</span><span class="token punctuation">(</span>SetArgPointee<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> result <span class="token operator">=</span> calc<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>difficult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GMOCK 还提供了许多功能支持，但是大部分情况只需要基本的机制就足够了，如果在 TDD 过程中经常遇到要用怪异的模拟工具特性，请检查下设计是否做了过多的事情。</p><p>当你尝试着为非测试驱动的、结构不良的系统编写测试并遇到问题时，或许需要使用模拟工具提供的更加强大的特性。我们会在第 8 章中讨论这类问题。</p><h3 id="排除模拟失败"><a href="#排除模拟失败" class="headerlink" title="排除模拟失败"></a>排除模拟失败</h3><ol><li>产品代码中是否有合理调用？</li><li>是否正确定义了模拟方法？</li><li>有没有将要模拟的成员函数声明为虚函数？</li><li>MOCK_METHOD() 声明正不正确？</li><li>排除参数匹配的担忧，为所有参数和返回值使用通配符 testing::_ ，如果测试通过，那么可以确定有一个参数不能被正确匹配。</li></ol><h3 id="一个还是两个测试"><a href="#一个还是两个测试" class="headerlink" title="一个还是两个测试"></a>一个还是两个测试</h3><p>当使用手工创建的模拟对象时，我们最终只用了一个测试来验证最终的目标，即为一个位置生成概要信息描述。但是，在第二个示例中，我们却用了两个测试。</p><p>拥有两个测试还会提供额外的好处。第一，一个模拟验证是一个断言。我们已经用一个断言来验证概要信息字符串了。将测试分为两个，与一个断言一个测试保持一致（参考 7.3 节）。第二，独立的测试更具可读性。由于在 Google Mock 中设立期望会导致很难界定设置断言的位置（这也和 4.2.4 节一致），因此我们为简化基于模拟的测试的努力是值得的。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpStub httpStub<span class="token punctuation">;</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    Expectation Expectations <span class="token operator">=</span> <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  get(expectedURL) 这一步同时验证了应该传给 get 的参数与 expectedURL 一致</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>Expectations<span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionService service <span class="token punctuation">{</span> <span class="token operator">&amp;</span>httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> FormatsRetrievedAddressIntoSummaryDescription<span class="token punctuation">)</span><span class="token punctuation">{</span>    NiceMock<span class="token operator">&lt;</span>HttpStub<span class="token operator">></span> httpStub<span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">WillOnce</span><span class="token punctuation">(</span><span class="token function">Return</span><span class="token punctuation">(</span>            R<span class="token string">"({ "</span>address"<span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"road"</span><span class="token operator">:</span><span class="token string">"Drury Ln"</span><span class="token punctuation">,</span>              <span class="token string">"city"</span><span class="token operator">:</span><span class="token string">"Fountain"</span><span class="token punctuation">,</span>              <span class="token string">"state"</span><span class="token operator">:</span><span class="token string">"CO"</span><span class="token punctuation">,</span>              <span class="token string">"country"</span><span class="token operator">:</span><span class="token string">"US"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionService <span class="token function">service</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>httpStub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> description <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">"Drury Ln, Fountain, CO, US"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="让测试替身各就各位"><a href="#让测试替身各就各位" class="headerlink" title="让测试替身各就各位"></a>让测试替身各就各位</h2><p>在引入一个测试替身时需要做两件事。第一，编写测试替身。第二，在目标测试中使用测试替身的一个实例。这样的做法又称作依赖注入（Dependency Injection，DI）。</p><p>以前文的 PlaceDescriptionService 为例，它是通过构造函数将测试替身注入其中，有些情况可能使用 setter 成员函数来注入测试替身更合适，这种方法又称作构造注入或 setter 注入。</p><h3 id="覆写工厂方法和覆写-Getter"><a href="#覆写工厂方法和覆写-Getter" class="headerlink" title="覆写工厂方法和覆写 Getter"></a>覆写工厂方法和覆写 Getter</h3><p><strong>参考代码版本：Git SHA (fe19774356b4cb14d14e4041029c535b3619ebf3)；</strong></p><p>想要使用覆写工厂方法，首先要修改产品代码使用工厂模式获取写作类的实例：</p><p>首先修改 PlaceDescriptionService 中的成员 Http* MHttp，不在以成员方式保存而是 httpService() 获取：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//PlaceDescriptionService.h</span><span class="token keyword">class</span> <span class="token class-name">PlaceDescriptionService</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PlaceDescriptionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string <span class="token function">summaryDescription</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> <span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PlaceDescriptionService.cpp</span>string PlaceDescriptionService<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> http <span class="token operator">=</span> <span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    http<span class="token operator">-</span><span class="token operator">></span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> http<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> PlaceDescriptionService<span class="token operator">::</span><span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> make_shared<span class="token operator">&lt;</span>CurlHttp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 httpService 获取可以看作使通过工厂模式获取到功能类，在测试中，我们就可以通过继承 PlaceDescriptionService 来覆写 httpService 传入我们自定义的 Http 功能类：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">PlaceDescriptionServiceStubHttpService</span> <span class="token operator">:</span> <span class="token keyword">public</span> PlaceDescriptionService<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 这里创建了一个构造用于传入自定义的 Http 功能类</span>    <span class="token function">PlaceDescriptionServiceStubHttpService</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>HttpStub<span class="token operator">></span> ParmHttpStub<span class="token punctuation">)</span>            <span class="token operator">:</span> HttpStub <span class="token punctuation">{</span> ParmHttpStub <span class="token punctuation">}</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> <span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span> <span class="token keyword">return</span> HttpStub<span class="token punctuation">;</span> <span class="token punctuation">}</span>    shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> HttpStub<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体测试代码于之间差不多，唯一的差异就是使用智能指针进行了封装：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionService<span class="token punctuation">,</span> ReturnsDescriptionForValidLocation<span class="token punctuation">)</span><span class="token punctuation">{</span>    shared_ptr<span class="token operator">&lt;</span>HttpStub<span class="token operator">></span> httpStub <span class="token punctuation">{</span> <span class="token keyword">new</span> HttpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    Expectation Expectations <span class="token operator">=</span> <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span><span class="token operator">*</span>httpStub<span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  get(expectedURL) 这一步同时验证了应该传给 get 的参数与 expectedURL 一致</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span><span class="token operator">*</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>Expectations<span class="token punctuation">)</span><span class="token punctuation">;</span>    PlaceDescriptionServiceStubHttpService service <span class="token punctuation">{</span> httpStub <span class="token punctuation">}</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>覆写工厂方法展示了使用测试替身所带来的测试覆盖率漏洞。由于我们的测试覆写了产品代码中 httpService() 的实现，因此测试并没有使用实际产品代码中的这个函数。正如前面所说，要确保在集成测试中使用实际的服务！同时，不要在工厂方法中加入实际逻辑的代码，否则，未经测试的代码就会越来越多。工厂方法应当只返回协作类型的一个实例。</p><p>关于 Getter 其实与覆盖工厂差不多，区别如下:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">PlaceDescriptionService</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">PlaceDescriptionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">PlaceDescriptionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">summaryDescription</span><span class="token punctuation">(</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> longitude<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// ...</span>    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> http_<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> <span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>PlaceDescriptionService<span class="token operator">::</span><span class="token function">PlaceDescriptionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">:</span> http_<span class="token punctuation">{</span>make_shared<span class="token operator">&lt;</span>CurlHttp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> PlaceDescriptionService<span class="token operator">::</span><span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> http_<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用工厂"><a href="#使用工厂" class="headerlink" title="使用工厂"></a>使用工厂</h3><p><strong>参考代码版本：Git SHA (398ef02bf56e9484335f5f1aed0f07caf01424b1)；</strong></p><p>工厂类是用来负责创建和返回实例的。如果你有一个 HttpFactory，那么就可以在测试中告诉它返回一个 HttpStub 实例而非 Http 实例。注意不要仅仅为了支持测试而引入工厂模式。</p><p>下例使工厂实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"CurlHttp.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"HttpFactory.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>HttpFactory<span class="token operator">::</span><span class="token function">HttpFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> HttpFactory<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> HttpFactory<span class="token operator">::</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Instance <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>CurlHttp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> HttpFactory<span class="token operator">::</span><span class="token function">setInstance</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>Http<span class="token operator">></span> NewInstance<span class="token punctuation">)</span><span class="token punctuation">{</span>    Instance <span class="token operator">=</span> NewInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改测试代码，在测试执行前，调用 setInstance 将工厂中产品替换掉：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">APlaceDescriptionService</span> <span class="token operator">:</span> <span class="token keyword">public</span> Test<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLatitude<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLongitude<span class="token punctuation">;</span>    shared_ptr<span class="token operator">&lt;</span>HttpStub<span class="token operator">></span> httpStub<span class="token punctuation">;</span>    shared_ptr<span class="token operator">&lt;</span>HttpFactory<span class="token operator">></span> factory<span class="token punctuation">;</span>    shared_ptr<span class="token operator">&lt;</span>PlaceDescriptionService<span class="token operator">></span> service<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        factory <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>HttpFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>PlaceDescriptionService<span class="token operator">></span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">TearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        factory<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpStub<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">APlaceDescriptionServiceWithHttpMock</span> <span class="token operator">:</span> <span class="token keyword">public</span> APlaceDescriptionService<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override    <span class="token punctuation">{</span>        APlaceDescriptionService<span class="token operator">::</span><span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpStub <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>HttpStub<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token operator">-</span><span class="token operator">></span><span class="token function">setInstance</span><span class="token punctuation">(</span>httpStub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionServiceWithHttpMock<span class="token punctuation">,</span> MakesHttpRequestToObtainAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span><span class="token operator">*</span>httpStub<span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span><span class="token operator">*</span>httpStub<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    service<span class="token operator">-</span><span class="token operator">></span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 summaryDescription() 代码，通过工厂获取 Http 实例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//构造传入工厂实例</span>PlaceDescriptionService<span class="token operator">::</span><span class="token function">PlaceDescriptionService</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span>HttpFactory<span class="token operator">></span> HttpFactory<span class="token punctuation">)</span>        <span class="token operator">:</span> httpFactory_ <span class="token punctuation">{</span> HttpFactory <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//冲获取接口改为从工厂获得实例</span>string PlaceDescriptionService<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> Url<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// auto http = httpService();</span>    <span class="token keyword">auto</span> http <span class="token operator">=</span> httpFactory_<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    http<span class="token operator">-</span><span class="token operator">></span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> http<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过模板参数"><a href="#通过模板参数" class="headerlink" title="通过模板参数"></a>通过模板参数</h3><p><strong>参考代码版本：Git SHA (35932b820ad5de4a9bb584f1eeed6d4f6bfa86f4)；</strong></p><p>可以通过模板参数进行注入，它不需要客户程序传递一个协作类的实例。把 PlaceDescriptionService 声明为一个模板，它有一个类型名称，即 HTTP。在这个模板中加入一个成员变量，http_，其类型为 HTTP。因为我们想让客户使用类名 PlaceDescriptionService，所以我们将模板类改名为 PlaceDescriptionServiceTemplate。在定义模板之后，我们使用 typedef 来定义 PlaceDescriptionService，它将产品类 Http 作为 PlaceDescriptionServiceTemplate 的模板参数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> HTTP<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">PlaceDescriptionServiceTemplate</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token comment" spellcheck="true">// 测试中的mock需要引用</span>    HTTP<span class="token operator">&amp;</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> http_<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// ...</span>    std<span class="token operator">::</span>string <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        http_<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> http_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    HTTP http_<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Http</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> PlaceDescriptionServiceTemplate<span class="token operator">&lt;</span>Http<span class="token operator">></span> PlaceDescriptionService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在测试时也是通过声明一个服务模拟类，即 HttpStub，为模板 PlaceDescriptionServiceTemplate 的参数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">APlaceDescriptionService</span> <span class="token operator">:</span> <span class="token keyword">public</span> Test<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLatitude<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> string ValidLongitude<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">APlaceDescriptionServiceWithHttpMock</span> <span class="token operator">:</span> <span class="token keyword">public</span> APlaceDescriptionService<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    PlaceDescriptionServiceTemplate<span class="token operator">&lt;</span>HttpStub<span class="token operator">></span> service<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>APlaceDescriptionServiceWithHttpMock<span class="token punctuation">,</span> MakesHttpRequestToObtainAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    string urlStart <span class="token punctuation">{</span> <span class="token string">"http://open.mapquestapi.com/nominatim/v1/reverse?format=json&amp;"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> expectedURL <span class="token operator">=</span> urlStart <span class="token operator">+</span> <span class="token string">"lat="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLatitude <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span>                       <span class="token string">"lon="</span> <span class="token operator">+</span> APlaceDescriptionService<span class="token operator">::</span>ValidLongitude<span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>expectedURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>ValidLatitude<span class="token punctuation">,</span> ValidLongitude<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注入工具"><a href="#注入工具" class="headerlink" title="注入工具"></a>注入工具</h3><p>用于注入协作对象作为依赖对象的工具又称为依赖注入工具。首先，你需要掌握这里描述的手工注入技巧。其次，再去调研一下注入工具，来检查它们能否带来一些改善。依赖注入工具通常在完全支持反射机制的语言中更加有效。</p><h2 id="设计会变化"><a href="#设计会变化" class="headerlink" title="设计会变化"></a>设计会变化</h2><p>在使用测试替身时会发现，正在改变你的设计方法。这样可能会令你不安。但是不要担心，这是正常的反应。</p><h3 id="内聚与耦合"><a href="#内聚与耦合" class="headerlink" title="内聚与耦合"></a>内聚与耦合</h3><p>在面对一些慢速或者不稳定的协同对象，最好的方法是将它们隔离成单独的类。例如发送 HTTP 的请求，虽然它并不是非常复杂，放到一个小而独立的类中有些不值得，但是选择这样的方式将带来宠用的机会和更灵活的设计弹性（可以利用多态的方式来替换）。</p><p>另一种方法是创建更加过程化、弱内聚的代码，在测试后行的时候，一个 PlaceDescriptionService 的典型解决方案：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string PlaceDescriptionService<span class="token operator">::</span><span class="token function">summaryDescription</span><span class="token punctuation">(</span>      <span class="token keyword">const</span> string<span class="token operator">&amp;</span> latitude<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> longitude<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// retrieve JSON response via API</span>   response_ <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">auto</span> url <span class="token operator">=</span> <span class="token function">createGetRequestUrl</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_URL<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">curl_easy_perform</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">curl_easy_cleanup</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// parse json response</span>   Value location<span class="token punctuation">;</span>   Reader reader<span class="token punctuation">;</span>   reader<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response_<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">auto</span> jsonAddress <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> Value<span class="token operator">::</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// populate address from json</span>   Address address<span class="token punctuation">;</span>   address<span class="token punctuation">.</span>road <span class="token operator">=</span> jsonAddress<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"road"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   address<span class="token punctuation">.</span>city <span class="token operator">=</span> jsonAddress<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hamlet"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   address<span class="token punctuation">.</span>state <span class="token operator">=</span> jsonAddress<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   address<span class="token punctuation">.</span>country <span class="token operator">=</span> jsonAddress<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> address<span class="token punctuation">.</span>road <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>city <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span>          address<span class="token punctuation">.</span>state <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> address<span class="token punctuation">.</span>country<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是典型的后测试代码。虽然我们可以将其拆成多个更小的函数，就像稍早前的做法一样，但是开发人员不会这么做。测试后行的开发者不习惯定期做重构，通常，他们不需要使用快速的测试来让重构变得更快、更安全。</p><ul><li>从设计的角度，这二十多行代码违背了单一责任原则——需要修改 summaryDescription() 的原因有多个：<ol><li>首先，这个函数与 cURL 紧密耦合；</li><li>其次，这二十多行代码的函数算作冗长函数，想要完全理解它会花费很多时间。</li><li>再者，这种冗长的函数会导致不必要的代码重复。许多可重用的代码深埋于冗长的函数中，那么重用将不会发生。</li></ol></li></ul><p>即使这样也可以对其进行测试，例如使用 link substitution 写一个快速的单元测试（参见 8.9 节），或者写一个能发起一个即时的 REST 服务调用的集成测试。</p><p>而当践行 TDD 时，自然而然的会寻求高内聚、低耦合的设计。你会开始意识到灵活设计的好处，也会很快发现好的设计是怎样与测试和谐共存的，而且这些测试具有体量小，易于编写、阅读和维护的特点。</p><h3 id="转嫁私有依赖"><a href="#转嫁私有依赖" class="headerlink" title="转嫁私有依赖"></a>转嫁私有依赖</h3><p>如果不需要方便于测试，PlaceDescriptionService 中的 HTTP 调用可以通过成员保存一个私有的实例，使得客户端调用不需要再 setter 或者构造注入。反之，需要客户端创建 HTTP 对象，并将其传给 PlaceDescriptionService 实例，就将其对 HTTP 的依赖转嫁给了客户端。</p><p>Q: setter 或构造函数注入是不是违反了信息隐藏？<br>A: 从客户端程序的角度来说，确实是违反了。但是有几种方法有效避免：</p><ol><li>使用其他依赖注入方法，使得某人即使利用了这些暴露出的信息，也无法造成不好的影响。</li><li>提供某人的实例，先配置一个默认的实例，如果测试提供了 HttpStub 实例，那么它将被替换。而真正的客户端时不需要做什么改动的。</li></ol><p>Q: 如果心怀恶意的开发者提供一个具有破坏性的 Http 实例呢？<br>A: 如果产品的客户是团队之外的人，那么可以选择其他注入形式。如果担心团队内部的开发者有意利用注入点做些不好的事，那你将面临更大的问题。</p><p>Q: 我逐渐能够测试驱动开发了，但我担心仅仅为了测试的目的而改变我的设计方法。我的团队中的其他人可能也会这么觉得。<br>A: 确切地了解软件能如期工作是改变设计方式的重要原因。你可以这样和同事讲：“我更关心代码是否如期工作。做出这么一个小的让步意味着我们能够更容易地测试代码，也会有更多的测试能够帮助我们更容易地打磨设计，我们也会对代码更有信心。所以你们能重新思考下我们的标准吗？”</p><h2 id="使用测试替身的策略"><a href="#使用测试替身的策略" class="headerlink" title="使用测试替身的策略"></a>使用测试替身的策略</h2><p>使用测试替身和其他工具一样，最大的挑战不是学会怎么用它们，而是知道什么时候使用。</p><h3 id="探索设计"><a href="#探索设计" class="headerlink" title="探索设计"></a>探索设计</h3><p>现在假设 AddressExtractor 不存在，在测试驱动开发 summaryDescription() 时，肯定会意识到需要一些逻辑去处理 JSON 格式的响应，并返回一个格式化的字符串，通常开发者可以在 PlaceDescriptionService 中全部自己实现。</p><p>但是还可以寻求潜在的重用性、更大的灵活性和易于理解的代码设计，为了遵守单一原则，或许可以将需要的逻辑拆分成两块：解析 JSON 格式的响应和格式化输出。</p><p>TDD 会促使你在任何时候都要做出清醒的设计选择。例如你可以先写一个描述 summaryDescription() 怎样于外部协作者交互的测试。这个协作者的工作是得到一个 JSON 格式的响应，并返回相应的地址数据结构。目前而言，我们可以忽略实现这个协作者的细节，先集中使用 mock 来测试驱动开发 summaryDescription() ，就像前文中 HTTP 对象交互一样。</p><p>当以这种方式开发完成时，可以通过引入 mock 来替代缺失的协作者功能。<strong>在某一时刻，你或其他人将会实现这个协作者。这时你可以作出以下选择：移除 mock，以便待测试的代码使用产品级的协作者；保留 mock。</strong></p><p>也许你已经作好了选择。<strong>如果协作者引入麻烦的依赖，那么就需要保留 mock。否则，移除 mock 会降低测试的复杂度。但是，你也许选择保留它，特别是需要用它来描述与协作者的交互式设计中的重要方面。</strong><br>或许最好的指导方针需要考虑维护和理解测试所需的精力。如果没有 mock，事情可能会简单些，但不总是这样的。mock 可能需要大量的代码来初始化一些协作者，这也会增加维护测试的成本。</p><h3 id="明智地使用测试替身"><a href="#明智地使用测试替身" class="headerlink" title="明智地使用测试替身"></a>明智地使用测试替身</h3><p>如果你要彻头彻尾地测试驱动开发一个带有快速测试的系统，这其中的大部分系统都需要使用测试替身。在使用测试替身时，可以参考下面的建议：</p><ul><li>重新思考设计：你是为了简化依赖对象的创建而使用 mock 的吗？如果是的话，那么重新修改依赖结构。你是不是在多个地方为同一个东西使用了 mock？如果是的话，那么重新设计来消除这样的重复。</li><li>意识到单元测试覆盖率上的让步。一个测试替身代表了系统测试覆盖率的漏洞。因为测试替身提供的逻辑正是单元测试所不能覆盖的，所以一定要确保其他测试覆盖到这部分逻辑。</li><li>重构测试。不能让对第三方工具的依赖成为问题。使用随意的方法会导致 mock 的大量增加，也会导致大量的重复和复杂难懂的测试。要像重构产品代码那样去重构测试！把期望声明封装进一个公共的辅助函数能够提高抽象、降低依赖度、减少重复代码。</li><li>质疑以过度复杂的方式使用测试替身。如果你身陷 mock，那可能是因为你尝试了过度测试或你的设计有缺陷。这时使用多级的 mock 通常能解决问题。如果遇到了问题，那么就要将测试分解为多个小的测试来简化问题。同样也要检测一下所测代码是否可以拆解。</li><li>表达力胜于功能。选择 mock 工具是因为它能帮助你创建高度抽象的测试，这些测试可以文档化系统行为和设计，而不仅仅是因为它有很酷的功能，可以做精巧和深奥的事情。除非必要，否则不要使用这些精巧深奥的功能。</li></ul><h2 id="其他关于测试替身的主题"><a href="#其他关于测试替身的主题" class="headerlink" title="其他关于测试替身的主题"></a>其他关于测试替身的主题</h2><h3 id="称呼"><a href="#称呼" class="headerlink" title="称呼"></a>称呼</h3><p>本章中使用的术语有测试替身、mock 和 Stub。还有以下的定义称呼：</p><ul><li>测试替身：为测试而模拟产品代码的代码。</li><li>Stub：一个返回硬编码值的测试替身。</li><li>Spy：一个保存接受信息以便日后验证的测试替身。</li><li>mock：一个基于期望自我验证的测试替身。</li><li>Fake：提供产品类轻量级实现的测试替身。</li></ul><h3 id="测试替身该放在哪"><a href="#测试替身该放在哪" class="headerlink" title="测试替身该放在哪"></a>测试替身该放在哪</h3><p>一开始在相同的测试文件中定义测试替身，以便开发者看到。当多个 fixture 使用同一个测试替身时，再将声明移植到单独的头文件中。当不再需要查看测试替身时，应该把它们从视野中移除。</p><h3 id="虚函数表和性能"><a href="#虚函数表和性能" class="headerlink" title="虚函数表和性能"></a>虚函数表和性能</h3><p>引入测试替身是为了测试驱动开发一个有复杂依赖关系的类。许多创建测试替身的技术都需要创建派生类来覆写虚成员函数。如果之前的产品类没有虚函数，那么现在会有，并且会有一个虚函数表。虚函数表带来额外的间接性是有开销的。</p><p>然而，如果你必须大规模地调用模拟的产品函数，那么就需要先得到一些性能数据。如果性能降到不可接受的程度，就要考虑不同的模拟方式（或许基于模板的方案），重新设计（可能的话，通过优化其他地方来补偿性能损失），或者引入集成测试来弥补单元测试的不足（参见 10.2 节）。</p><h3 id="模拟具体的类"><a href="#模拟具体的类" class="headerlink" title="模拟具体的类"></a>模拟具体的类</h3><p>在前面的示例中，我们通过实现一个纯虚的 Http 接口来创建一个 mock。很多系统主要由具体的类构成，因此没有多少此类接口。从设计的角度讲，使用接口是将系统中的一部分和另一部分隔离的方式。</p><p>依赖倒置原则（Dependency Inversion Principle，DIP）提倡让客户端依赖抽象的接口而非具体的实现，从而达到消除依赖的目的。以纯虚类的方式引入这种抽象，能够加快编译并隔离复杂性。更重要的是，它们能让测试变得简单。</p><p>在某些情况下也可以创建一个派生自一个具体类的 mock。问题是产生的类混合了产品代码和模拟的行为，这又被称为部分模拟。它可以体现出两方面问题：</p><ol><li>首先，部分模拟通常能告诉你所模拟的类过大，如果你只需要其中的一部分而不是全部，那么就可以按照这些边界将类拆分成两个。</li><li>其次，使用部分模拟很可能使你陷入麻烦，以至于很快陷入模拟地狱。在一些情况下，你也可能遇到诡秘的问题：“啊！我原以为代码此时会与模拟的方法交互，但是看起来它与真正的方法交互了。”</li></ol><p>结论便是：如果你使用诸如部分模拟此类难以驾驭的工具，那么你的设计正散发着坏味。举例来说，一个干净的设计会采用具体类继承一个接口的方式。这样，测试也不再需要部分模拟了，为这个接口创建一个测试替身即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>真实的生产环境中对象必须协同工作，有时依赖合作对象使得 TDD 变得举步维艰，可以使用 MOCK 技术来解决这些问题。由于 Catch2 没有提供 MOCK 功能支持，本章节主要的代码演示均使用 GMOCK。但是 Catch2 也是可以利用 GMOCK 相关宏来完善测试需要，<a href="https://github.com/HATTER-LONG/TDD_Learning/tree/master/test/Catch2/PlaceDescriptionServiceTestByGMock">具体使用</a>。</p></li><li><p>依赖问题：当构建产品代码是无法避免与第三方进行交互，这时就会有许多不确定性（接口不稳定、速度慢、甚至没有开发完成等等），这时就可以利用 MOCK 替身技术来避免阻塞。</p></li><li><p>使用模拟对象工具：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HttpStub</span> <span class="token operator">:</span> <span class="token keyword">public</span> Http<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MOCK_METHOD</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> initialize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>override<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MOCK_METHOD</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> get<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> override<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CmakeLists.txt</span><span class="token comment" spellcheck="true">//当前使用的 googletest 版本为 1.10.x MOCK_METHOD 宏在编译器下会有错误信息，依据 gmock issues 无用报错 关闭相关警告</span><span class="token function">add_definitions</span><span class="token punctuation">(</span><span class="token operator">-</span>Wno<span class="token operator">-</span>gnu<span class="token operator">-</span>zero<span class="token operator">-</span>variadic<span class="token operator">-</span>macro<span class="token operator">-</span>arguments<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设立期望：</p><ul><li><p>通过 EXPECT_CALL 宏设立期望，这个宏配置 Google Mock 去验证以给定的参数去调用目标对象逻辑是否吻合。</p></li><li><p>EXPECT_CALL 宏支持许多修饰符。它的语法如下（?和<em>代表每个修饰符的基数：?表示可以选用修饰符一次；</em>表示可以多次使用修饰符。）：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">EXPECT_CALL</span><span class="token punctuation">(</span>mock<span class="token operator">-</span>object<span class="token punctuation">,</span> <span class="token function">method</span> <span class="token punctuation">(</span>matchers<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>multi<span class="token operator">-</span>argument<span class="token operator">-</span>matcher<span class="token punctuation">)</span>  <span class="token operator">?</span>    <span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span>cardinality<span class="token punctuation">)</span>            <span class="token operator">?</span>    <span class="token punctuation">.</span><span class="token function">InSequence</span><span class="token punctuation">(</span>sequences<span class="token punctuation">)</span>         <span class="token operator">*</span>    <span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>expectations<span class="token punctuation">)</span>           <span class="token operator">*</span>    <span class="token punctuation">.</span><span class="token function">WillOnce</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>              <span class="token operator">*</span>    <span class="token punctuation">.</span><span class="token function">WillRepeatedly</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>        <span class="token operator">?</span>    <span class="token punctuation">.</span><span class="token function">RetiresOnSaturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>排除模拟失败的方法：</p><ol><li>产品代码中是否有合理调用？</li><li>是否正确定义了模拟方法？</li><li>有没有将要模拟的成员函数声明为虚函数？</li><li><code>MOCK_METHOD()</code> 声明正不正确？</li><li>排除参数匹配的担忧，为所有参数和返回值使用通配符 testing::_ ，如果测试通过，那么可以确定有一个参数不能被正确匹配。</li></ol></li><li><p>使用测试替身：在引入一个测试替身时需要做两件事。第一，编写测试替身。第二，在目标测试中使用测试替身的一个实例。这样的做法又称作依赖注入（Dependency Injection，DI）。</p></li><li><p>内聚与耦合：在典型的后测试代码情况，开发者可能不会经常进行重构，通常他们也无法使用快速的测试让重构变得更快更安全。这样往往产生一些冗余且耦合的代码。即使这样也可以对其进行测试，能够利用到的技术：</p></li><li><p>转嫁私有依赖：注入模式往往需要对客户端调用产生依赖关系，即 setter 或者构造注入。</p></li><li><p>使用 mock 的策略：在开发前期，可以通过引入 mock 来替代缺失的协作者功能。<strong>在某一时刻，你或其他人将会实现这个协作者。这时你可以作出以下选择：移除 mock，以便待测试的代码使用产品级的协作者；保留 mock。</strong></p><ul><li><strong>如果协作者引入麻烦的依赖，那么就需要保留 mock。否则，移除 mock 会降低测试的复杂度。但是，你也许选择保留它，特别是需要用它来描述与协作者的交互式设计中的重要方面。</strong></li></ul></li><li><p>明智地使用测试替身：当需要从头 TDD 开发一个带有快速测试的系统，大部分系统功能都需要使用测试替身，在使用时可以参考明章节#智地使用测试替身。</p></li></ul><h3 id="Q-x2F-A"><a href="#Q-x2F-A" class="headerlink" title="Q/A"></a>Q/A</h3><p>Q: setter 或构造函数注入是不是违反了信息隐藏？<br>A: 从客户端程序的角度来说，确实是违反了。但是有几种方法有效避免：</p><ol><li>使用其他依赖注入方法，使得某人即使利用了这些暴露出的信息，也无法造成不好的影响。</li><li>提供某人的实例，先配置一个默认的实例，如果测试提供了 HttpStub 实例，那么它将被替换。而真正的客户端时不需要做什么改动的。</li></ol><p>Q: 如果心怀恶意的开发者提供一个具有破坏性的 Http 实例呢？<br>A: 如果产品的客户是团队之外的人，那么可以选择其他注入形式。如果担心团队内部的开发者有意利用注入点做些不好的事，那你将面临更大的问题。</p><p>Q: 我逐渐能够测试驱动开发了，但我担心仅仅为了测试的目的而改变我的设计方法。我的团队中的其他人可能也会这么觉得。<br>A: 确切地了解软件能如期工作是改变设计方式的重要原因。你可以这样和同事讲：“我更关心代码是否如期工作。做出这么一个小的让步意味着我们能够更容易地测试代码，也会有更多的测试能够帮助我们更容易地打磨设计，我们也会对代码更有信心。所以你们能重新思考下我们的标准吗？”</p>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）测试驱动开发技巧--测试结构</title>
      <link href="/2022/06/02/si-ce-shi-qu-dong-kai-fa-ji-qiao-ce-shi-jie-gou/"/>
      <url>/2022/06/02/si-ce-shi-qu-dong-kai-fa-ji-qiao-ce-shi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="测试结构"><a href="#测试结构" class="headerlink" title="测试结构"></a>测试结构</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本章将深入讨论实现测试的具体细节，包括：文件组织、fixture、setup、teardown、过滤器、断言和基于异常的断言。</p><h2 id="组织方式"><a href="#组织方式" class="headerlink" title="组织方式"></a>组织方式</h2><p>从文件和逻辑方面着眼，组织测试的方式有几种：</p><ol><li>fixture 方式，以及如何利用 setup 和 teardown 钩子函数。</li><li>如何使用 Given-When-Then 的概念来组织。</li></ol><h3 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h3><p>在测试驱动开发相关行为时，我们会将相关的测试定义在同一个测试文件中。最终可能需要多个测试文件来验证相关行为，也可能需要用一个测试文件覆盖多个地方行为，所以<strong>不用拘泥于一个类一个测试文件的形式</strong>。</p><p>基于所包含的测试来给文件命名。概括相关的行为，并据此给测试命名。选定一个命名体系诸如 <code>BehaviorDescriptionTest.cpp</code>、<code>BehaviorDescriptionTests.cpp</code> 或者 <code>TestBehaviorDescription.cpp</code>。</p><h3 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h3><p>大多数单元测试工具都支持将逻辑上相关的测试分组。再 Google Mock 以及 Catch2 中都支持所谓的测试用例名称来将相关测试分组。下面的测试所属的测试用例名为 ARetweetCollection。IncrementsSizeWhenTweetAdded 是此测试用例中的一个测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//google mock</span><span class="token function">TEST</span><span class="token punctuation">(</span>ARetweetCollection<span class="token punctuation">,</span> IncrementsSizeWhenTweetAdded<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//catch2</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"IncrementsSizeWhenTweetAdded"</span><span class="token punctuation">,</span><span class="token string">"[ARetweetCollection]"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关的测试运行时需要相同的环境，例如许多测试都需要公共的初始化或者符主函数，许多测试工具能够使你定义一个 fixture – 一个跨测试可重用的类。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//google mock</span><span class="token keyword">class</span> <span class="token class-name">ARetweetCollection</span><span class="token operator">:</span> <span class="token keyword">public</span> Test<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    RetweetCollection collection<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollection<span class="token punctuation">,</span> IsEmptyWhenCreated<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollection<span class="token punctuation">,</span> IsNoLongerEmptyAfterTweetAdded<span class="token punctuation">)</span><span class="token punctuation">{</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//catch2</span><span class="token keyword">class</span> <span class="token class-name">FixtureSoundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Soundex MSoundex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Setup-与-Teardown"><a href="#Setup-与-Teardown" class="headerlink" title="Setup 与 Teardown"></a>Setup 与 Teardown</h3><p>如果测试用例中的所有测试需要一条或更多的相同初始化语句，那么可以将它们写在 fixture 类的初始化函数中。在 Google Mock 中，必须将此函数命名为 SetUp（它覆写了基类 ::testing::Test 中的虚函数）。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//google mock</span><span class="token keyword">class</span> <span class="token class-name">ARetweetCollectionWithOneTweet</span><span class="token operator">:</span> <span class="token keyword">public</span> Test <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    RetweetCollection collection<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollectionWithOneTweet<span class="token punctuation">,</span> IsNoLongerEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ASSERT_FALSE</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollectionWithOneTweet<span class="token punctuation">,</span> HasSizeOfOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再 Catch2 中使用了不同的方式，来进行共有代码初始化与释放，即 SECTION 机制，每个 SECTION 都是再测试开始阶段运行，不受其他 SECTION 段影响，更强的是它支持 SECTION 中继续嵌套 SECTION 来更加精细的适配不同测试所需的前置条件：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//catch2</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span> <span class="token string">"vectors can be sized and resized"</span><span class="token punctuation">,</span> <span class="token string">"[vector]"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SECTION</span><span class="token punctuation">(</span> <span class="token string">"resizing bigger changes size and capacity"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">SECTION</span><span class="token punctuation">(</span> <span class="token string">"resizing smaller changes size but not capacity"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">SECTION</span><span class="token punctuation">(</span> <span class="token string">"reserving bigger changes capacity but not size"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SECTION</span><span class="token punctuation">(</span> <span class="token string">"reserving smaller again does not change capacity"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化的代码适用于所有相关的测试。如果只用少数几个测试来设置上下文反而容易造成不必要的困惑。当一些测试需要一个初始化代码块，而其他测试不需要时，最好再创建一个初始化块，并且把测试合理地分开。</p><p>在创建额外的 fixture 时，不要犹豫。但是每创建一个 fixture，判断一下是不是需要显现出产品代码中的设计缺陷。<strong>如果需要两个不同的 fixture 的话，这有可能意味着你正在测试的类违反了单一责任原则，你可能需要将它们拆分为两个类。</strong></p><h3 id="Arrange-Act-Assert-x2F-Given-When-Then"><a href="#Arrange-Act-Assert-x2F-Given-When-Then" class="headerlink" title="Arrange-Act-Assert/Given-When-Then"></a>Arrange-Act-Assert/Given-When-Then</h3><p>测试都有相同的流程。首先需要设置好合适的条件，然后执行代表要验证的行为的代码，最后验证结果是否和期望的一样。</p><p>测试应当尽可能地直接反映其测试意图。这就意味着阅读测试的人不需要细细品读测试中的每一行，就能很容易地理解测试的基本构成：测试的初始化（Arrange）、测试的行为（Act），以及怎样验证行为结果（Assert）。例如以下代码，使用 AAA 的区别：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollection<span class="token punctuation">,</span> IgnoresDuplicateTweetAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tweet <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"@user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Tweet <span class="token function">duplicate</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>duplicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//VS</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollection<span class="token punctuation">,</span> IgnoresDuplicateTweetAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tweet <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"@user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Tweet <span class="token function">duplicate</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>duplicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再 Catch2 中还支持另一种方式 Given-When-Then。给定（Given）一个上下文，当（When）<br>测试调用一些行为，然后（Then）验证结果。Given-When-Then 表述法稍微侧重强调验证行为，而非测试执行。这里的 SCENARIO 与 TEST_CASE 没有区别，从命名上更符合 GWT 语义。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">SCENARIO</span><span class="token punctuation">(</span> <span class="token string">"vectors can be sized and resized"</span><span class="token punctuation">,</span> <span class="token string">"[vector]"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span> <span class="token string">"A vector with some items"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span> <span class="token string">"the size is increased"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span> <span class="token string">"the size and capacity change"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span> <span class="token string">"the size is reduced"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span> <span class="token string">"the size changes but not capacity"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">REQUIRE</span><span class="token punctuation">(</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速测试、慢速测试、过滤器和测试集"><a href="#快速测试、慢速测试、过滤器和测试集" class="headerlink" title="快速测试、慢速测试、过滤器和测试集"></a>快速测试、慢速测试、过滤器和测试集</h3><p>如果编写的是小而独立的代码单元，那么每个测试都会运行得快如闪电。通常一个测试在一台配置完备的电脑上的运行时间不到一毫秒。以这种速度，几分钟内至少可以运行几千个测试。如果与一些外部慢速资源（如数据库或其他慢速服务）交互的话，那么测试就会变慢。单单建立数据库连接就可能花费 50 毫秒。如果大部分测试必须与数据库交互，那么需要几分钟才能运行完几千个测试。有些工作室需要半个多小时才能运行完所有测试。</p><p>而 TDD 的核心目标就是尽可能频繁地获得较多的反馈。当修改了一点代码时，会马上想知道改动是否正确，影响到了其他代码？这时如果运行测试时间很长，那么就不会频繁的运行他们，一旦反馈周期变长，TDD 的威力就急剧减弱。因为越晚察觉到的问题，修改所需的耗费就更长。</p><p>运行慢的测试对 TDD 来说是个问题，所以一些人不再把它们称为单元测试，而是称其为集成测试。</p><h4 id="运行测试的一个子集"><a href="#运行测试的一个子集" class="headerlink" title="运行测试的一个子集"></a>运行测试的一个子集</h4><p>可能已有一个测试集（Test suite）来验证系统的一部分行为。同时也有可能这些测试运行的很慢，有时需要指定运行某一个测试子集。</p><p>Google Mock 可以通过指定一个测试过滤器轻松地做到只运行一个测试子集。你可以把测试过滤器作为执行测试的命令行参数。过滤器的语法是：测试用例名.测试名称。例如，如果想要运行一个特定的测试，可以使用下面的命令：</p><pre class="line-numbers language-shell"><code class="language-shell">./test --gtest_filter=ATweet.CanBeCopyConstructed # weak./test --gtest_filter=ATweet.* # 使用通配符运行一组./test --gtest_filter=*Retweet*.*:ATweet.*:-ATweet*.*Construct* # 自定义复杂的过滤器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Catch2 也同样有一些过滤方法：</p><pre class="line-numbers language-shell"><code class="language-shell">~/WorkSpace/TDD_Learning/build/test/Catch2/TestSoundex master❯ ./catch2_tdd_test "[SoundexEncoding]"Filters: [SoundexEncoding]===============================================================================All tests passed (11 assertions in 11 test cases)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>断言可以说是自动化测试的核心，它替代了人工查看结果。一般测试框架运行单个测试时，它会从头到尾执行测试代码段中的语句。每遇到一个断言，都意味着要去验证一些期待的结果。如果断言的条件不满足，那么测试框架就中止测试。</p><p>有些工具，包括 Google Mock 与 Catch2，提供了另一种断言机制，它允许测试在遇到断言失败的情况下继续运行。这些断言又称作非致命性断言，与致命性断言相对，后者会中止测试。</p><p>具体断言使用方式详见，GMock 与 Catch2 的文档。</p><h3 id="基于异常的测试"><a href="#基于异常的测试" class="headerlink" title="基于异常的测试"></a>基于异常的测试</h3><p>开发者应当知晓在代码执行时会出现哪些错误，也应当知道什么时候抛出异常，哪里需要引入 try-catch 块来保护应用程序。</p><p>在 TDD 中，先从一个失败的测试开始，然后将对异常的顾虑化作代码编写入系统。所得结果就是可以用作文档之用的测试，可以将此测试提供给不太清楚代码执行路径的开发人员。当异常发生时，可以在测试中找到可能出错的地方和将会发生的事情。拥有这些知识的客户端开发者可以很自信地使用你提供的类。</p><p>有些单元测试框架允许你声明应该抛出的异常，如果异常没有抛出，则测试失败。可以编写如下<a href="https://github.com/catchorg/Catch2/blob/devel/docs/assertions.md#Exceptions">代码</a>，如果 ASSERT_ANY_TRHROW 宏内的表达式不抛出异常，那么测试失败。：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//GMock</span><span class="token function">TEST</span><span class="token punctuation">(</span>ATweet<span class="token punctuation">,</span> RequiresUserToStartWithAtSign<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string <span class="token function">invalidUser</span><span class="token punctuation">(</span><span class="token string">"notStartingWith@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_ANY_THROW</span><span class="token punctuation">(</span>Tweet <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> invalidUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Catch2</span><span class="token function">REQUIRE_THROWS_WITH</span><span class="token punctuation">(</span> <span class="token function">openThePodBayDoors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Contains</span><span class="token punctuation">(</span> <span class="token string">"afraid"</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Contains</span><span class="token punctuation">(</span> <span class="token string">"can't do that"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">REQUIRE_THROWS_WITH</span><span class="token punctuation">(</span> <span class="token function">dismantleHal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"My mind is going"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="探查私有成员"><a href="#探查私有成员" class="headerlink" title="探查私有成员"></a>探查私有成员</h2><p>可以针对私有成员数据编写测试吗？私有成员函数呢？这两个既相关又迥异的话题会影响你的设计抉择。</p><h3 id="私有数据"><a href="#私有数据" class="headerlink" title="私有数据"></a>私有数据</h3><p>如遇到了一些情况需要判断类的私有数据，为那些非公用接口的成员提供访问通道方式是可以接受的，如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">// 仅仅为了测试的目的而暴露数据；避免直接用于生产：</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> currentWeighting<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将数据暴露出来仅仅是为了测试，这对许多人来说是不易接受的，但更重要的是清楚你的代码能正常工作。然而，过量的状态测试显露了设计坏味。无论什么时候，<strong>如果暴露数据仅仅是为了断言，那么就需要考虑用验证行为的方式来替代</strong>。参考第 5 章获取更多信息。</p><h3 id="私有行为"><a href="#私有行为" class="headerlink" title="私有行为"></a>私有行为</h3><p>大多数时候，当你觉得需要测试私有行为时，可以尝试将代码移到另一个类或为之创建的一个新类。</p><h2 id="测试和测试驱动：参数化的测试及其他方法"><a href="#测试和测试驱动：参数化的测试及其他方法" class="headerlink" title="测试和测试驱动：参数化的测试及其他方法"></a>测试和测试驱动：参数化的测试及其他方法</h2><p>尽管测试驱动开发中有测试两个字，但是它更多地与设计有关，而非测试。在 TDD 过程中，你会编写单元测试，但它们基本就是一些副产品。貌似差别不大，但 TDD 的真正目的是让你一直保持设计整洁，这样在引入新的行为或改变现有行为时，你会更从容自信，并且不会太费力。</p><p>从测试的角度看，你寻求的是创建具有高覆盖率的测试。所写的测试有五类：无（zero）、有（one）、多（many）、边界（boundary）和异常（exceptional）情形。而从测试驱动角度来看，你写测试的目的是为了保证代码能够符合预定规范。虽然测试和测试驱动都能够保证你有足够的信心去发布代码，但是一旦对所构建的东西有足够的信心，就可以停止 TDD。与此相反，优秀的测试人员会竭尽所能地去覆盖上面所说的五类情形。</p><p>你可以在测试驱动开发时编写额外的事后测试。但通常而言，一旦你认为你有一个正确且干净的实现，并且这个实现能覆盖你要支持的情形，那么就可以立刻停止。<strong>换句话说，在你想不出可以写出不能通过的测试时，就可以停止。</strong></p><p>现在以罗马数字转换器为例，它可以将阿拉伯数字转换为对应的罗马数字。优秀的测试人员可能至少会测试几十个转换，以确保能覆盖各种数字和组合。相反，在测试驱动开发解决方案时，本文在测试完十几个转换后就可以停下来。此时，我有足够的信心保证你已经开发出了正确的算法，剩下的工作仅仅是完成阿拉伯数字到罗马数字的转换表。</p><p><strong>在测试驱动开发时，追求的是快速且独立的测试，所以不需要这种测试间的依赖关系，因为它会让事情变得复杂。</strong></p><h3 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h3><p>以一个简单的名为 Adder 类举例，输入参数测试功能：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Adder</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> A <span class="token operator">+</span> B<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"GeneratesASumFromTwoNumbers"</span><span class="token punctuation">,</span> <span class="token string">"AnAdder"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>Adder<span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的 sum 函数实现测试，假如想要加入更多的参数来进行测试，可以使用参数生成器:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"BulkTest"</span><span class="token punctuation">,</span> <span class="token string">"AnAdder"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> std<span class="token operator">::</span>make_tuple<span class="token punctuation">;</span>    size_t TestInputA<span class="token punctuation">,</span> TestInputB<span class="token punctuation">,</span> ExpectOutPut<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// clang-format off</span>    std<span class="token operator">::</span><span class="token function">tie</span><span class="token punctuation">(</span>TestInputA<span class="token punctuation">,</span> TestInputB<span class="token punctuation">,</span> ExpectOutPut<span class="token punctuation">)</span> <span class="token operator">=</span>        <span class="token function">GENERATE</span><span class="token punctuation">(</span>table<span class="token operator">&lt;</span>size_t<span class="token punctuation">,</span> size_t<span class="token punctuation">,</span> size_t<span class="token operator">></span><span class="token punctuation">(</span>                <span class="token punctuation">{</span>                    <span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//clang-format on</span>    <span class="token function">CAPTURE</span><span class="token punctuation">(</span>TestInputA<span class="token punctuation">,</span> TestInputB<span class="token punctuation">,</span> ExpectOutPut<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于记录数据信息 log</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>Adder<span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">(</span>TestInputA<span class="token punctuation">,</span> TestInputB<span class="token punctuation">)</span> <span class="token operator">==</span> ExpectOutPut<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 gmock 的参数生成器使用方法，<a href="https://github.com/HATTER-LONG/TDD_Learning/tree/master/test/Gmock/ParameterizedTest">详见配套的工程代码</a>。</p><h3 id="测试中的注释"><a href="#测试中的注释" class="headerlink" title="测试中的注释"></a>测试中的注释</h3><p>注释不是测试工具的特性而是一个语言特性。在产品代码和测试代码中，最好的选择是尽量将注释化为更具表达力的代码。所剩的注释只回答类似下面的问题：为什么我会这样编写代码？</p><p>除了回答此类“为什么”，如果你要加注释来阐明测试的话，那就糟糕透顶了。测试应当清楚地阐明类的功能。你总是可以用一种无需使用阐述性注释的方法来重命名和组织测试。</p><p>可以用一句话把这一点说得更清楚：不要用描述性的注释来总结测试，而是修改测试名称以达到描述效果。不要引导读者通过注释来理解测试。要整理测试中的步骤。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章讲解了如何组织单元测试代码，包括了源码文件以及代码结构上如何进行。</p><p>针对测试集的大小分布，以及断言相关概念进行了介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）测试驱动开发技巧--基础概念</title>
      <link href="/2022/06/02/san-ce-shi-qu-dong-kai-fa-ji-qiao-ji-chu-gai-nian/"/>
      <url>/2022/06/02/san-ce-shi-qu-dong-kai-fa-ji-qiao-ji-chu-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="测试驱动开发基础"><a href="#测试驱动开发基础" class="headerlink" title="测试驱动开发基础"></a>测试驱动开发基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>经过前一章的介绍想必对于 TDD 的实践有了个了解，本章开始将会深入其中，对于其概念开始详细的分析。</li></ul><h2 id="单元测试和测试驱动开发基础"><a href="#单元测试和测试驱动开发基础" class="headerlink" title="单元测试和测试驱动开发基础"></a>单元测试和测试驱动开发基础</h2><p>TDD 会产出单元测试。单元测试验证了一个代码单元的行为，这里的代码单元是一个应用中最小的、可测的一段代码。通常而言，开发单元测试和代码单元要使用一致的编程语言。</p><h3 id="单元测试的组织和执行"><a href="#单元测试的组织和执行" class="headerlink" title="单元测试的组织和执行"></a>单元测试的组织和执行</h3><ul><li>单元测试包括一个描述性的名称和一系列代码声明，从概念上可以细分成四个（有序的）部分：<ol><li>设置能够运行上下文的语句，这一部分是可选的；</li><li>一条或多条能构成你想要验证的行为的语句；</li><li>一条或多条验证期望输出的语句；</li><li>清理工作的语句（例如，释放所分配的内存），这一部分是可选的。</li></ol></li></ul><p>执行一遍所有的测试称为运行测试（test run 或 suite run）。在运行测试的过程中，<strong>工具会枚举所有的测试，独立地执行每个测试</strong>。对于每个测试来说，测试工具都是从头到尾执行其中的语句的。当执行一条断言语句时，如果断言所期待的条件不满足，那么测试就会失败。反之，测试通过。</p><h3 id="测试驱动单元"><a href="#测试驱动单元" class="headerlink" title="测试驱动单元"></a>测试驱动单元</h3><ul><li><p><strong>TDD 的好处?</strong></p><ul><li>与 POUT 即开发完成后再编写测试不同，TDD 事一个更加简明的流程，并且也使用了单元测试。在 TDD 中先编写测试，并且保持测试的粒度尽量小且一致，这样会带来许多好处，最重要的是可以安全地修改现有代码。</li></ul></li><li><p><strong>怎么进行 TDD?</strong></p><ul><li>在 TDD 中，是以非常小的步伐，增量地往系统中添加新行为。换句话说，为了往系统中加入新的行为，首先会去写一个测试来定义这个行为。这个起初运行失败的测试将驱使你去实现相应的行为。</li></ul></li><li><p><strong>TDD 与功能测试的区别？</strong></p><ul><li>TDD 不应该和大量功能的测试混淆。主要区别在于，覆盖了大量功能的测试是与其他代码或者外部实体集成后的整体功能，一般被称为集成测试。此类测试应在验收或者系统测试时进行。</li><li>TDD 主导的是产生单元测试，是去覆盖最小的逻辑代码单元的测试用例。虽说 TDD 在失败测试通过时才编写产品代码的规则，往往会指引者开发者与外部实体代码进行交互，进而变成集成测试，但是者没有关系。<strong>重要的是现指定行为，系统地测试驱动开发系统中的每一块代码</strong>。</li></ul></li></ul><h2 id="测试驱动开发周期：红-绿-重构"><a href="#测试驱动开发周期：红-绿-重构" class="headerlink" title="测试驱动开发周期：红 - 绿 - 重构"></a>测试驱动开发周期：红 - 绿 - 重构</h2><p>就像第二章中描述的步骤一样：</p><ol><li>先写一个测试（“红”）；</li><li>让测试通过（“绿”）；</li><li>优化设计（“重构”）。</li></ol><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/TDD/1_TDD_Process.png" alt="TDDProcess"></p><h3 id="思考测试驱动开发"><a href="#思考测试驱动开发" class="headerlink" title="思考测试驱动开发"></a>思考测试驱动开发</h3><ul><li><p>总的来说 TDD 过程需要思考两件事情：</p><ol><li>需要编写一个测试说明行为；</li><li>每个周期都要清理代码。</li></ol></li><li><p>在 TDD 周期中的每一步，你必须能回答以下问题：</p><ol><li>写一个小测试：<ul><li>怎样才算可以增量开发的最小行为？</li><li>系统中已经存在这样的行为了么？</li><li>怎样让测试名称准确表达行为？</li><li>测试中使用的接口是客户端代码使用这一行为最好的方式吗？</li></ul></li><li>确保新的测试是失败的：<ul><li>如果没有失败，为什么？</li><li>这个行为已经在系统中存在了么？</li><li>是否是忘记了编译差异代码？</li><li>是不是在上一个测试中步伐太大了，包含了多个行为？</li><li>断言是否有效？</li></ul></li><li>写出你认为可以让测试通过的代码：<ul><li>代码是不是刚好满足测试说明的行为要求？</li><li>你清楚刚才写的代码中哪些地方需要整理么？</li><li>是否遵循了团队标准？</li></ul></li><li>确保所有测试都能通过：<ul><li>如果没有，你的编码是否正确？</li><li>你的规范正确么？</li></ul></li><li>整理刚才的代码改动：<ul><li>怎么做才能使你的代码符合团队标准？</li><li>新的代码和系统中其他要清除的代码有重复么？</li><li>代码有没有坏味？</li><li>遵循好的设计原则了吗？</li><li>除了当下要做的设计和代码整理工作，你还知道其他什么？</li><li>设计是朝好的方向发展吗？</li><li>你的代码改动会导致需要修改其他地方的代码吗？</li></ul></li><li>确保所有测试再次通过：<ul><li>确信你的单元测试覆盖率够高吗？</li><li>是不是应该运行一些速度较慢的测试集合，以便有信息继续前行？</li><li>下一个测试是什么？</li></ul></li></ol></li></ul><h2 id="TDD-的三条准则"><a href="#TDD-的三条准则" class="headerlink" title="TDD 的三条准则"></a>TDD 的三条准则</h2><ul><li>Robert C. Martin（Bob 大叔）提出了践行 TDD 的<a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">简明规则</a>。<ol><li>只在让失败测试通过时才编写产品代码。</li><li>当测试刚好失败时，停止继续编写。编译失败也是失败。</li><li>只编写能刚好让一个失败测试通过的产品代码。</li></ol></li></ul><h2 id="表里不一"><a href="#表里不一" class="headerlink" title="表里不一"></a>表里不一</h2><p>TDD 的第一条准则便是在编写代码前先写出一个运行失败的测试，但是经常在开发中碰到刚刚写完一个测试立刻就通过了，这种非期望实践产生的可能原因：</p><ol><li><p>运行了错误的测试；</p><ul><li>运行了错误的测试集。</li><li>可能新增的测试没有被编译进入执行程序，测试框架的测试用例数量需要时刻关注。</li><li>测试框架的种种过滤器用法，是否是新增的测试被过滤了。</li><li>测试被关闭、禁止了。</li></ul></li><li><p>测试了错误的代码；</p><ul><li>没有包含最新的测试代码。</li><li>没有注意到构建失败了。</li><li>构建脚本有缺陷，没有新增测试代码。</li><li>你在测试错误的类。同名替身类这些。</li></ul></li><li><p>不当的测试规范；</p><ul><li>类似下例这种，断言的目标与测试描述的行为不符。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>APortfolio<span class="token punctuation">,</span> IsEmptyWhenCreated<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>portfolio<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>对系统的无效假设；</p><ul><li>写了一个测试，它一运行就通过了。之所以写测试用例是因为最开始假设这个行为并没有实现。这个通过的测试提醒了你之前的假设是错误的。这时需要停下来，就前面已添加的行为来分析系统这个行为的实现是否合理。</li></ul></li><li><p>不佳的测试顺序；</p><ul><li>测试用例之间不要存在耦合关系，每个单元测试都应该是独立不受顺序影响的。</li></ul></li><li><p>相关联的产品代码；</p></li><li><p>过度编码；</p><ul><li>在开发功能的过程中往往会有下意识更好的解决方法，例如引入新的数据结构等等，但是其可能导致后续许多的测试用例提前通过，如果你想成功运用 TDD，就必须确保增量地引入这些想法，并配以相应的测试。有时候你会觉得自己甚至不需要一个 map。与此同时，不做多余需求的实现可以保持代码简单。这样做也可以避免在存在更简单的解决方案时，引入长时间的过度复杂的代码。</li></ul></li><li><p>确定性测试。</p><ul><li>有时候你并不知道代码在一些特定情形下是怎样工作的。你认为 TDD 的代码应该是一个完整的解决方案，但并不确定。“我们的算法处理这一情形了吗？”你可以有针对性地写一个测试来探测系统行为。</li></ul></li><li><p>思考：</p><ul><li>测试提前通过的情况应该很少见。但是这种情形却很重要，可以问自己几个问题：我漏掉了什么？我的步伐是不是大了点儿？我有没有犯愚蠢的错误？如果不这样做会是什么结果呢？和编译警告一样，你始终要去揣摩测试提前通过背后的真相。</li></ul></li></ol><h2 id="成功运用测试驱动开发的思维"><a href="#成功运用测试驱动开发的思维" class="headerlink" title="成功运用测试驱动开发的思维"></a>成功运用测试驱动开发的思维</h2><h3 id="增量性"><a href="#增量性" class="headerlink" title="增量性"></a>增量性</h3><p>TDD 以渐进的方式从无到有地开发一个功能完善的系统，每当往系统中加入新行为单元前，都应该为其编写一个测试，并保证以往加入的行为也有对应的测试，你只有在新功能与其他所有功能协同工作时才能继续前进。</p><p>TDD 与敏捷开发的流程也相互契合，在每个短的敏捷开发迭代周期，都可以定义、构建并发布少量的功能，而 TDD 则会保证你的修改是否影响其他功能以及新开发的功能指定行为是否正确。</p><h3 id="测试行为而非方法"><a href="#测试行为而非方法" class="headerlink" title="测试行为而非方法"></a>测试行为而非方法</h3><p>TDD 不应该集中精力去测试成员函数。“我们实现了一个 add() 成员函数。再写一个 TEST(ARetweetCollection, Add) 的测试。”想要完全覆盖一个 add 行为的测试需要考虑多种不同情况，非常浪费精力。</p><ul><li>相反将注意力放在描述行为上：<ul><li>如果加入一个已经加入的 add 参数？</li><li>如果客户传入一个空的参数？</li><li>如果加入的参数不在生效？</li><li>……等等。</li></ul></li></ul><h3 id="使用测试来描述行为"><a href="#使用测试来描述行为" class="headerlink" title="使用测试来描述行为"></a>使用测试来描述行为</h3><p>测试可以被看作一个示例，用它描述或文档化系统中的行为。</p><ul><li>可以通过下列两个方面来编写一个良好的测试：<ol><li>测试名称，它概括了在特定上下文中系统表现出的行为；</li><li>测试语句本身，它精炼地展现了一个测试的行为。</li></ol></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_F</span><span class="token punctuation">(</span>ARetweetCollection<span class="token punctuation">,</span> IgnoresDuplicateTweetAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Tweet <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"@user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Tweet <span class="token function">duplicate</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>duplicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_THAT</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Eq</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//> 测试名称提供了高层次的概括：应该忽略重复添加的 tweet。但什么才算重复的 tweet？忽略重复的 tweet 意味着什么？这个测试提示了一个简单的示例，清楚地回答了这两个问题。当一个 tweet 和另一个 tweet 完全相同时，算作重复；当加入一个重复的 tweet 后，tweet 集合的大小不变。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>越是重视 TDD 的文档功能，越懂得高质量测试的重要性。测试的文档功能是 TDD 的附属产物。为了确保在单元测试中的投入得到良好的回报，必须保证其他人能够很容易地理解测试，否则你的测试就是在浪费他们的时间。良好的测试可以通过全面地记录系统行为来节省时间。只要所有的测试都通过，它们就准确地传达了系统的内部行为。文档也不会过时。</p><h3 id="保持简单"><a href="#保持简单" class="headerlink" title="保持简单"></a>保持简单</h3><p>有很多愿意导致开发人员制造非必要的复杂性：</p><ol><li>时间压力；</li><li>缺乏学习；</li><li>已有的复杂；</li><li>害怕改代码；</li><li>臆测；</li></ol><p>但是保持简单才是在持续变化的环境中的生存之道。最好的防范办法就是保持简单的设计：代码易读、没有冗余、没有无谓的复杂性。具有这些特征的系统会最大程度地降低维护成本。</p><h3 id="恪守测试驱动开发周期"><a href="#恪守测试驱动开发周期" class="headerlink" title="恪守测试驱动开发周期"></a>恪守测试驱动开发周期</h3><p>请遵循“红-绿-重构”周期，非常重要。</p><h2 id="成功运用-TDD-的方法"><a href="#成功运用-TDD-的方法" class="headerlink" title="成功运用 TDD 的方法"></a>成功运用 TDD 的方法</h2><h3 id="下一个测试是什么"><a href="#下一个测试是什么" class="headerlink" title="下一个测试是什么"></a>下一个测试是什么</h3><p>一个答案便是：如果一个测试需要的产品代码最少，那么就写这个测试。</p><p>还可以使用<code>变换优先级假设（Transformation Priority Premise，TPP）</code>模式，第十章有讲解。大致描述：将每步变换分类。所有的变换按从最简单（最高优先级）到最复杂（最低优先级）安排优先级顺序。你要做的就是选择一个最高优先级的变换，然后为此变换写一个测试。按照变换优先级增量地进行，就能得到一个理想的测试顺序。</p><ul><li>除此之外，可以回答下列问题做出决定：<ol><li>从逻辑上来说，那个行为最具有意义？</li><li>你可以验证这个有意义的行为中哪个最小集合？</li><li>你能写一个测试来说明当前的行为不完备吗？</li></ol></li></ul><h3 id="十分钟限制"><a href="#十分钟限制" class="headerlink" title="十分钟限制"></a>十分钟限制</h3><p>TDD 依赖较短的反馈周期。但有时遇到困难，例如重构代码时破坏了一些测试，又或者需要 GDB 工具查找问题。</p><p>当遇到这些痛苦时间后，从上一个测试通过算起，不要超过 10 分钟。如果限定时间到了，那么丢掉之前的修改重新来过。不要过分纠结代码，特别时和现在做的不相干的代码，大可忽略他们，不要写超过 10 分钟的代码，你的方案可能质量不高。重新整理思绪，用全新的视角与方法再进行尝试。</p><h3 id="代码缺陷"><a href="#代码缺陷" class="headerlink" title="代码缺陷"></a>代码缺陷</h3><p>使用 TDD 几乎不会出现一些愚蠢的逻辑错误。那还会有哪些呢？其他的事情也会出现问题：没人预料到的条件、不同步的外部事情（例如，配置文件），以及多个方法或类合在一起时表现出的奇怪行为。如果规范有问题也会出错，包括因粗心而忽略掉一些东西，你和客户间的误解。TDD 不是银弹，却有助于消除一些人人都会犯的逻辑错误。（更重要的是，它是精细打磨系统设计的绝妙方法。）</p><p>当 QA 或客户支持团队当面给你指出一个代码缺陷时，你该怎么做？嗯，测试驱动！你或许可以先写一些简单的测试来探测系统行为。专注于相关代码的测试能帮助你更好地理解代码是怎样工作的，也有助于解读代码缺陷。有些时候，你可以保留这些测试，并把它们用作特征测试。有时候则可以丢弃这些类似一次性工具的测试。一旦查明问题根源，也不要简单修复，继续做其他事情吧。我们是在测试驱动开发！相反，写一个你认为能模拟暴露缺陷的行为的测试。确保测试失败（红），修复它（绿），重构。</p><h3 id="禁用测试"><a href="#禁用测试" class="headerlink" title="禁用测试"></a>禁用测试</h3><p>正常情况下，在测试驱动开发时一次只关注一件事情。个别情况下，当你忙于让第一个测试通过时，第二个测试失败了。如果另一个测试失败，这意味着你的第一个测试没能遵守“红-绿-重构”周期（除非这两个测试是因为同一个原因而失败）。</p><p>为了不让第二个失败的测试分散你的注意力，可以让它暂时失效。</p><p>不要提交被禁用（或注释掉）的测试的代码，除非你有充足的理由。集成后的代码应该反映系统的当前功能。注释掉的测试（或产品代码）会浪费其他开发者的时间。“测试被注释掉是因为没有这个行为了吗？这个测试有问题？处于变动中？这个测试运行太慢以至于需要的时候才启用它？我是不是应该找个人讨论一下这个测试？”</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章讲解了一些测试驱动开发的基本概念：</p><ul><li><p>首先就是测试驱动开发周期：</p><ol><li>先写一个测试（“红”）；</li><li>让测试通过（“绿”）；</li><li>优化设计（“重构”）。<blockquote><p>就像第二章中描述的步骤一样，这里将其精简。</p></blockquote></li></ol></li><li><p>TDD 的前进规则，在 TDD 周期中的每一步，你必须能回答以下几个方面的问题：</p><ol><li>确定测试目标。</li><li>确保新的测试是失败的。</li><li>写出你认为可以让测试通过的代码。</li><li>确保所有测试都能通过。</li><li>整理刚才的代码改动。</li><li>确保所有测试再次通过。</li></ol></li><li><p>TDD 三条准则</p><ol><li>只在让失败测试通过时才编写产品代码。</li><li>当测试刚好失败时，停止继续编写。编译失败也是失败。</li><li>只编写能刚好让一个失败测试通过的产品代码。</li></ol></li></ul><h3 id="成功运用-TDD-的方法-1"><a href="#成功运用-TDD-的方法-1" class="headerlink" title="成功运用 TDD 的方法"></a>成功运用 TDD 的方法</h3><ol><li><strong>下一个测试是什么</strong>，这是 TDD 正确前进的重要问题，文中给出三种方案：<ol><li>如果一个测试需要的产品代码最少，那么就写这个测试。</li><li>使用<code>变换优先级假设（Transformation Priority Premise，TPP）</code>模式。</li><li>可以回答下列问题做出决定：<ol><li>从逻辑上来说，那个行为最具有意义？</li><li>你可以验证这个有意义的行为中哪个最小集合？</li><li>你能写一个测试来说明当前的行为不完备吗？</li></ol></li></ol></li><li><strong>十分钟限制</strong>：出现问题开始十分钟如果解决不了，应该回滚并换一种思路了。</li><li><strong>代码缺陷</strong>：TDD 不是银弹无法完全消除错误，但是却有助于消除一些人人都会犯的逻辑错误（更重要的是，它是精细打磨系统设计的绝妙方法。）。当发现了一个新的问题最好的方式便是将错误通过测试代码进行描述，进入“红-绿-重构”周期。</li><li><strong>禁用测试</strong>：正常情况下，在测试驱动开发时一次只关注一件事情。个别情况下，当你忙于让第一个测试通过时，第二个测试失败了。为了不让第二个失败的测试分散你的注意力，可以让它暂时失效。但是不要提交这种被禁用的测试用例，除非你有足够的理由，并且做好完善的备注，避免给别人误导。</li></ol><h3 id="TDD-QA"><a href="#TDD-QA" class="headerlink" title="TDD QA"></a>TDD QA</h3><ol><li>TDD 的好处？<ul><li>与 POUT 即开发完成后再编写测试不同，TDD 事一个更加简明的流程，并且也使用了单元测试。在 TDD 中先编写测试，并且保持测试的粒度尽量小且一致，这样会带来许多好处，最重要的是可以安全地修改现有代码。</li></ul></li><li>如何进行 TDD？<ul><li>在 TDD 中，是以非常小的步伐，增量地往系统中添加新行为。换句话说，为了往系统中加入新的行为，首先会去写一个测试来定义这个行为。这个起初运行失败的测试将驱使你去实现相应的行为。</li></ul></li><li>TDD 与功能测试的区别？<ul><li>TDD 不应该和大量功能的测试混淆。主要区别在于，覆盖了大量功能的测试是与其他代码或者外部实体集成后的整体功能，一般被称为集成测试。此类测试应在验收或者系统测试时进行。</li><li>TDD 主导的是产生单元测试，是去覆盖最小的逻辑代码单元的测试用例。虽说 TDD 在失败测试通过时才编写产品代码的规则，往往会指引者开发者与外部实体代码进行交互，进而编程集成测试，但是者没有关系。<strong>重要的是现指定行为，系统地测试驱动开发系统中的每一块代码</strong>。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）测试驱动开发技巧--第一个示例</title>
      <link href="/2022/06/02/er-ce-shi-qu-dong-kai-fa-ji-qiao-di-yi-ge-shi-li/"/>
      <url>/2022/06/02/er-ce-shi-qu-dong-kai-fa-ji-qiao-di-yi-ge-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="测试驱动开发：第一个示例"><a href="#测试驱动开发：第一个示例" class="headerlink" title="测试驱动开发：第一个示例"></a>测试驱动开发：第一个示例</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写个测试，保证它通过，接着重构设计，这就是 TDD 的全部内容了。</p><ul><li>啊哈，我太勤快了，这么快就更新第二篇文章了，吐槽下身份证过期了导致旅游计划被搁置 😓，疫情下太久没用过身份证了，没想到还过期了。</li><li>废话少说，这篇文章篇幅有些多啊，不过都是代码片段实际看起来也还好，完整代码在<a href="https://github.com/HATTER-LONG/TDD_Learning">这里</a>，Src 目录下的对应文件夹，可以先编译试试，体会下。</li><li><a href="https://github.com/HATTER-LONG/NoteBook_ModernCppProgrammingWithTDD">笔记目录</a>，再次厚颜无耻的求下 star 或者 follow 🚩。</li></ul><h2 id="Soundex-类"><a href="#Soundex-类" class="headerlink" title="Soundex 类"></a>Soundex 类</h2><p>以 TDD 的方式开发 Soundex 类，这种类可以提升应用程序的搜索能力。这个算法是将单词编码为一个字母和三个数字，它将发音相似的单词映射到相同的编码。<a href="http://en.wikipedia.org/wiki/Soundex">Wiki 解释</a>：</p><ol><li><p>保留第一个字母。丢掉所有出现的 a、e、i、o、 u、y、h、w。</p></li><li><p>以数字来代替辅音（第一个字母除外）：</p><ul><li>b、f、p、v : 1</li><li>c、g、j、k、q、s、x、z : 2</li><li>d、t : 3</li><li>l : 4</li><li>m、n : 5</li><li>r : 6</li></ul></li><li><p>如果相邻字母编码相同，用一个数字表示它们即可。同样，如果出现两个编码相同的字母，且它们被 h 或 w 隔开，也这样处理；但如果被元音隔开，就要编码两次。这条规则同样适用于第一个字母。</p></li><li><p>当得到一个字母和三个数字时，停止处理。如果需要，补零以对齐。</p></li></ol><h2 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h2><p>TDD 并非一次将所有测试全部实现，而是每次只关注一个功能点对应的单元测试，当完成后再考虑下一个需要加入系统的功能。</p><p><strong>从宏观的角度来看，TDD 的践行步骤是：编写一个最基本单元功能的测试代码 –&gt; 测试失败 –&gt; 实现功能代码最低限度的使得测试代码通过测试 –&gt; 测试成功 –&gt; 考虑下一个基本单元功能并编写对应测试 –&gt; …。</strong></p><p>基于这一思路，以 Soundex 举例：最先需要实现的便是步骤一，保留第一个字母：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Soundex soundex<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们创建了一个 Soundex 一个对象，然后到此为止，因为现在已经编译不通过了，需要先解决这个问题：<ul><li>只在为了使失败测试通过时才编写产品代码。</li><li>当测试刚好失败时，停止继续编写。编译失败也是失败。</li><li>只编写刚好能让一个失败测试通过的产品代码。</li></ul></li></ul><p>现在编译在已经通知未定义 Soundex 的错误：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token comment" spellcheck="true">// !TODO : 当前暂时与测试代码同一个文件，当感觉代码放在同一个文件有些麻烦时，再用合适的方式迁出</span><span class="token comment" spellcheck="true">/** * @brief 实现 Soundex 类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Soundex soundex<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在继续向前添加功能，设计使 Soundex 对外提供一个 encode(string) 公共成员函数，现在代码使无法编译通过：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修复错误，使 Soundex 支持 encode 方法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在检验返回值是否符合 Soundex 算法转换后的结果：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> Catch<span class="token operator">::</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在得到了与前边编译失败不同的结果，断言失败。当然这是必然的，因为 encode 方法并没有什么实现。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在断言能通过了，不过功能并没有完善，不过这里展示了一个渐进式 TDD 开发的过程。</p><h2 id="去掉不干净的代码"><a href="#去掉不干净的代码" class="headerlink" title="去掉不干净的代码"></a>去掉不干净的代码</h2><p>即使代码很短也可能存在问题，TDD 为开发提供了更好的时机去修复，即每次完成单元测试代码以及功能代码编写后都可以进行快速的增量审阅，避免小问题越积越多。</p><h3 id="命名空间的修复"><a href="#命名空间的修复" class="headerlink" title="命名空间的修复"></a>命名空间的修复</h3><p>单元测试代码中，Equals 使用 Catch 命名空间比较影响阅读连贯性，使用命名空间将断言读起来像一个句子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Catch<span class="token punctuation">;</span><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消除重复代码"><a href="#消除重复代码" class="headerlink" title="消除重复代码"></a>消除重复代码</h3><p>重复代码对于维护成本和风险都会提升。审阅代码是需要着重优化。</p><p>在此例中没有太明显的重复，但是 <code>"A"</code> 这个硬编码的字符串出现了很多回，可以将 encode 方法中返回的硬编码 “A” 优化掉：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何时候，一个完整的测试集合声明了系统中期望的行为。这里蕴含着一个潜台词：如果一个行为没有对应的测试来描述，那这个行为要么不存在，要么不是期望的（或者测试本身没有尽到描述行为的职责）。</p><p>当历经 TDD 的各个周期时，我们会使用重构来审阅设计，同时修复出现的所有问题。重构的主要关注点是提升表达能力，去除重复代码。就代码的可维护性来说，这两个点最有裨益。</p><h2 id="增量性"><a href="#增量性" class="headerlink" title="增量性"></a>增量性</h2><p>对于前文的硬编码可能心存疑虑，但是我们都很清楚硬编码最多存在一小会，随着对目标描述而编写更多的测试用例，逐渐就会替换掉硬编码。</p><p>继续完善 Soundex 功能，对于现在的代码并不符 Soundex 规范，以只传递单个字符为前提，并不符合第四条即如果没有三个数字，需要补零。接下来为这个功能编写新的测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Pads with zeros to ensure three digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value pads with zeros"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>失败了：</p><pre class="line-numbers language-shell"><code class="language-shell">/home/caolei/WorkSpace/TDD_Learning/test/Catch2/TestSoundex.cpp:45: FAILED:  REQUIRE_THAT( encoded, Equals("I000") )with expansion:  "I" equals: "I000"===============================================================================test cases: 2 | 1 passed | 1 failedassertions: 2 | 1 passed | 1 failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让测试通过：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 按照 Soundex 算法转换输入的字符串内容 * * @param word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word <span class="token operator">+</span> <span class="token string">"000"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时会发现第一条用例失败了，这时因为第一条用例与 Soundex 的规则不符合，修改其断言语句已适配规则：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在有两条相似的测试仅仅数据有些差异，但是没有关系，每个测试描述一种行为。<strong>我们不仅要确保系统按预期工作，还要让每个人知道所有既定的系统行为。</strong></p><p>完整这个功能周期后，考虑重构代码。可以发现 encode 的实现有些让人迷惑，尤其是不清楚条款的人看到这种魔数组合叫人心生厌恶 😢，因此需要对其封装下，提取独立的方法配以意图明确的名字。同时跑一下测试用例确保重构的修改对于已有功能无影响。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 的规则要求进行补零     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word <span class="token operator">+</span> <span class="token string">"000"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fixture-与设置"><a href="#fixture-与设置" class="headerlink" title="fixture 与设置"></a>fixture 与设置</h2><p>在重构的时候，不仅要审阅产品代码，还要审阅测试。现在测试代码中存在一些重复的地方，每个测试用例的 GIVEN 都需要创建一个 Soundex 对象。有两种方式修改：</p><ul><li>将两个测试用例合并入一个，公用一个 GIVEN。优点是比较方便修改，缺点如果用例比较多，测试代码会很长。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE</span><span class="token punctuation">(</span><span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GIVEN</span><span class="token punctuation">(</span><span class="token string">"A soundex var"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Soundex soundex<span class="token punctuation">;</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value is correct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第二个 WHEN 执行时会重新从 GIVEN 运行，不受前一个 WHEN 影响</span>        <span class="token function">WHEN</span><span class="token punctuation">(</span><span class="token string">"Input one another char"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> encoded <span class="token operator">=</span> soundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">THEN</span><span class="token punctuation">(</span><span class="token string">"Check that the return value pads with zeros"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种便是使用 class fixture 方法，GIVEN 与 WHEN 存在重复，虽然本文采用的单元测试编写风格是 BDD-ScenarioGivenWhenThen 但是对于短小的测试短如果测试名称可以描述清楚其目的，那么就没有必要太啰嗦：</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">FixtureSoundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Soundex MSoundex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Pads with zeros to ensure three digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Catch2 会在运行每个测试时创建 fixture 实例。现在就可以删除测试内的局部变量 soundex。现在 Soundex 代码有些长了，是时候要把 TODO 事项解决一下。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Include/Soundex.h</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment" spellcheck="true">// !TODO: 暂时将实现也都放入同一个文件中比较方便修改，后续合适的时机抽出</span><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 条款4 要求进行补零     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word <span class="token operator">+</span> <span class="token string">"000"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//test/Catch2/TestSoundex.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Soundex.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"catch2/catch.hpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"spdlog/spdlog.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Catch<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FixtureSoundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Soundex MSoundex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Retain sole letter of one letter world"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Pads with zeros to ensure three digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"I000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思索与测试驱动开发"><a href="#思索与测试驱动开发" class="headerlink" title="思索与测试驱动开发"></a>思索与测试驱动开发</h2><p>简单地说，TDD 的周期就是写一个测试，先确保测试失败，然后编码让测试通过，接着审阅代码和打磨设计（包括测试的设计），最后确保所有测试依然通过。</p><p>接下来将要处理规则 2：即在第一个字母后，用数字替换辅音。替换规则表中字母 b 对应数字 1，以此编写用例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replace consonants with appropriate numbers"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ab"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不出所料的失败，接下来便是让测试通过，然后重构功能代码。在寻求解决方案时，我们并不需要找到一个通用的方法，<strong>但是也不要使用已有的处理逻辑</strong>，例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">==</span> <span class="token string">"Ab"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"A100"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编写了这个特例，但是看起来它就像对 Ab 进行特殊处理成 A1 后的补零输出，但是我们已有 zeroPad 了，虽说特例并非错误，我们也可以用其他的测试用例来修改这个特例，这里仅仅是列举出当我想要功能向前开发时的标准，因为一直添加特例也是可行的不是么 😀。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 按照 Soundex 算法转换输入的字符串内容 * * @param word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> encoded <span class="token operator">=</span> Word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> encoded <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ops，补零出现了错误：</p><pre class="line-numbers language-shell"><code class="language-shell">/home/caolei/WorkSpace/TDD_Learning/test/Catch2/TestSoundex.cpp:43: FAILED:  REQUIRE_THAT( encoded, Equals("A100") )with expansion:  "A1000" equals: "A100"===============================================================================test cases: 3 | 2 passed | 1 failedassertions: 3 | 2 passed | 1 failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 zeroPad 方法以通过测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 安装 Soundex 条款4 要求进行补零 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> zerosNeeded <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Word <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>zerosNeeded<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在看起来不错，用例也已经通过了。但是对于 encode 方法的实现还是有些不满意，其中充斥了一些编码细节和魔数，对于不熟悉功能的其他人阅读起来是灾难的，不多废话重构它 🚀：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment" spellcheck="true">// !TODO: 暂时将实现也都放入同一个文件中比较方便修改，后续合适的实际抽出</span><span class="token comment" spellcheck="true">/** * @brief Soundex 算法类 * */</span><span class="token keyword">class</span> <span class="token class-name">Soundex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">encodedDigits</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取单词的第一个字母     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">head</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 的规则要求进行补零     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> zerosNeeded <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Word <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>zerosNeeded<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以声明性的方式组织代码，使其非常易于理解。设计中非常重要的一方面是从实现（怎么做）中分离接口（做什么），这提供了迈向更高层次设计方案的跳板。</p><blockquote><p>有时也会担心一些实现的细节并不是那么好：第一，是不是应该用 stringstream，而不是直接将字符串连接起来？第二，为什么不尽可能地用单独的 char？例如，为什么用 return words.substr(0, 1); 而非 return word.front();？第三，用 return std::string(); 不是比 return “”; 更好吗？</p><p>这些替代的代码方案可能更好。但这些都是过早优化（premature optimization）。这个时候，一个好的设计（接口一致且代码可读性高）更重要。一旦以牢靠的设计实现了正确的行为后，再考虑是否优化性能。</p></blockquote><p>先不要考虑对于性能进行优化，还是要优先考虑好的代码设计，例如消除代码中的<code>魔数</code>，取而代之一个合理名字的常量。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> size_t MaxCodeLength<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/** * @brief 安装 Soundex 的规则要求进行补零 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> zerosNeeded <span class="token operator">=</span> MaxCodeLength <span class="token operator">-</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Word <span class="token operator">+</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>zerosNeeded<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 encodedDigits() 中的硬编码 <code>1</code>，需要代码将字母 b 替换成 1，而写后续还要支持对其他字符的数字转换，可以通过一个合理的函数名字替代，最终的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取首字母后其他字符转化的对应数字 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试驱动"><a href="#测试驱动" class="headerlink" title="测试驱动"></a>测试驱动</h2><p>现在要继续使用 TDD 来促使开发进度继续向前，首要考虑一点以此时驱动开发更多的辅音变换逻辑，使解决方案更加具有通用性，是应该继续在 <code>Replace consonants with appropriate numbers</code> 增加更多例子的断言判断，还是新增一个测试用例呢？</p><p>TDD 的经验法则是一个测试一个断言（参考 7.3 节，获取更多信息）。我们提倡专注测试行为，而非测试功能函数。大部分时候要遵从这一个规则。</p><p>因此对于第二个辅音编码测试并不是另一个行为，我们将它加到同一个测试用例里，同时希望当一个断言失败后其他用例可以继续执行，这里使用 CHECK 来进行检查，同时可以使用 SECTION 方式编写测试代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replace consonants with appropriate numbers"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">SECTION</span><span class="token punctuation">(</span><span class="token string">"Test to replace the consonants in the entered words with appropriate numbers"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ab"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ac"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码保证测试用例通过：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取首字母后其他字符转化的对应数字 * * @param Word * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @param Letter * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Letter <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在再添加一个测试用例体现更多的数据输入情况：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ab"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ac"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CHECK_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ad"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A300"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照之前一样的步骤添加这次的功能吗？不 💣，这时就会发现功能实现代码开始有重复的逻辑产生，是时候将其重构以更加通用的实现，这里使用一个 hash 集合代替简单重复的 if 分支判断：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @param Letter * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> encodings <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该继续将其余所有的辅音转换，都以测试驱动的方式开发么，是否应该覆盖所有可能出问题的地方 ❓</p><p>请注意我们是在进行<code>测试驱动开发</code>，而非测试。TDD 着力于代码设计。测试主要用于表述你要构建的行为。TDD 过程中编写的测试大都是这个流程的附属产物。有了这些测试，在接下来改动代码时，你会更有信心。而且 TDD 的一个重要方面就是够用即可，在开发新功能即行为时，编写测试覆盖，而逻辑代码不在改变时，就不用编写测试代码了。</p><p>既然如此，那么先完成转换表：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> encodings <span class="token punctuation">{</span>    <span class="token punctuation">{</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">"4"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">"6"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于对应的测试程序 <code>Replace consonants with appropriate numbers</code> 需要思考其中的三个断言是否能增加对于此功能的特性理解，或者对特殊的行为有描述。如果没有那么就可以算作重复的测试将其删除了，最终使用断言并选一个不同的辅音来进行测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replace consonants with appropriate numbers"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Ax"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果出现别的情况呢"><a href="#如果出现别的情况呢" class="headerlink" title="如果出现别的情况呢"></a>如果出现别的情况呢</h2><p>现在实现的 encodedDigit 是假定能够在 encodings 映射中找到传入的字母，之前为了以最低限度通过测试所做的假设，现在需要考虑其他的情况，即有没有可能传入的字母没有在映射中找到？发生时如何解决。</p><p>Soundex 如何解决不能识别的字母？可以通过客户或者 Wiki 百科了解到，即忽略。输入 A# 得到 A000。现在为这个行为编写一些列外的情形测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignore nonrecognition characters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"A#"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码以通过测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @brief 获取一个字符对应的数字 * * @param Letter * @return std::string */</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// clang-format off</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span> encodings <span class="token punctuation">{</span>        <span class="token punctuation">{</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token punctuation">{</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">"3"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">"4"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">"6"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// clang-format on</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> it <span class="token operator">==</span> encodings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当通过 TDD 完成一个周期的功能时，往往在重构环节就可以开始考虑完善这个功能，如同此例。现在我们可以认为针对单一字符输入为前提可以正确的进行转换了。</p><h2 id="一次只做一件事"><a href="#一次只做一件事" class="headerlink" title="一次只做一件事"></a>一次只做一件事</h2><p>当完成单一字符的转换，现在需要通过测试驱动开发出用以转换一个词末尾剩下的字母了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replaces multiple consonants with digits"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Acdl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>简单的办法便是除第一个字母，遍历剩下的字母并转换。但是当前的代码结构并不容易支持，可以先重构下代码。</p><p>但是请注意，<strong>一次只做一件事。测试驱动开发时，要保持每一步都不同</strong>。在写测试时，不要跑去重构。同样，在尝试让测试通过时也不要去重构。并行总是容易出错，不是么 🐛。</p><p>为了便于重构，先将我们刚才的测试注释掉，<code>[.]</code> 标识会使 Catch2 跳过这个测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Replaces multiple consonants with digits"</span><span class="token punctuation">,</span> <span class="token string">"[.][SoundexEncoding]"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重构下当前解决方案。不要将整个词传入 encodedDigits()，而是将词尾（除了第一个字母外的其余字母）传入 encodedDigits()，这样遍历更加简洁。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取单词除了第一个字母外的其余字母     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">tail</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行下测试确保改动不会破话其他功能。回到 TDD 周期开始，启用被暂时禁掉的测试 <code>"Replaces multiple consonants with digits"</code> ，使其失败。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>            encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 for 循环遍历每个字母，这样不在需要对 Word 进行判空了，删除之。</p><h2 id="限制长度"><a href="#限制长度" class="headerlink" title="限制长度"></a>限制长度</h2><p>规则 4 声明 Soundex 编码结果必须是 4 个字符，为此行为增加新的测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Limits length to four characters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Dcdlb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定位问题长处超出，修复问题：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>encoding<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MaxCodeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重构下代码，更好的表达含义：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 完成字符串的 Soundex 规则编码     *     * @param Encoding     * @return true     * @return false     */</span>    <span class="token keyword">bool</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MaxCodeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="丢掉元音"><a href="#丢掉元音" class="headerlink" title="丢掉元音"></a>丢掉元音</h2><p>规则 1 说要丢掉所有的元音以及 w、h 和 y。现在为此功能添加测试用例。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignores Vowel like letters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Baeiouhycdl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"B234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行下测试发现是通过的，主要是由于 encodedDigit() 对于转换表中找不到的字母会返回空字符串。</p><p>这里需要注意下：如果没有改动类定义，测试就通过了，那背后肯定另有故事（参见 3.5），如果接下来的测试也都继续通过，那么应该考虑回滚掉代码改动。测试提前通过的原因，可能是你的步伐有点大，但这样你可能不会感受到 TDD 带来的好处。</p><h2 id="让测试自我澄清"><a href="#让测试自我澄清" class="headerlink" title="让测试自我澄清"></a>让测试自我澄清</h2><p>接下来处理两个相邻字母有相同数字编码的情况。按照规则 3，将用一个数字标识这些字母，这条规则也适用于第一个字母。先用测试描述第一个情况：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Combines duplicate encodings"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Abfcgdt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>b 和 f 都编码为 1，c 和 g 编码为 2，d 和 t 编码为 3。最终 Abfcgdt –&gt; A123。可以添加一些前置条件（precondition）断言，以帮助阅读代码的人建立这种关联。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Combines duplicate encodings"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Abfcgdt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"A123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就需要将 encodedDigit 转化成 public 接口，仁者见仁、智者见智吧，个人还是认为虽然这样更加方便了后续读取，但是代码的封装性同样重要，客户不需要的接口完全没有必要暴露出来，写个注释信息不也很好么。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取 Encoding 最后一个字符     *     * @param Encoding     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">lastDigit</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// string 初始化一个字符的方法</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳出条条框框来测试"><a href="#跳出条条框框来测试" class="headerlink" title="跳出条条框框来测试"></a>跳出条条框框来测试</h2><p>考虑重复的第二种情况，第二个字母与第一个字母重复。可以发现目前所有的测试都是以一个大写字母开始，其余都是小写，但这个算法应该是大小写无关的，这里可以先把重复的测试暂停，先处理下大小写的测试。</p><p>为了能够快速、简单地比较，Soundex 算法将类似的词编码至相同的代码。字母的大小写并不影响发音。但为了简化比较 Soundex 编码，我们将自始至终使用一样的写法。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Upper cases first letter"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 encode 将首字母大写：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 按照 Soundex 算法转换输入的字符串内容     *     * @param word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">upperFront</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 返回传入的字符串首字母大写     *     * @param String     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">upperFront</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> String<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">toupper</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以修改 “Ignores Vowel like letters” 用例来确认功能：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignores Vowel like letters"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"BaAeEiIoOuUhHyYcdl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"B234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>encodedDigits() 中的代码有点隐晦和难以理解。我们必须深入考虑来发现以下几点：<ol><li>许多字母没有对应的编码；</li><li>encodedDigit() 对于上述字母会返回空字符串；</li><li>将一个空字符串和 encodedDigits() 中的变量 encodings 连接起来没有任何意义。</li></ol></li></ul><p>重构一下，以便代码更加明了。将删除空字符串使用一个特殊的字符传替代，显式判断无用的字符不在进行空字符串拼接。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token function">NotADigit</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> it <span class="token operator">==</span> encodings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> NotADigit <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> encoding<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>std<span class="token operator">::</span>string <span class="token function">lastDigit</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> NotADigit<span class="token punctuation">;</span>    <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// string 初始化一个字符的方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来处理一个辅音大小写的测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Ignores case when encoding consonants"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"BCDL"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Bcdl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它声明了对”BCDL”和”Bcdl”的编码结果是一样的。也就是说，我们并不关心实际的编码是什么，只要大写的输入和小写的输入得到的结果一样就行。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取一个字符对应的数字     *     * @param Letter     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> encodings<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">lower</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> it <span class="token operator">==</span> encodings<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> NotADigit <span class="token operator">:</span> it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * @brief 将输入的 char 字符转换为小写     *     * @param C     * @return char     */</span>    <span class="token keyword">char</span> <span class="token function">lower</span><span class="token punctuation">(</span><span class="token keyword">char</span> C<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">tolower</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h2><p>现在开始处理第二个字符与第一个字符相同的情况。这个就是促使我们先将算法改写为大小写无关的，现在编写这个行为测试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Combines duplicate codes when 2nd letter duplicates 1st"</span><span class="token punctuation">,</span> <span class="token string">"[SoundexEncoding]"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Bbcd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"B230"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现方法也很简单，就是将需要编码的词从之前的之将词尾传入 encodedDigits() 改为将整个词都传入其中，使其可以先分析首字母转换完成后的数字，然后比对第二个字母是否需要丢弃：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    std<span class="token operator">::</span>string <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">zeroPad</span><span class="token punctuation">(</span><span class="token function">upperFront</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">tail</span><span class="token punctuation">(</span><span class="token function">encodedDigits</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> Word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重构至单一责任的函数"><a href="#重构至单一责任的函数" class="headerlink" title="重构至单一责任的函数"></a>重构至单一责任的函数</h2><p>是时候考虑重构了，考虑单一责任原则，函数 encodedDigits() 变得很复杂，它通过两个步骤完成算法：</p><ol><li>它首先将首字母的编码追加至变量 encoding 中；</li><li>然后遍历剩下的字母，追加结果至 encoding。</li></ol><p>可以将 encodedDigits() 中的两个步骤提取成两个单独的函数，每个函数各自包含一个抽象概念的实现细节。如此，encodedDigits() 中的代码只是声明了解决方案的策略。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 获取首字母后其他字符转化的对应数字     *     * @param Word     * @return std::string     */</span>    std<span class="token operator">::</span>string <span class="token function">encodedDigits</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>string encoding<span class="token punctuation">;</span>        <span class="token function">encodeHead</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> Word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeTail</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> Word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 对词首字母进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeHead</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Word<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 对词尾字符进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeTail</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> <span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComplete</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 encodeTail() 中的 for 循环体提取出来。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 对词尾字符进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeTail</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> <span class="token function">tail</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isComplete</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">,</span> letter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 翻译单一字符 letter 并拼接到 Encoding     *     * @param Encoding     * @param Letter     */</span>    <span class="token keyword">void</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> digit <span class="token operator">!=</span> <span class="token function">lastDigit</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有许多优化，详情可以看看笔记配套的程序代码。</p><h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>那元音怎么办呢？规则 3 说被一个元音（不是 h 或 w ）分开的相同编码，应该编码两次。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">TEST_CASE_METHOD</span><span class="token punctuation">(</span>FixtureSoundex<span class="token punctuation">,</span> <span class="token string">"Does not combine duplicate encodings separate by vowels"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">REQUIRE_THAT</span><span class="token punctuation">(</span>MSoundex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"Jbob"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"J110"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改了 encodeLetter() 中的条件表达式，在不是重复编码或最后一个字母是元音的情况下，追加一个数字。这个声明也敦促了一些其他的相应改动。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/**     * @brief 对词尾字符进行编码翻译     *     * @param Encoding     * @param Word     */</span>    <span class="token keyword">void</span> <span class="token function">encodeTail</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Word<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">1u</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isComplete</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">,</span> Word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Word<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 翻译单一字符 letter 并拼接到 Encoding     *     * @param Encoding     * @param Letter     */</span>    <span class="token keyword">void</span> <span class="token function">encodeLetter</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> Encoding<span class="token punctuation">,</span> <span class="token keyword">char</span> Letter<span class="token punctuation">,</span> <span class="token keyword">char</span> LastLetter<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> digit <span class="token operator">=</span> <span class="token function">encodedDigit</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">!=</span> NotADigit <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isDuplicateLetter</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">,</span> digit<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isVowel</span><span class="token punctuation">(</span>LastLetter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Encoding <span class="token operator">+</span><span class="token operator">=</span> digit<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @brief 判断是否是元音字符     *     * @param Letter     * @return true     * @return false     */</span>    <span class="token keyword">bool</span> <span class="token function">isVowel</span><span class="token punctuation">(</span><span class="token keyword">char</span> Letter<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"aeiouy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">lower</span><span class="token punctuation">(</span>Letter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="漏了什么测试码"><a href="#漏了什么测试码" class="headerlink" title="漏了什么测试码"></a>漏了什么测试码</h2><p>我们很少拥有所有的规范。很少有人会如此幸运。即便是 Soundex 的规则，看似完整，实际却不能蕴含所有情形。在编程过程中，一些测试或代码实现经常会激发我们进行其他方面的思考。一般而言，要么把这些思考结果记在脑子里，要么写到一个列表或记事本中。下面就是对 Soundex 进行思考而得到的列表。</p><ul><li>若给定的词中含有分隔符，如句点（例如，Mr.Smith），该怎么办？应该忽略它们（就像现在做的这样），抛出一个异常（假定客户应该把词合理地分好），还是做些其他操作？说到异常，怎样以测试驱动的方法在代码中加入异常处理？在 4.4.5 节中，你将学到怎样设计期望抛出异常的测试。</li><li>空字符串该怎样编码?（或者说，可以假定不会接收到一个空字符串输入吗？）</li><li>该怎样处理非英语字母中的辅音（如 ñ）？Soundex 算法依然适用吗？isVowel()函数需要支持带变音符的元音吗？</li></ul><p>如何解决这些问题应当适时的做出自己的决定，最好的方法往往时问问客户。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一个解决方案应具备的一些重要特征。</p><ul><li>它实现了客户的需求。如果没有，那么不管怎样，它都不是好的解决方案。在 TDD 中，你编写的测试能够帮助你了解你的解决方案是不是客户要的。性能可能是众多客户需求中的一项。你的一部分职责就是理解他们的性能需求，如果没必要的话，就不要花费时间去做性能优化。</li><li>它可以工作。如果一个解决方案有大量的缺陷，那么构建得再优雅，也不是好的解决方案。TDD 可以帮助确定我们交付的软件能以期望的方式工作。TDD 不是银弹。你交付的软件依然会有缺陷，所以照样需要许多其他方式的测试。但是，TDD 会让你发布的代码包含非常少的缺陷。</li><li>它易于理解。对于编写得不好的代码，每个人都需要花费大量的时间去理解。TDD 让你可以安全地重新组织代码以提高可读性。</li><li>它易于修改。通常，容易修改的代码意味着高质量的设计。TDD 使你可以持续地修改，以保持设计的高质量。</li></ul><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>至此，便完成了一个实际的 TDD 过程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>TDD 的践行步骤：<ol><li>编译一个最基本单元功能的测试代码。</li><li>测试失败。</li><li>实现功能代码<strong>最低限度</strong>使得测试代码通过。</li><li>测试成功。</li><li>goto ⬆ 第一步。</li><li>TDD 的各个周期都会使用重构来审阅设计。</li></ol></li></ul><h3 id="践行步骤解析"><a href="#践行步骤解析" class="headerlink" title="践行步骤解析"></a>践行步骤解析</h3><ul><li><p>编写最基本的单元功能测试代码：请谨记我们践行的是 TDD，而非单纯的测试工作，应该测试的是代码行为，当向测试代码添加重复的断言语句时应该自问下这个断言是否可以提升对测试含义以及功能的理解。</p></li><li><p>测试失败：每次以最小的步伐向前推进，引起问题后就去解决掉它。</p></li><li><p>实现功能代码最低限度的使得测试代码通过：</p><ul><li><code>最低限度</code> 即刚刚好满足测试用例所需要的功能，即使是通过特例来完成的。就像 Soundex 中出现过多次特例一样，经常使用特例的方法来快速通过测试代码。</li><li>但是请注意特例也不是万能的，就像文档中我所讲的 <strong>不要使用已有的处理逻辑</strong>，避免使用大量的特例浪费时间，当第二次添加的测试用例，就不可以再使用上一次一样的特例方法了，应该寻求更加通用的实现方法。这一步不仅仅是重构，也是作为我们代码开发前进的动力，是对行为的一种完善。</li></ul></li><li><p>测试成功：必然保证之前失败的用例要正确的通过，且没有影响已有的用例。</p></li><li><p>审视代码进行重构：重构不仅仅是某个单一步骤执行，而是当历经 TDD 的各个周期时，我们会使用重构来审阅设计，同时修复出现的所有问题。重构的主要关注点是提升表达能力，去除重复代码。就代码的可维护性来说，这两个点最有裨益。</p></li><li><p>一次只进行一件事：当发现一个行为的实现可能需要先重构下代码才能更方便的支持，那么就要先将这个行为失败的测试描述先注释掉。当完成重构后再打开并完成。<strong>一次只做一件事。测试驱动开发时，要保持每一步都不同</strong>。再写测试时，不要跑去重构。同样，在尝试让测试通过时也不要去重构。</p></li><li><p>如果出现并未主动实现对应行为代码，新增加的测试用例确成功了这时就要警惕：如果接下来的测试也都继续通过，那么应该考虑回滚掉代码改动。测试提前通过的原因，可能是你的步伐有点大，但这样你可能不会感受到 TDD 带来的好处。</p></li></ul><hr><ul><li>一个解决方案应具备的一些重要特征。<ul><li>它实现了客户的需求。如果没有，那么不管怎样，它都不是好的解决方案。在 TDD 中，你编写的测试能够帮助你了解你的解决方案是不是客户要的。性能可能是众多客户需求中的一项。你的一部分职责就是理解他们的性能需求，如果没必要的话，就不要花费时间去做性能优化。</li><li>它可以工作。如果一个解决方案有大量的缺陷，那么构建得再优雅，也不是好的解决方案。TDD 可以帮助确定我们交付的软件能以期望的方式工作。TDD 不是银弹。你交付的软件依然会有缺陷，所以照样需要许多其他方式的测试。但是，TDD 会让你发布的代码包含非常少的缺陷。</li><li>它易于理解。对于编写得不好的代码，每个人都需要花费大量的时间去理解。TDD 让你可以安全地重新组织代码以提高可读性。</li><li>它易于修改。通常，容易修改的代码意味着高质量的设计。TDD 使你可以持续地修改，以保持设计的高质量。</li></ul></li></ul><h3 id="TDD-Q-amp-A"><a href="#TDD-Q-amp-A" class="headerlink" title="TDD Q&amp;A"></a>TDD Q&amp;A</h3><ol><li><p>有时也会担心一些实现的细节并不是那么好，是否应该再重构是考虑优化？</p><ul><li>再未完全实现功能设计之前，这些都属于过早优化。这个时候一个好的设计更重要，一旦以牢靠的设计实现了正确的行为后，并且有完整的单元测试来给你提供勇气后再进行优化吧！</li></ul></li><li><p>没有被单元测试代码所描述的行为算正确还是错误？</p><ul><li>任何时候，一个完整的测试集合声明了系统中期望的行为。这里蕴含着一个潜台词：如果一个行为没有对应的测试来描述，那这个行为要么不存在，要么不是期望的（或者测试本身没有尽到描述行为的职责）。</li></ul></li><li><p>对于有大量的数据细节测试，例如 Soundex 中的辅音表，是否需要将所有的表信息都进行单元测试覆盖？</p><ul><li>请注意我们实在进行<code>测试驱动开发</code>，而非测试。TDD 着力于代码设计。测试主要用于表述你要构建的行为。TDD 过程中编写的测试大都是这个流程的附属产物。有了这些测试，在接下来改动代码时，你会更有信心。而且 TDD 的一个重要方面就是够用即可，在开发新功能即行为时，编写测试覆盖，而逻辑代码不在改变时，就不用编写测试代码了。</li><li>也就是说如果你读取这个表数据的行为单一，那么它就不需要全部都覆盖到。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）测试驱动开发技巧--环境设置</title>
      <link href="/2022/06/02/yi-ce-shi-qu-dong-kai-fa-ji-qiao-huan-jing-she-zhi/"/>
      <url>/2022/06/02/yi-ce-shi-qu-dong-kai-fa-ji-qiao-huan-jing-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新开个坑，本系列主要是<code>《C++程序设计实践与技巧：测试驱动开发》</code>一书的学习记录，由于笔记是在 2020 年就完成了。本次将其进行了一些细节修订、图片优化后同步到 blog 上，因此有些时间会对不上，不要在意这些细节无伤大雅 😂。</p><blockquote><p>图床我是自建在 <a href="https://github.com/HATTER-LONG/Resource">github</a> 上用的 CDN 加速，如果有图片刷不出来的情况可以邮件我，看到了我会处理的。</p></blockquote><blockquote><p>或者直接看<a href="https://github.com/HATTER-LONG/NoteBook_ModernCppProgrammingWithTDD">我的笔记</a>也可以，觉得不错的来个 star 吧 😊。</p></blockquote><h2 id="实例程序"><a href="#实例程序" class="headerlink" title="实例程序"></a>实例程序</h2><p>书中主要使用了两种测试框架 GMock 与 CppUTest，但是学习过程中希望 Catch 替换掉 CppUTest 与 GMock 并存的方式。</p><ul><li>Wait，没想到上来就有个大差异，最近 Catch2 已经发布 v3 了。一次史无前例的破坏性更新，本文还是继续使用 v2 lastest 稳定版本，如果想要尝试切换参考官方给出的<a href="https://github.com/catchorg/Catch2/blob/devel/docs/migrate-v2-to-v3.md#top">移植建议</a>。</li></ul><p><img src="https://fastly.jsdelivr.net/gh/HATTER-LONG/Resource@main/images/TDD/01_codeexample.png" alt="code_example"></p><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>主要在 Ubuntu20.04 system 下，使用 Clang-11 为编译器前端，Gun 的 ld 为连接器。</p><ul><li>两年过去了，我也抛弃了 Ubuntu 改用 Mac 了。你变成了你最讨厌的样子。</li><li>话说 LLVM 都更新到 14 了（此文编写日），<code>不过不用担心编译器问题</code>，本系列的代码没有需要特殊语法的地方，即使切换了 Catch2 v3 也只需要 C++14 标准即可。不过我还是要说 LLVM 永远的神。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">~/WorkSpace❯ ls /bin/ld -llrwxrwxrwx 1 root root 19 Apr  7  2020 /bin/ld -> x86_64-linux-gnu-ld~/WorkSpace❯ clang -vclang version 11.0.0 (https://github.com/llvm/llvm-project.git 0160ad802e899c2922bc9b29564080c22eb0908c)Target: x86_64-unknown-linux-gnuThread model: posixInstalledDir: /usr/binFound candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/8Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/9Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/8Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9Selected GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/9Candidate multilib: .;@m64Selected multilib: .;@m64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>使用 CMake 支持跨平台编译。</p><pre class="line-numbers language-shell"><code class="language-shell">~/WorkSpace❯ cmake -versioncmake version 3.16.3CMake suite maintained and supported by Kitware (kitware.com/cmake).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Google-Mock-amp-Catch2"><a href="#Google-Mock-amp-Catch2" class="headerlink" title="Google Mock &amp; Catch2"></a>Google Mock &amp; Catch2</h2><p>安装不在赘述，Google Mock 的版本信息如下：</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/lib/cmake/GTest❯ lsGTestConfig.cmake  GTestConfigVersion.cmake  GTestTargets-noconfig.cmake  GTestTargets.cmake/usr/local/lib/cmake/GTest❯ dpkg -l | grep googletestii  googletest                             1.10.0-2                            all          Google's C++ test framework sources<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Catch2 版本信息如下：</p><pre class="line-numbers language-cxx"><code class="language-cxx">/usr/local/lib/cmake/Catch2❯ lsCatch.cmake         Catch2ConfigVersion.cmake     Catch2Targets.cmake  ParseAndAddCatchTests.cmakeCatch2Config.cmake  Catch2Targets-noconfig.cmake  CatchAddTests.cmake/usr/local/lib/cmake/Catch2❯ vim Catch2ConfigVersion.cmake>>> set(PACKAGE_VERSION "2.13.3")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搭建运行-GMock-与-Catch2-的环境"><a href="#搭建运行-GMock-与-Catch2-的环境" class="headerlink" title="搭建运行 GMock 与 Catch2 的环境"></a>搭建运行 GMock 与 Catch2 的环境</h3><p>详见我的<a href="https://github.com/HATTER-LONG/TDD_Learning">项目</a>。</p><ul><li>快瞧瞧这个青涩的项目，README 写的一塌糊涂，给个 star 吧，让我知道有人在看有动力翻新下。</li></ul><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>不打算使用 JsonCPP 切换为开源的 <code>Json for modern c++</code>。</p><ul><li>爱用哪个都行，换成 MDJSON 纯粹是喜欢 Only Header。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">Install the project...-- Install configuration: ""-- Up-to-date: /usr/local/include-- Installing: /usr/local/include/nlohmann-- Installing: /usr/local/include/nlohmann/json.hpp-- Installing: /usr/local/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake-- Installing: /usr/local/lib/cmake/nlohmann_json/nlohmann_jsonConfigVersion.cmake-- Installing: /usr/local/lib/cmake/nlohmann_json/nlohmann_jsonTargets.cmake-- Installing: /usr/local/lib/pkgconfig/nlohmann_json.pc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="libcurl"><a href="#libcurl" class="headerlink" title="libcurl"></a>libcurl</h2><p>开源代码安装</p><pre class="line-numbers language-shell"><code class="language-shell">~/Tools/curl-7.74.0/build❯ sudo make install -j32[ 73%] Built target libcurl[100%] Built target curlInstall the project...-- Install configuration: ""-- Installing: /usr/local/lib/libcurl.a-- Installing: /usr/local/bin/curl-- Installing: /usr/local/bin/curl-config-- Installing: /usr/local/lib/pkgconfig/libcurl.pc-- Up-to-date: /usr/local/include/curl-- Up-to-date: /usr/local/include/curl/curl.h-- Up-to-date: /usr/local/include/curl/curlver.h-- Up-to-date: /usr/local/include/curl/easy.h-- Up-to-date: /usr/local/include/curl/mprintf.h-- Up-to-date: /usr/local/include/curl/multi.h-- Up-to-date: /usr/local/include/curl/options.h-- Up-to-date: /usr/local/include/curl/stdcheaders.h-- Up-to-date: /usr/local/include/curl/system.h-- Up-to-date: /usr/local/include/curl/typecheck-gcc.h-- Up-to-date: /usr/local/include/curl/urlapi.h-- Old export file "/usr/local/lib/cmake/CURL/CURLTargets.cmake" will be replaced.  Removing files [/usr/local/lib/cmake/CURL/CURLTargets-noconfig.cmake].-- Installing: /usr/local/lib/cmake/CURL/CURLTargets.cmake-- Installing: /usr/local/lib/cmake/CURL/CURLTargets-noconfig.cmake-- Installing: /usr/local/lib/cmake/CURL/CURLConfigVersion.cmake-- Installing: /usr/local/lib/cmake/CURL/CURLConfig.cmake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h2><p>Boost 直接通过 apt-get 安装管理：</p><ul><li>被 apt 版本管理折磨的退坑，是我不配 😭。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">~/Tools❯ dpkg -l | grep boostii  libboost-atomic1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        atomic data types, operations, and memory ordering constraintsii  libboost-atomic1.71.0:amd64            1.71.0-6ubuntu6                     amd64        atomic data types, operations, and memory ordering constraintsii  libboost-chrono1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        C++ representation of time duration, time point, and clocksii  libboost-chrono1.71.0:amd64            1.71.0-6ubuntu6                     amd64        C++ representation of time duration, time point, and clocksii  libboost-container1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        C++ library that implements several well-known containers - dev filesii  libboost-container1.71.0:amd64         1.71.0-6ubuntu6                     amd64        C++ library that implements several well-known containersii  libboost-context1.71-dev:amd64         1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-context1.71.0:amd64           1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-coroutine1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-coroutine1.71.0:amd64         1.71.0-6ubuntu6                     amd64        provides a sort of cooperative multitasking on a single threadii  libboost-date-time1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        set of date-time libraries based on generic programming conceptsii  libboost-date-time1.71.0:amd64         1.71.0-6ubuntu6                     amd64        set of date-time libraries based on generic programming conceptsii  libboost-exception1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        library to help write exceptions and handlersii  libboost-fiber1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        cooperatively-scheduled micro-/userland-threadsii  libboost-fiber1.71.0:amd64             1.71.0-6ubuntu6                     amd64        cooperatively-scheduled micro-/userland-threadsii  libboost-filesystem1.71-dev:amd64      1.71.0-6ubuntu6                     amd64        filesystem operations (portable paths, iteration over directories, etc) in C++ii  libboost-filesystem1.71.0:amd64        1.71.0-6ubuntu6                     amd64        filesystem operations (portable paths, iteration over directories, etc) in C++ii  libboost-graph-parallel1.71-dev        1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-graph-parallel1.71.0          1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-graph1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-graph1.71.0:amd64             1.71.0-6ubuntu6                     amd64        generic graph components and algorithms in C++ii  libboost-iostreams1.71-dev:amd64       1.71.0-6ubuntu6                     amd64        Boost.Iostreams Library development filesii  libboost-iostreams1.71.0:amd64         1.71.0-6ubuntu6                     amd64        Boost.Iostreams Libraryii  libboost-locale1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        C++ facilities for localizationii  libboost-locale1.71.0:amd64            1.71.0-6ubuntu6                     amd64        C++ facilities for localizationii  libboost-log1.71-dev                   1.71.0-6ubuntu6                     amd64        C++ logging libraryii  libboost-log1.71.0                     1.71.0-6ubuntu6                     amd64        C++ logging libraryii  libboost-math1.71-dev:amd64            1.71.0-6ubuntu6                     amd64        Boost.Math Library development filesii  libboost-math1.71.0:amd64              1.71.0-6ubuntu6                     amd64        Boost.Math Libraryii  libboost-mpi-python1.71-dev            1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI), Python Bindingsii  libboost-mpi-python1.71.0              1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI), Python Bindingsii  libboost-mpi1.71-dev                   1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI)ii  libboost-mpi1.71.0                     1.71.0-6ubuntu6                     amd64        C++ interface to the Message Passing Interface (MPI)ii  libboost-numpy1.71-dev                 1.71.0-6ubuntu6                     amd64        Boost.Python NumPy extensions development filesii  libboost-numpy1.71.0                   1.71.0-6ubuntu6                     amd64        Boost.Python NumPy extensionsii  libboost-program-options1.71-dev:amd64 1.71.0-6ubuntu6                     amd64        program options library for C++ii  libboost-program-options1.71.0:amd64   1.71.0-6ubuntu6                     amd64        program options library for C++ii  libboost-python1.71-dev                1.71.0-6ubuntu6                     amd64        Boost.Python Library development filesii  libboost-python1.71.0                  1.71.0-6ubuntu6                     amd64        Boost.Python Libraryii  libboost-random1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        Boost Random Number Libraryii  libboost-random1.71.0:amd64            1.71.0-6ubuntu6                     amd64        Boost Random Number Libraryii  libboost-regex1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        regular expression library for C++ii  libboost-regex1.71.0:amd64             1.71.0-6ubuntu6                     amd64        regular expression library for C++ii  libboost-serialization1.71-dev:amd64   1.71.0-6ubuntu6                     amd64        serialization library for C++ii  libboost-serialization1.71.0:amd64     1.71.0-6ubuntu6                     amd64        serialization library for C++ii  libboost-stacktrace1.71-dev:amd64      1.71.0-6ubuntu6                     amd64        library to capture and print stack traces - development filesii  libboost-stacktrace1.71.0:amd64        1.71.0-6ubuntu6                     amd64        library to capture and print stack tracesii  libboost-system1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        Operating system (e.g. diagnostics support) libraryii  libboost-system1.71.0:amd64            1.71.0-6ubuntu6                     amd64        Operating system (e.g. diagnostics support) libraryii  libboost-test1.71-dev:amd64            1.71.0-6ubuntu6                     amd64        components for writing and executing test suitesii  libboost-test1.71.0:amd64              1.71.0-6ubuntu6                     amd64        components for writing and executing test suitesii  libboost-thread1.71-dev:amd64          1.71.0-6ubuntu6                     amd64        portable C++ multi-threadingii  libboost-thread1.71.0:amd64            1.71.0-6ubuntu6                     amd64        portable C++ multi-threadingii  libboost-timer1.71-dev:amd64           1.71.0-6ubuntu6                     amd64        C++ wall clock and CPU process timersii  libboost-timer1.71.0:amd64             1.71.0-6ubuntu6                     amd64        C++ wall clock and CPU process timersii  libboost-type-erasure1.71-dev:amd64    1.71.0-6ubuntu6                     amd64        C++ runtime polymorphism based on conceptsii  libboost-type-erasure1.71.0:amd64      1.71.0-6ubuntu6                     amd64        C++ runtime polymorphism based on conceptsii  libboost-wave1.71-dev:amd64            1.71.0-6ubuntu6                     amd64        C99/C++ preprocessor libraryii  libboost-wave1.71.0:amd64              1.71.0-6ubuntu6                     amd64        C99/C++ preprocessor libraryii  libboost1.71-all-dev                   1.71.0-6ubuntu6                     amd64        Boost C++ Libraries development files (ALL)ii  libboost1.71-dev:amd64                 1.71.0-6ubuntu6                     amd64        Boost C++ Libraries development filesii  libboost1.71-doc                       1.71.0-6ubuntu6                     all          Boost.org libraries documentation placeholderii  libboost1.71-tools-dev                 1.71.0-6ubuntu6                     amd64        Boost C++ Libraries development tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要展示了后边文章中所需要的一些三方库、安装等示例，继续吐槽 C++ 没有统一的包管理器（对着 Cargo 流口水）。</p><ul><li>看到以前写的笔记还是感慨良多。有时看书实在太功利了，总想这去读对自己有用的，但是当能判断出这书有用了其实反而对于知识、眼界的扩展是有限的。</li><li>在阅读本书时，无论工作内容还是什么其他方面完全没有测试代码的意识，在钢丝上行走小心翼翼的维护者脆弱的代码。随着经验的增加越来越能体会到测试代码的重要性，已经记不得当时学习这本书的动机了，但是以现在的眼光来看当时的决定对我的帮助无疑是巨大的。</li><li>最后引用一句忘记了从那本书看到的话：你读过的每一本书，最后都会变成你的血与肉。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试驱动开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试驱动开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/05/28/di-yi-pian-bo-ke/"/>
      <url>/2022/05/28/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="博客功能测试"><a href="#博客功能测试" class="headerlink" title="博客功能测试"></a>博客功能测试</h1><h2 id="代码高亮测试"><a href="#代码高亮测试" class="headerlink" title="代码高亮测试"></a>代码高亮测试</h2><ol><li>C++ 代码：</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">TFactory</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">REQUIRES</span><span class="token punctuation">(</span>m_mutex<span class="token punctuation">)</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> id<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-</span><span class="token operator">></span>    <span class="token keyword">typename</span> FactoryDetails<span class="token operator">::</span>get_interface_const_ref<span class="token operator">&lt;</span>TFactory<span class="token operator">></span><span class="token operator">::</span>type<span class="token punctuation">{</span>    tComponentContItr componentPtr <span class="token operator">=</span> findComponentFactory<span class="token operator">&lt;</span>TFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>componentPtr <span class="token operator">!=</span> m_componentCont<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> factory <span class="token operator">=</span> componentPtr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">!=</span> componentPtr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">using</span> tInterface <span class="token operator">=</span>                <span class="token keyword">typename</span> FactoryDetails<span class="token operator">::</span>get_interface<span class="token operator">&lt;</span>TFactory<span class="token operator">></span><span class="token operator">::</span>type<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>tInterface<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>factory<span class="token operator">-</span><span class="token operator">></span>second<span class="token operator">-</span><span class="token operator">></span><span class="token function">getPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token function">FactoryNotRegisteredEx</span><span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span>TFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Rust 代码：</li></ol><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Cacher<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token keyword">where</span>    T<span class="token punctuation">:</span> <span class="token function">Fn</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> u32<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">new</span><span class="token punctuation">(</span>calculation<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">-></span> Cacher<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        Cacher <span class="token punctuation">{</span>            calculation<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> None<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token punctuation">{</span>            <span class="token function">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">,</span>            None <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>calculation<span class="token punctuation">)</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                v            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> simulated_user_specified_value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> simulated_random_number <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token function">generate_workout</span><span class="token punctuation">(</span>simulated_user_specified_value<span class="token punctuation">,</span> simulated_random_number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">generate_workout</span><span class="token punctuation">(</span>intensity<span class="token punctuation">:</span> u32<span class="token punctuation">,</span> random_number<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客功能 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
